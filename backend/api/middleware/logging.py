#!/usr/bin/env python3
"""
üìù Logging Middleware –¥–ª—è Anonymeme API
Production-ready structured logging —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import time
import json
import uuid
import logging
import traceback
from typing import Dict, Any, Optional
from datetime import datetime

from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware
import structlog

from ..core.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ structured logging
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger(__name__)


class LoggingMiddleware(BaseHTTPMiddleware):
    """
    Production-ready middleware –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–π—Å–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–æ–≤, –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∞—É–¥–∏—Ç
    """
    
    def __init__(self, app):
        super().__init__(app)
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫
        self.request_count = 0
        self.error_count = 0
        self.total_duration = 0.0
        
        # –ü—É—Ç–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ
        self.exclude_detailed_logging = {
            "/health",
            "/metrics", 
            "/favicon.ico",
            "/robots.txt"
        }
        
        # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
        self.sensitive_fields = {
            "password", "token", "secret", "key", "private",
            "authorization", "cookie", "session"
        }
        
        logger.info("Logging middleware initialized")
    
    async def dispatch(self, request: Request, call_next):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ middleware"""
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞–ø—Ä–æ—Å–∞
        request_id = str(uuid.uuid4())
        correlation_id = request.headers.get("x-correlation-id", request_id)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –≤ request state
        request.state.request_id = request_id
        request.state.correlation_id = correlation_id
        
        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        start_time = time.time()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        await self._log_request_start(request, request_id, correlation_id)
        
        try:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            response = await call_next(request)
            
            # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            duration = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            await self._log_request_end(
                request, response, request_id, correlation_id, duration
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ headers –¥–ª—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞
            response.headers["X-Request-ID"] = request_id
            response.headers["X-Correlation-ID"] = correlation_id
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            self._update_metrics(duration, response.status_code)
            
            return response
            
        except Exception as e:
            # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ –æ—à–∏–±–∫–∏
            duration = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            await self._log_request_error(
                request, e, request_id, correlation_id, duration
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ—à–∏–±–æ–∫
            self.error_count += 1
            
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–∞–ª—å—à–µ
            raise
    
    async def _log_request_start(
        self, 
        request: Request, 
        request_id: str, 
        correlation_id: str
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
        log_data = {
            "event": "request_start",
            "request_id": request_id,
            "correlation_id": correlation_id,
            "method": request.method,
            "url": str(request.url),
            "path": request.url.path,
            "query_params": dict(request.query_params),
            "client_ip": self._get_client_ip(request),
            "user_agent": request.headers.get("user-agent", ""),
            "referer": request.headers.get("referer", ""),
            "content_type": request.headers.get("content-type", ""),
            "content_length": request.headers.get("content-length", "0"),
        }
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if hasattr(request.state, "user_id"):
            log_data.update({
                "user_id": request.state.user_id,
                "wallet_address": getattr(request.state, "wallet_address", ""),
                "user_role": getattr(request.state, "role", "")
            })
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—Å –º–∞—Å–∫–∏—Ä–æ–≤–∫–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        if request.url.path not in self.exclude_detailed_logging:
            log_data["headers"] = self._mask_sensitive_data(dict(request.headers))
        
        logger.info("Incoming request", **log_data)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if self._is_critical_operation(request):
            await self._log_critical_operation(request, log_data)
    
    async def _log_request_end(
        self,
        request: Request,
        response: Response, 
        request_id: str,
        correlation_id: str,
        duration: float
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        
        log_data = {
            "event": "request_end",
            "request_id": request_id,
            "correlation_id": correlation_id,
            "method": request.method,
            "path": request.url.path,
            "status_code": response.status_code,
            "duration_ms": round(duration * 1000, 2),
            "response_size": len(response.body) if hasattr(response, 'body') else 0,
        }
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if hasattr(request.state, "user_id"):
            log_data["user_id"] = request.state.user_id
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å –∫–æ–¥—É
        if response.status_code >= 500:
            log_level = "error"
        elif response.status_code >= 400:
            log_level = "warning"
        elif duration > 5.0:  # –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            log_level = "warning"
            log_data["slow_request"] = True
        else:
            log_level = "info"
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —É—Ä–æ–≤–Ω–µ–º
        getattr(logger, log_level)("Request completed", **log_data)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if request.url.path.startswith("/api/v1/trading/"):
            await self._log_trading_analytics(request, response, log_data)
    
    async def _log_request_error(
        self,
        request: Request,
        exception: Exception,
        request_id: str,
        correlation_id: str,
        duration: float
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        
        log_data = {
            "event": "request_error",
            "request_id": request_id,
            "correlation_id": correlation_id,
            "method": request.method,
            "path": request.url.path,
            "duration_ms": round(duration * 1000, 2),
            "error_type": type(exception).__name__,
            "error_message": str(exception),
            "traceback": traceback.format_exc(),
        }
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if hasattr(request.state, "user_id"):
            log_data["user_id"] = request.state.user_id
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        if isinstance(exception, (ValueError, TypeError, KeyError)):
            log_data["request_body"] = await self._get_safe_request_body(request)
            log_data["query_params"] = dict(request.query_params)
        
        logger.error("Request failed with exception", **log_data)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        await self._send_error_alert(exception, log_data)
    
    async def _log_critical_operation(self, request: Request, base_log_data: Dict):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        
        operation_type = "unknown"
        
        if request.url.path.startswith("/api/v1/trading/"):
            operation_type = "trading"
        elif "/create" in request.url.path:
            operation_type = "token_creation"
        elif request.url.path.startswith("/api/v1/admin/"):
            operation_type = "admin_action"
        
        log_data = {
            **base_log_data,
            "event": "critical_operation",
            "operation_type": operation_type,
            "requires_audit": True,
        }
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞—É–¥–∏—Ç–∞
        if request.method in ["POST", "PUT", "PATCH"]:
            log_data["request_body"] = await self._get_safe_request_body(request)
        
        logger.warning("Critical operation initiated", **log_data)
    
    async def _log_trading_analytics(
        self, 
        request: Request, 
        response: Response, 
        base_log_data: Dict
    ):
        """–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        
        if response.status_code != 200:
            return
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ response body
            
            analytics_data = {
                **base_log_data,
                "event": "trading_analytics",
                "trading_endpoint": request.url.path.split('/')[-1],
                "success": True,
            }
            
            # –ï—Å–ª–∏ —ç—Ç–æ POST –∑–∞–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            if request.method == "POST":
                request_body = await self._get_safe_request_body(request)
                if request_body and isinstance(request_body, dict):
                    analytics_data.update({
                        "sol_amount": request_body.get("sol_amount"),
                        "token_amount": request_body.get("token_amount"),
                        "slippage_tolerance": request_body.get("slippage_tolerance"),
                    })
            
            logger.info("Trading operation analytics", **analytics_data)
            
        except Exception as e:
            logger.error(f"Failed to log trading analytics: {e}")
    
    def _get_client_ip(self, request: Request) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
        forwarded_for = request.headers.get("x-forwarded-for")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()
        
        real_ip = request.headers.get("x-real-ip")
        if real_ip:
            return real_ip.strip()
        
        return request.client.host if request.client else "unknown"
    
    def _mask_sensitive_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        masked_data = {}
        
        for key, value in data.items():
            key_lower = key.lower()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if any(sensitive in key_lower for sensitive in self.sensitive_fields):
                if isinstance(value, str) and len(value) > 8:
                    masked_data[key] = f"{value[:4]}...{value[-4:]}"
                else:
                    masked_data[key] = "***MASKED***"
            else:
                masked_data[key] = value
        
        return masked_data
    
    async def _get_safe_request_body(self, request: Request) -> Optional[Dict[str, Any]]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            if request.method in ["POST", "PUT", "PATCH"]:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å JSON
                body = await request.json()
                
                # –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if isinstance(body, dict):
                    return self._mask_sensitive_data(body)
                return body
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            pass
        
        return None
    
    def _is_critical_operation(self, request: Request) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π"""
        critical_paths = [
            "/api/v1/trading/",
            "/api/v1/tokens/create",
            "/api/v1/admin/",
            "/api/v1/users/profile"  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        ]
        
        return any(request.url.path.startswith(path) for path in critical_paths)
    
    def _update_metrics(self, duration: float, status_code: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.request_count += 1
        self.total_duration += duration
        
        # –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        if status_code >= 400:
            self.error_count += 1
    
    async def _send_error_alert(self, exception: Exception, log_data: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Ç—Ä–µ–±—É—é—â–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è
        critical_exceptions = [
            "DatabaseException",
            "BlockchainException", 
            "SecurityException",
            "InternalServerError"
        ]
        
        if type(exception).__name__ in critical_exceptions:
            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–ª–µ—Ä—Ç–æ–≤
            # (Slack, PagerDuty, email –∏ —Ç.–¥.)
            logger.critical("Critical error alert", alert=True, **log_data)
    
    def get_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        avg_duration = (
            self.total_duration / self.request_count 
            if self.request_count > 0 
            else 0
        )
        
        error_rate = (
            (self.error_count / self.request_count) * 100 
            if self.request_count > 0 
            else 0
        )
        
        return {
            "total_requests": self.request_count,
            "total_errors": self.error_count,
            "error_rate_percent": round(error_rate, 2),
            "average_duration_ms": round(avg_duration * 1000, 2),
            "total_duration_seconds": round(self.total_duration, 2),
        }
    
    def reset_metrics(self):
        """–°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏)"""
        self.request_count = 0
        self.error_count = 0
        self.total_duration = 0.0
        
        logger.info("Logging metrics reset")


# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ ===

class AuditLogger:
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∞—É–¥–∏—Ç–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self):
        self.audit_logger = structlog.get_logger("audit")
    
    async def log_user_action(
        self,
        user_id: str,
        action: str,
        resource: str,
        details: Dict[str, Any],
        request_id: str
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        audit_data = {
            "event": "user_action",
            "user_id": user_id,
            "action": action,
            "resource": resource,
            "details": details,
            "request_id": request_id,
            "timestamp": datetime.utcnow().isoformat(),
        }
        
        self.audit_logger.info("User action audit", **audit_data)
    
    async def log_admin_action(
        self,
        admin_id: str,
        action: str,
        target: str,
        changes: Dict[str, Any],
        request_id: str
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        
        audit_data = {
            "event": "admin_action",
            "admin_id": admin_id,
            "action": action,
            "target": target,
            "changes": changes,
            "request_id": request_id,
            "timestamp": datetime.utcnow().isoformat(),
            "severity": "high"
        }
        
        self.audit_logger.warning("Admin action audit", **audit_data)
    
    async def log_security_event(
        self,
        event_type: str,
        source_ip: str,
        details: Dict[str, Any],
        severity: str = "medium"
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        
        security_data = {
            "event": "security_event",
            "event_type": event_type,
            "source_ip": source_ip,
            "details": details,
            "severity": severity,
            "timestamp": datetime.utcnow().isoformat(),
        }
        
        log_level = "error" if severity == "high" else "warning"
        getattr(self.audit_logger, log_level)("Security event", **security_data)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞—É–¥–∏—Ç –ª–æ–≥–≥–µ—Ä–∞
audit_logger = AuditLogger()


# === –î–ï–ö–û–†–ê–¢–û–†–´ –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===

def log_function_call(
    logger_name: Optional[str] = None,
    log_args: bool = True,
    log_result: bool = False,
    mask_sensitive: bool = True
):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
    """
    def decorator(func):
        func_logger = structlog.get_logger(logger_name or func.__module__)
        
        async def async_wrapper(*args, **kwargs):
            func_name = func.__name__
            
            log_data = {
                "function": func_name,
                "event": "function_call_start"
            }
            
            if log_args:
                log_data["args"] = args[1:] if args else []  # –ò—Å–∫–ª—é—á–∞–µ–º self
                log_data["kwargs"] = kwargs
            
            func_logger.debug("Function call started", **log_data)
            
            start_time = time.time()
            
            try:
                if asyncio.iscoroutinefunction(func):
                    result = await func(*args, **kwargs)
                else:
                    result = func(*args, **kwargs)
                
                duration = time.time() - start_time
                
                log_data.update({
                    "event": "function_call_end",
                    "duration_ms": round(duration * 1000, 2),
                    "success": True
                })
                
                if log_result and result is not None:
                    log_data["result"] = result
                
                func_logger.debug("Function call completed", **log_data)
                
                return result
                
            except Exception as e:
                duration = time.time() - start_time
                
                log_data.update({
                    "event": "function_call_error",
                    "duration_ms": round(duration * 1000, 2),
                    "error": str(e),
                    "error_type": type(e).__name__
                })
                
                func_logger.error("Function call failed", **log_data)
                raise
        
        def sync_wrapper(*args, **kwargs):
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è wrapper'–∞
            func_logger = structlog.get_logger(logger_name or func.__module__)
            
            log_data = {
                "function": func.__name__,
                "event": "function_call_start"
            }
            
            func_logger.debug("Function call started", **log_data)
            start_time = time.time()
            
            try:
                result = func(*args, **kwargs)
                duration = time.time() - start_time
                
                log_data.update({
                    "event": "function_call_end",
                    "duration_ms": round(duration * 1000, 2),
                    "success": True
                })
                
                func_logger.debug("Function call completed", **log_data)
                return result
                
            except Exception as e:
                duration = time.time() - start_time
                
                log_data.update({
                    "event": "function_call_error", 
                    "duration_ms": round(duration * 1000, 2),
                    "error": str(e)
                })
                
                func_logger.error("Function call failed", **log_data)
                raise
        
        import asyncio
        return async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper
    
    return decorator