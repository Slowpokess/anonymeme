#!/usr/bin/env python3
"""
üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Anonymeme Backend
Production-ready –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
"""

import os
from typing import List, Optional, Union
from pydantic import BaseSettings, validator, Field
from functools import lru_cache


class Settings(BaseSettings):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    –ò—Å–ø–æ–ª—å–∑—É–µ–º Pydantic –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
    """
    
    # === –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
    APP_NAME: str = "Anonymeme API"
    APP_VERSION: str = "1.0.0"
    DEBUG: bool = Field(False, env="DEBUG")
    ENVIRONMENT: str = Field("production", env="ENVIRONMENT")
    
    # === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
    DATABASE_URL: str = Field(
        "postgresql+asyncpg://devuser:devpass@localhost:5432/crypto_pump_anon",
        env="DATABASE_URL"
    )
    
    # === REDIS ===
    REDIS_URL: str = Field(
        "redis://localhost:6379",
        env="REDIS_URL"
    )
    
    # === SOLANA BLOCKCHAIN ===
    SOLANA_RPC_URL: str = Field(
        "https://api.devnet.solana.com",
        env="SOLANA_RPC_URL"
    )
    
    PUMP_CORE_PROGRAM_ID: str = Field(
        "7wUQXRQtBzTmyp9kcrmok9FKcc4RSYXxPYN9FGDLnqxb",
        env="PUMP_CORE_PROGRAM_ID"
    )
    
    # === –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ ===
    SECRET_KEY: str = Field(
        "your-super-secret-key-change-in-production",
        env="SECRET_KEY"
    )
    
    ACCESS_TOKEN_EXPIRE_MINUTES: int = Field(30, env="ACCESS_TOKEN_EXPIRE_MINUTES")
    REFRESH_TOKEN_EXPIRE_DAYS: int = Field(7, env="REFRESH_TOKEN_EXPIRE_DAYS")
    
    # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è CORS
    ALLOWED_ORIGINS: List[str] = Field(
        ["http://localhost:3000", "http://localhost:8000"],
        env="ALLOWED_ORIGINS"
    )
    
    # –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ö–æ—Å—Ç—ã
    ALLOWED_HOSTS: List[str] = Field(
        ["localhost", "127.0.0.1", "0.0.0.0"],
        env="ALLOWED_HOSTS"
    )
    
    # === API RATE LIMITING ===
    RATE_LIMIT_REQUESTS: int = Field(100, env="RATE_LIMIT_REQUESTS")
    RATE_LIMIT_WINDOW: int = Field(3600, env="RATE_LIMIT_WINDOW")  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    # === –¢–û–†–ì–û–í–õ–Ø ===
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ –≤ SOL
    MAX_TRADE_SIZE_SOL: float = Field(10.0, env="MAX_TRADE_SIZE_SOL")
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π slippage (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
    MAX_SLIPPAGE_PERCENT: float = Field(50.0, env="MAX_SLIPPAGE_PERCENT")
    
    # –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
    PLATFORM_FEE_PERCENT: float = Field(1.0, env="PLATFORM_FEE_PERCENT")
    
    # === –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
    LOG_LEVEL: str = Field("INFO", env="LOG_LEVEL")
    SENTRY_DSN: Optional[str] = Field(None, env="SENTRY_DSN")
    
    # === CELERY ===
    CELERY_BROKER_URL: str = Field(
        "redis://localhost:6379/0",
        env="CELERY_BROKER_URL"
    )
    CELERY_RESULT_BACKEND: str = Field(
        "redis://localhost:6379/0",
        env="CELERY_RESULT_BACKEND"
    )
    
    # === WEBSOCKET ===
    WEBSOCKET_PORT: int = Field(8001, env="WEBSOCKET_PORT")
    WEBSOCKET_MAX_CONNECTIONS: int = Field(1000, env="WEBSOCKET_MAX_CONNECTIONS")
    
    # === EMAIL (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π) ===
    SMTP_SERVER: Optional[str] = Field(None, env="SMTP_SERVER")
    SMTP_PORT: int = Field(587, env="SMTP_PORT")
    SMTP_USERNAME: Optional[str] = Field(None, env="SMTP_USERNAME")
    SMTP_PASSWORD: Optional[str] = Field(None, env="SMTP_PASSWORD")
    EMAIL_FROM: str = Field("noreply@anonymeme.com", env="EMAIL_FROM")
    
    # === ANALYTICS ===
    ANALYTICS_RETENTION_DAYS: int = Field(365, env="ANALYTICS_RETENTION_DAYS")
    
    # === –ê–î–ú–ò–ù–ö–ê ===
    ADMIN_EMAILS: List[str] = Field(
        ["admin@anonymeme.com"],
        env="ADMIN_EMAILS"
    )
    
    @validator("ALLOWED_ORIGINS", pre=True)
    def parse_allowed_origins(cls, v: Union[str, List[str]]) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö origins –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å–ø–∏—Å–∫–∞"""
        if isinstance(v, str):
            return [origin.strip() for origin in v.split(",")]
        return v
    
    @validator("ALLOWED_HOSTS", pre=True)
    def parse_allowed_hosts(cls, v: Union[str, List[str]]) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å–ø–∏—Å–∫–∞"""
        if isinstance(v, str):
            return [host.strip() for host in v.split(",")]
        return v
    
    @validator("ADMIN_EMAILS", pre=True)
    def parse_admin_emails(cls, v: Union[str, List[str]]) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ email –∞–¥—Ä–µ—Å–æ–≤ –∞–¥–º–∏–Ω–æ–≤"""
        if isinstance(v, str):
            return [email.strip() for email in v.split(",")]
        return v
    
    @validator("SECRET_KEY")
    def validate_secret_key(cls, v: str) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        if len(v) < 32:
            raise ValueError("SECRET_KEY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤")
        return v
    
    @validator("PUMP_CORE_PROGRAM_ID")
    def validate_program_id(cls, v: str) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è Program ID –¥–ª—è Solana"""
        if len(v) != 44:  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ base58 encoded pubkey
            raise ValueError("PUMP_CORE_PROGRAM_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º Solana pubkey")
        return v
    
    @property
    def is_development(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ development –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
        return self.ENVIRONMENT.lower() in ["development", "dev", "local"]
    
    @property
    def is_production(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ production –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
        return self.ENVIRONMENT.lower() in ["production", "prod"]
    
    @property
    def is_testing(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ testing –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
        return self.ENVIRONMENT.lower() in ["testing", "test"]
    
    @property
    def database_url_sync(self) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π URL –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π)"""
        return self.DATABASE_URL.replace("postgresql+asyncpg://", "postgresql://")
    
    class Config:
        env_file = ".env"
        case_sensitive = True


class DevelopmentSettings(Settings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    DEBUG: bool = True
    ENVIRONMENT: str = "development"
    LOG_LEVEL: str = "DEBUG"
    
    # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    RATE_LIMIT_REQUESTS: int = 1000
    MAX_TRADE_SIZE_SOL: float = 100.0


class ProductionSettings(Settings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
    DEBUG: bool = False
    ENVIRONMENT: str = "production"
    LOG_LEVEL: str = "WARNING"
    
    # –°—Ç—Ä–æ–≥–∏–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    RATE_LIMIT_REQUESTS: int = 60
    MAX_TRADE_SIZE_SOL: float = 10.0
    
    # Production-specific security
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 15
    
    @validator("SECRET_KEY")
    def validate_production_secret_key(cls, v: str) -> str:
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
        if v == "your-super-secret-key-change-in-production":
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å SECRET_KEY –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!")
        return super().validate_secret_key(v)


class TestingSettings(Settings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    DEBUG: bool = True
    ENVIRONMENT: str = "testing"
    LOG_LEVEL: str = "DEBUG"
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    DATABASE_URL: str = "postgresql+asyncpg://test:test@localhost:5432/test_crypto_pump_anon"
    
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    SOLANA_RPC_URL: str = "http://localhost:8899"  # –õ–æ–∫–∞–ª—å–Ω—ã–π validator
    
    # –ë—ã—Å—Ç—Ä—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 5
    RATE_LIMIT_REQUESTS: int = 10000


@lru_cache()
def get_settings() -> Settings:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    environment = os.getenv("ENVIRONMENT", "production").lower()
    
    if environment in ["development", "dev", "local"]:
        return DevelopmentSettings()
    elif environment in ["testing", "test"]:
        return TestingSettings()
    else:
        return ProductionSettings()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = get_settings()


def reload_settings():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)"""
    get_settings.cache_clear()
    global settings
    settings = get_settings()


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SOLANA_LAMPORTS_PER_SOL = 1_000_000_000
SOLANA_DECIMALS = 9

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤—ã—Ö
BONDING_CURVE_TYPES = [
    "Linear",
    "Exponential", 
    "Logarithmic",
    "Sigmoid",
    "ConstantProduct"
]

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ DEX
DEX_TYPES = [
    "Raydium",
    "Jupiter",
    "Orca",
    "Serum",
    "Meteora"
]

# HTTP status codes –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫
ERROR_CODES = {
    "INSUFFICIENT_BALANCE": 4001,
    "SLIPPAGE_EXCEEDED": 4002,
    "TRADING_PAUSED": 4003,
    "INVALID_TOKEN": 4004,
    "RATE_LIMITED": 4005,
    "UNAUTHORIZED_ACCESS": 4006,
    "BLOCKCHAIN_ERROR": 5001,
    "DATABASE_ERROR": 5002,
    "CACHE_ERROR": 5003,
}