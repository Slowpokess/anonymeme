#!/usr/bin/env python3
"""
üöÄ Anonymeme Backend API
Production-ready FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è memecoin –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ Solana

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:
- FastAPI –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
- SQLAlchemy —Å async –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL
- Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–µ—Å—Å–∏–π
- Solana.py –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º
- Pydantic –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
- Structured logging –¥–ª—è production monitoring
"""

import os
import logging
import uvicorn
from datetime import datetime
from contextlib import asynccontextmanager
from typing import Dict, Any

from fastapi import FastAPI, Request, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException

import redis.asyncio as redis
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.orm import declarative_base

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from .routes import tokens, trading, users, analytics, admin
from .services.blockchain import SolanaService
from .services.cache import CacheService
from .models.database import Base
from .middleware.security import SecurityMiddleware
from .middleware.logging import LoggingMiddleware
from .core.config import settings
from .core.exceptions import (
    CustomHTTPException,
    ValidationException,
    BlockchainException,
    DatabaseException
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
engine = None
async_session = None
redis_client = None
solana_service = None
cache_service = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    """
    global engine, async_session, redis_client, solana_service, cache_service
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Anonymeme Backend API...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
        engine = create_async_engine(
            settings.DATABASE_URL,
            echo=settings.DEBUG,
            pool_size=20,
            max_overflow=30,
            pool_pre_ping=True,
            pool_recycle=3600
        )
        
        async_session = async_sessionmaker(
            engine, 
            class_=AsyncSession, 
            expire_on_commit=False
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏)
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
        logger.info("üî¥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...")
        redis_client = redis.from_url(
            settings.REDIS_URL,
            encoding="utf-8",
            decode_responses=True,
            health_check_interval=30,
            socket_keepalive=True,
            socket_keepalive_options={}
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
        await redis_client.ping()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        logger.info("‚õìÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Solana —Å–µ—Ä–≤–∏—Å–∞...")
        solana_service = SolanaService(
            rpc_url=settings.SOLANA_RPC_URL,
            program_id=settings.PUMP_CORE_PROGRAM_ID
        )
        await solana_service.initialize()
        
        cache_service = CacheService(redis_client)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ app.state –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ handlers
        app.state.db_session = async_session
        app.state.redis = redis_client
        app.state.solana = solana_service
        app.state.cache = cache_service
        
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        yield
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise
    
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        
        if redis_client:
            await redis_client.close()
        
        if engine:
            await engine.dispose()
        
        logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Anonymeme API",
    description="""
    üöÄ **Anonymeme Platform API**
    
    Production-ready API –¥–ª—è decentralized memecoin –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ Solana
    
    ## –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    
    * **ü™ô Token Management** - –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏
    * **üí± Trading** - –¢–æ—Ä–≥–æ–≤–ª—è –ø–æ –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤—ã–º
    * **üë§ User Profiles** - –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    * **üìä Analytics** - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    * **üõ°Ô∏è Security** - –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    * **‚ö° Real-time** - WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    ## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
    
    * FastAPI + SQLAlchemy + PostgreSQL
    * Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    * Solana blockchain –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    * Production-ready security
    """,
    version="1.0.0",
    contact={
        "name": "Anonymeme Team",
        "url": "https://anonymeme.com",
        "email": "dev@anonymeme.com",
    },
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT",
    },
    lifespan=lifespan,
    docs_url="/docs" if settings.DEBUG else None,
    redoc_url="/redoc" if settings.DEBUG else None,
)

# Middleware –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=settings.ALLOWED_HOSTS
)

app.add_middleware(SecurityMiddleware)
app.add_middleware(LoggingMiddleware)


# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
async def get_db_session() -> AsyncSession:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with app.state.db_session() as session:
        try:
            yield session
            await session.commit()
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()


async def get_redis() -> redis.Redis:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞"""
    return app.state.redis


async def get_solana_service() -> SolanaService:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Solana —Å–µ—Ä–≤–∏—Å–∞"""
    return app.state.solana


async def get_cache_service() -> CacheService:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Cache —Å–µ—Ä–≤–∏—Å–∞"""
    return app.state.cache


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(CustomHTTPException)
async def custom_http_exception_handler(request: Request, exc: CustomHTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö HTTP –æ—à–∏–±–æ–∫"""
    logger.error(f"Custom HTTP Exception: {exc.detail} - Path: {request.url.path}")
    
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": True,
            "message": exc.detail,
            "error_code": exc.error_code,
            "timestamp": datetime.utcnow().isoformat(),
            "path": str(request.url.path)
        }
    )


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    logger.error(f"Validation Error: {exc.errors()} - Path: {request.url.path}")
    
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={
            "error": True,
            "message": "Validation error",
            "details": exc.errors(),
            "timestamp": datetime.utcnow().isoformat(),
            "path": str(request.url.path)
        }
    )


@app.exception_handler(StarletteHTTPException)
async def http_exception_handler(request: Request, exc: StarletteHTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö HTTP –æ—à–∏–±–æ–∫"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": True,
            "message": exc.detail,
            "timestamp": datetime.utcnow().isoformat(),
            "path": str(request.url.path)
        }
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
    logger.error(f"Unhandled Exception: {str(exc)} - Path: {request.url.path}", exc_info=True)
    
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={
            "error": True,
            "message": "Internal server error" if not settings.DEBUG else str(exc),
            "timestamp": datetime.utcnow().isoformat(),
            "path": str(request.url.path)
        }
    )


# –ë–∞–∑–æ–≤—ã–µ endpoints
@app.get("/", tags=["System"])
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": "üöÄ Anonymeme API v1.0.0",
        "status": "running",
        "timestamp": datetime.utcnow().isoformat(),
        "docs": "/docs",
        "redoc": "/redoc"
    }


@app.get("/health", tags=["System"])
async def health_check(
    db: AsyncSession = Depends(get_db_session),
    redis: redis.Redis = Depends(get_redis),
    solana: SolanaService = Depends(get_solana_service)
):
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    """
    try:
        health_status = {
            "status": "healthy",
            "timestamp": datetime.utcnow().isoformat(),
            "services": {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
        try:
            await db.execute("SELECT 1")
            health_status["services"]["database"] = "healthy"
        except Exception as e:
            health_status["services"]["database"] = f"unhealthy: {str(e)}"
            health_status["status"] = "degraded"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
        try:
            await redis.ping()
            health_status["services"]["redis"] = "healthy"
        except Exception as e:
            health_status["services"]["redis"] = f"unhealthy: {str(e)}"
            health_status["status"] = "degraded"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Solana RPC
        try:
            await solana.get_health()
            health_status["services"]["solana"] = "healthy"
        except Exception as e:
            health_status["services"]["solana"] = f"unhealthy: {str(e)}"
            health_status["status"] = "degraded"
        
        status_code = 200 if health_status["status"] == "healthy" else 503
        return JSONResponse(content=health_status, status_code=status_code)
        
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return JSONResponse(
            content={
                "status": "unhealthy",
                "error": str(e),
                "timestamp": datetime.utcnow().isoformat()
            },
            status_code=503
        )


@app.get("/metrics", tags=["System"])
async def metrics(
    cache: CacheService = Depends(get_cache_service)
):
    """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (Prometheus compatible)"""
    try:
        metrics = await cache.get_metrics()
        return {
            "metrics": metrics,
            "timestamp": datetime.utcnow().isoformat()
        }
    except Exception as e:
        logger.error(f"Metrics collection failed: {e}")
        raise HTTPException(status_code=500, detail="Metrics collection failed")


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(tokens.router, prefix="/api/v1/tokens", tags=["Tokens"])
app.include_router(trading.router, prefix="/api/v1/trading", tags=["Trading"])
app.include_router(users.router, prefix="/api/v1/users", tags=["Users"])
app.include_router(analytics.router, prefix="/api/v1/analytics", tags=["Analytics"])
app.include_router(admin.router, prefix="/api/v1/admin", tags=["Admin"])


if __name__ == "__main__":
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º gunicorn –∏–ª–∏ uvicorn –Ω–∞–ø—Ä—è–º—É—é
    """
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.DEBUG,
        workers=1 if settings.DEBUG else 4,
        log_level="info"
    )