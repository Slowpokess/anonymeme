/*!
üõ°Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã
Production-ready —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
*/

use anchor_lang::prelude::*;
use anchor_spl::token::Mint;
use crate::state::*;
use crate::errors::ErrorCode;

/// –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
#[derive(Accounts)]
pub struct UpdateSecurity<'info> {
    /// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    #[account(
        mut,
        seeds = [PlatformConfig::SEED.as_bytes()],
        bump = platform_config.bump,
        constraint = platform_config.admin == admin.key() @ ErrorCode::AdminOnly
    )]
    pub platform_config: Account<'info, PlatformConfig>,

    /// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    #[account(mut)]
    pub admin: Signer<'info>,
}

/// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
pub fn update_security_params(
    ctx: Context<UpdateSecurity>,
    new_params: SecurityParams,
) -> Result<()> {
    msg!("üõ°Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");

    let clock = Clock::get()?;
    let platform_config = &mut ctx.accounts.platform_config;

    // === –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–û–í–´–• –ü–ê–†–ê–ú–ï–¢–†–û–í ===

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å–¥–µ–ª–∫–∏ (–Ω–µ –±–æ–ª–µ–µ 1000 SOL)
    require!(
        new_params.max_trade_size_sol > 0 && new_params.max_trade_size_sol <= 1000_000_000_000,
        ErrorCode::InvalidSecurityParams
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–æ–≥–∞ –Ω–∞ –∫–∏—Ç–æ–≤ (–Ω–µ –±–æ–ª–µ–µ 50% = 5000 –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤)
    require!(
        new_params.whale_tax_bps <= 5000,
        ErrorCode::InvalidSecurityParams
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ slippage (–Ω–µ –±–æ–ª–µ–µ 50%)
    require!(
        new_params.max_slippage_bps <= 5000,
        ErrorCode::InvalidSecurityParams
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∏—Ç–æ–≤
    require!(
        new_params.whale_threshold_sol > 0 && new_params.whale_threshold_sol <= 100_000_000_000,
        ErrorCode::InvalidSecurityParams
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting (–æ—Ç 1 –¥–æ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
    require!(
        new_params.rate_limit_per_minute >= 1 && new_params.rate_limit_per_minute <= 1000,
        ErrorCode::InvalidSecurityParams
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –ø–µ—Ä–∏–æ–¥–∞ (–º–∞–∫—Å–∏–º—É–º 1 —á–∞—Å)
    require!(
        new_params.cooldown_period_seconds <= 3600,
        ErrorCode::InvalidSecurityParams
    );

    // === –°–û–•–†–ê–ù–ï–ù–ò–ï –°–¢–ê–†–´–• –ü–ê–†–ê–ú–ï–¢–†–û–í –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
    
    let old_params = platform_config.security_params;
    
    // === –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ù–û–í–´–• –ü–ê–†–ê–ú–ï–¢–†–û–í ===
    
    platform_config.security_params = new_params;
    platform_config.last_updated = clock.unix_timestamp;

    // === –°–û–ë–´–¢–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===
    
    emit!(SecurityUpdateEvent {
        admin: ctx.accounts.admin.key(),
        old_max_trade_size: old_params.max_trade_size_sol,
        new_max_trade_size: new_params.max_trade_size_sol,
        old_whale_tax: old_params.whale_tax_bps,
        new_whale_tax: new_params.whale_tax_bps,
        timestamp: clock.unix_timestamp,
    });

    // === –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
    
    msg!("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {}", ctx.accounts.admin.key());
    msg!("   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏: {} -> {} lamports", 
         old_params.max_trade_size_sol, 
         new_params.max_trade_size_sol);
    msg!("   –ù–∞–ª–æ–≥ –Ω–∞ –∫–∏—Ç–æ–≤: {} -> {} –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤", 
         old_params.whale_tax_bps, 
         new_params.whale_tax_bps);
    msg!("   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π slippage: {} -> {} –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤", 
         old_params.max_slippage_bps, 
         new_params.max_slippage_bps);
    msg!("   Rate limiting: {} -> {} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É", 
         old_params.rate_limit_per_minute, 
         new_params.rate_limit_per_minute);

    Ok(())
}

/// –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π
#[derive(Accounts)]
pub struct EmergencyControl<'info> {
    /// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    #[account(
        mut,
        seeds = [PlatformConfig::SEED.as_bytes()],
        bump = platform_config.bump,
        constraint = platform_config.admin == admin.key() @ ErrorCode::AdminOnly
    )]
    pub platform_config: Account<'info, PlatformConfig>,

    /// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    #[account(mut)]
    pub admin: Signer<'info>,
}

/// –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
pub fn emergency_pause_platform(
    ctx: Context<EmergencyControl>,
    pause: bool,
    reason: String,
) -> Result<()> {
    msg!("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π: {}", 
         if pause { "–ü–ê–£–ó–ê" } else { "–í–û–ó–û–ë–ù–û–í–õ–ï–ù–ò–ï" });

    let clock = Clock::get()?;
    let platform_config = &mut ctx.accounts.platform_config;
    let old_state = platform_config.emergency_paused;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏—á–∏–Ω—ã
    require!(
        reason.len() >= 10 && reason.len() <= 500,
        ErrorCode::InvalidInput
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è
    require!(
        old_state != pause,
        ErrorCode::NoStateChange
    );

    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø ===
    
    platform_config.emergency_paused = pause;
    platform_config.last_updated = clock.unix_timestamp;

    // === –°–û–ë–´–¢–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===
    
    emit!(EmergencyActionEvent {
        admin: ctx.accounts.admin.key(),
        action_type: if pause { 
            EmergencyActionType::EmergencyPause 
        } else { 
            EmergencyActionType::EmergencyUnpause 
        },
        target: platform_config.key(),
        reason: reason.clone(),
        timestamp: clock.unix_timestamp,
    });

    // === –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
    
    if pause {
        msg!("üî¥ –ü–õ–ê–¢–§–û–†–ú–ê –ü–†–ò–û–°–¢–ê–ù–û–í–õ–ï–ù–ê");
        msg!("   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {}", ctx.accounts.admin.key());
        msg!("   –ü—Ä–∏—á–∏–Ω–∞: {}", reason);
        msg!("   –í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã");
    } else {
        msg!("üü¢ –ü–õ–ê–¢–§–û–†–ú–ê –í–û–ó–û–ë–ù–û–í–õ–ï–ù–ê");
        msg!("   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {}", ctx.accounts.admin.key());
        msg!("   –ü—Ä–∏—á–∏–Ω–∞: {}", reason);
        msg!("   –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
    }

    Ok(())
}

/// –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ (–Ω–µ –ø–æ–ª–Ω–∞—è –ø–∞—É–∑–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)
pub fn pause_trading_only(
    ctx: Context<EmergencyControl>,
    pause: bool,
    reason: String,
) -> Result<()> {
    msg!("‚è∏Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–µ–π: {}", 
         if pause { "–ü–ê–£–ó–ê" } else { "–í–û–ó–û–ë–ù–û–í–õ–ï–ù–ò–ï" });

    let clock = Clock::get()?;
    let platform_config = &mut ctx.accounts.platform_config;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏—á–∏–Ω—ã
    require!(
        reason.len() >= 5 && reason.len() <= 200,
        ErrorCode::InvalidInput
    );

    platform_config.trading_paused = pause;
    platform_config.last_updated = clock.unix_timestamp;

    emit!(TradingStatusEvent {
        admin: ctx.accounts.admin.key(),
        trading_paused: pause,
        reason: reason.clone(),
        timestamp: clock.unix_timestamp,
    });

    msg!("üîÑ –¢–æ—Ä–≥–æ–≤–ª—è {}: {}", 
         if pause { "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞" } else { "–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞" },
         reason);

    Ok(())
}

#[derive(Accounts)]
pub struct UpdateUserReputation<'info> {
    #[account(
        mut,
        seeds = [UserProfile::SEED_PREFIX.as_bytes(), user.key().as_ref()],
        bump = user_profile.bump
    )]
    pub user_profile: Account<'info, UserProfile>,

    /// CHECK: The user whose reputation is being updated
    pub user: AccountInfo<'info>,

    #[account(
        seeds = [PlatformConfig::SEED.as_bytes()],
        bump = platform_config.bump,
        constraint = platform_config.admin == admin.key() @ ErrorCode::AdminOnly
    )]
    pub platform_config: Account<'info, PlatformConfig>,

    #[account(mut)]
    pub admin: Signer<'info>,
}

/// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
pub fn update_user_reputation(
    ctx: Context<UpdateUserReputation>,
    reputation_delta: i32,
    reason: String,
) -> Result<()> {
    msg!("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");

    let clock = Clock::get()?;
    let user_profile = &mut ctx.accounts.user_profile;
    let old_reputation = user_profile.reputation_score;

    // === –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í ===
    
    require!(
        reason.len() >= 5 && reason.len() <= 200,
        ErrorCode::InvalidInput
    );

    require!(
        reputation_delta.abs() <= 50, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ —Ä–∞–∑
        ErrorCode::InvalidInput
    );

    // === –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –†–ï–ü–£–¢–ê–¶–ò–ò ===

    let new_reputation = if reputation_delta > 0 {
        (user_profile.reputation_score + reputation_delta as f64).min(100.0)
    } else {
        (user_profile.reputation_score + reputation_delta as f64).max(0.0)
    };

    user_profile.reputation_score = new_reputation;
    user_profile.last_reputation_update = clock.unix_timestamp;

    // === –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ë–õ–û–ö–ò–†–û–í–ö–ò ===
    
    if user_profile.reputation_score < 10.0 && !user_profile.banned {
        user_profile.banned = true;
        user_profile.ban_reason = format!("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: —Ä–µ–ø—É—Ç–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è ({})", user_profile.reputation_score);
        user_profile.banned_at = Some(clock.unix_timestamp);
        
        msg!("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–∏");
    } else if user_profile.reputation_score >= 10.0 && user_profile.banned && user_profile.ban_reason.contains("—Ä–µ–ø—É—Ç–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è") {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –µ—Å–ª–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å
        user_profile.banned = false;
        user_profile.ban_reason = String::new();
        user_profile.banned_at = None;
        
        msg!("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: —Ä–µ–ø—É—Ç–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    }

    // === –°–û–ë–´–¢–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –†–ï–ü–£–¢–ê–¶–ò–ò ===
    
    emit!(ReputationUpdatedEvent {
        user: ctx.accounts.user.key(),
        admin: ctx.accounts.admin.key(),
        old_reputation,
        new_reputation,
        delta: reputation_delta,
        reason: reason.clone(),
        auto_banned: user_profile.banned && user_profile.ban_reason.contains("—Ä–µ–ø—É—Ç–∞—Ü–∏—è"),
        timestamp: clock.unix_timestamp,
    });

    msg!("‚úÖ –†–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {} -> {} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {})",
         ctx.accounts.user.key(),
         old_reputation,
         new_reputation,
         reputation_delta);
    msg!("   –ü—Ä–∏—á–∏–Ω–∞: {}", reason);

    Ok(())
}

#[derive(Accounts)]
pub struct ReportActivity<'info> {
    #[account(
        init,
        payer = reporter,
        space = SuspiciousActivityReport::ACCOUNT_SIZE,
        seeds = [
            SuspiciousActivityReport::SEED_PREFIX.as_bytes(),
            reported_user.key().as_ref(),
            reporter.key().as_ref(),
            &Clock::get()?.unix_timestamp.to_le_bytes()
        ],
        bump
    )]
    pub report: Account<'info, SuspiciousActivityReport>,

    /// CHECK: User being reported
    pub reported_user: AccountInfo<'info>,

    #[account(mut)]
    pub reporter: Signer<'info>,

    #[account(
        seeds = [PlatformConfig::SEED.as_bytes()],
        bump = platform_config.bump
    )]
    pub platform_config: Account<'info, PlatformConfig>,

    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}

/// –ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
pub fn report_suspicious_activity(
    ctx: Context<ReportActivity>,
    reported_user: Pubkey,
    reason: ReportReason,
    description: String,
) -> Result<()> {
    msg!("üö® –ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å");

    // === –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í ===
    
    require!(
        description.len() >= 10 && description.len() <= 500, 
        ErrorCode::InvalidInput
    );
    
    require!(
        ctx.accounts.reporter.key() != reported_user, 
        ErrorCode::InvalidAccount
    );

    let clock = Clock::get()?;
    let report = &mut ctx.accounts.report;

    // === –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –û–¢–ß–ï–¢–ê ===
    
    report.reporter = ctx.accounts.reporter.key();
    report.reported_user = reported_user;
    report.reason = reason.clone();
    report.description = description.clone();
    report.evidence_uri = String::new(); // –ú–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
    report.created_at = clock.unix_timestamp;
    report.reviewed = false;
    report.reviewer = Pubkey::default();
    report.action_taken = String::new();
    report.bump = ctx.bumps.report;

    // === –í–´–ß–ò–°–õ–ï–ù–ò–ï –£–†–û–í–ù–Ø –†–ò–°–ö–ê ===
    
    let risk_score = calculate_risk_score(&reason);
    let is_high_risk = risk_score >= 80.0;

    // === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø –í–´–°–û–ö–û–ì–û –†–ò–°–ö–ê ===
    
    if is_high_risk {
        report.auto_flagged = true;
        msg!("‚ö†Ô∏è –í–´–°–û–ö–ò–ô –†–ò–°–ö: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏");
    }

    // === –°–û–ë–´–¢–ò–ï –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò ===
    
    emit!(SuspiciousActivityDetected {
        user: reported_user,
        reporter: ctx.accounts.reporter.key(),
        activity_type: format!("{:?}", reason),
        risk_score,
        auto_flagged: is_high_risk,
        description: description.clone(),
        timestamp: clock.unix_timestamp,
    });

    msg!("‚úÖ –ñ–∞–ª–æ–±–∞ –ø–æ–¥–∞–Ω–∞: {} —Å–æ–æ–±—â–∏–ª –æ {} –ø–æ –ø—Ä–∏—á–∏–Ω–µ {:?}",
         ctx.accounts.reporter.key(),
         reported_user,
         reason);
    msg!("   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {}/100", risk_score);
    msg!("   –û–ø–∏—Å–∞–Ω–∏–µ: {}", description);

    Ok(())
}

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏—á–∏–Ω—ã –∂–∞–ª–æ–±—ã
fn calculate_risk_score(reason: &ReportReason) -> f64 {
    match reason {
        ReportReason::RugPull => 95.0,           // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫
        ReportReason::Scam => 90.0,              // –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫  
        ReportReason::MarketManipulation => 85.0, // –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        ReportReason::Impersonation => 75.0,     // –°—Ä–µ–¥–Ω–µ-–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        ReportReason::FakeMetadata => 70.0,      // –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
        ReportReason::Spam => 40.0,              // –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫
        ReportReason::Other => 50.0,             // –ë–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫
    }
}

#[derive(Accounts)]
pub struct ViewTokenInfo<'info> {
    #[account(
        seeds = [TokenInfo::SEED_PREFIX.as_bytes(), mint.key().as_ref()],
        bump = token_info.bump
    )]
    pub token_info: Account<'info, TokenInfo>,

    pub mint: Account<'info, Mint>,
}

pub fn get_token_price(ctx: Context<ViewTokenInfo>) -> Result<u64> {
    let token_info = &ctx.accounts.token_info;
    Ok(token_info.bonding_curve.current_price)
}

// === –°–û–ë–´–¢–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===

/// –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#[event]
pub struct ReputationUpdatedEvent {
    /// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—å—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞
    pub user: Pubkey,
    /// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    pub admin: Pubkey,
    /// –°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    pub old_reputation: f64,
    /// –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    pub new_reputation: f64,
    /// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    pub delta: i32,
    /// –ü—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    pub reason: String,
    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    pub auto_banned: bool,
    /// –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
    pub timestamp: i64,
}

/// –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
#[event]
pub struct SuspiciousActivityDetected {
    /// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–¥–∞–µ—Ç—Å—è –∂–∞–ª–æ–±–∞
    pub user: Pubkey,
    /// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–¥–∞—é—â–∏–π –∂–∞–ª–æ–±—É
    pub reporter: Pubkey,
    /// –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    pub activity_type: String,
    /// –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (0-100)
    pub risk_score: f64,
    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–µ–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    pub auto_flagged: bool,
    /// –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    pub description: String,
    /// –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
    pub timestamp: i64,
}