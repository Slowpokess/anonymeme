#!/usr/bin/env python3
"""
üì• Pydantic —Å—Ö–µ–º—ã –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ API
Production-ready –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–∏–ø–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

from typing import Optional, List, Dict, Any, Union
from decimal import Decimal
from datetime import datetime
from pydantic import BaseModel, Field, validator, root_validator
from enum import Enum

# –ò–º–ø–æ—Ä—Ç enum'–æ–≤ –∏–∑ –º–æ–¥–µ–ª–µ–π
from ..models.database import CurveType, DexType, TradeType, UserRole


class PaginationRequest(BaseModel):
    """–ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    page: int = Field(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    limit: int = Field(20, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
    sort_by: Optional[str] = Field(None, description="–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
    sort_order: Optional[str] = Field("desc", regex="^(asc|desc)$", description="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")


# === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===

class UserCreateRequest(BaseModel):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    wallet_address: str = Field(..., min_length=44, max_length=44, description="–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ Solana")
    username: Optional[str] = Field(None, min_length=3, max_length=50, description="–ù–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    email: Optional[str] = Field(None, description="Email –∞–¥—Ä–µ—Å")
    
    @validator('wallet_address')
    def validate_wallet_address(cls, v):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
        if not v.isalnum():
            raise ValueError('Wallet address must be alphanumeric')
        return v
    
    @validator('email')
    def validate_email(cls, v):
        """–ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email"""
        if v and '@' not in v:
            raise ValueError('Invalid email format')
        return v


class UserUpdateRequest(BaseModel):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    username: Optional[str] = Field(None, min_length=3, max_length=50)
    email: Optional[str] = Field(None)
    bio: Optional[str] = Field(None, max_length=500)
    website: Optional[str] = Field(None, max_length=255)
    twitter_handle: Optional[str] = Field(None, max_length=50)
    telegram_handle: Optional[str] = Field(None, max_length=50)
    avatar_url: Optional[str] = Field(None, max_length=500)


class UserSearchRequest(BaseModel):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query: Optional[str] = Field(None, min_length=2, description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    role: Optional[UserRole] = Field(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏")
    min_reputation: Optional[float] = Field(None, ge=0, le=100, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è")
    is_verified: Optional[bool] = Field(None, description="–¢–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ")


# === –¢–û–ö–ï–ù–´ ===

class BondingCurveParamsRequest(BaseModel):
    """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π"""
    curve_type: CurveType = Field(..., description="–¢–∏–ø –∫—Ä–∏–≤–æ–π")
    initial_supply: Decimal = Field(..., gt=0, description="–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    initial_price: Decimal = Field(..., gt=0, description="–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ lamports")
    graduation_threshold: Decimal = Field(..., gt=0, description="–ü–æ—Ä–æ–≥ –¥–ª—è –ª–∏—Å—Ç–∏–Ω–≥–∞ –Ω–∞ DEX")
    slope: float = Field(..., description="–ù–∞–∫–ª–æ–Ω –∫—Ä–∏–≤–æ–π")
    volatility_damper: Optional[float] = Field(1.0, ge=0.1, le=2.0, description="–î–µ–º–ø—Ñ–µ—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
    
    @root_validator
    def validate_curve_params(cls, values):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫—Ä–∏–≤–æ–π"""
        curve_type = values.get('curve_type')
        slope = values.get('slope')
        initial_price = values.get('initial_price')
        graduation_threshold = values.get('graduation_threshold')
        
        if curve_type == CurveType.LINEAR:
            if slope <= 0 or slope >= 1000:
                raise ValueError('Linear curve slope must be between 0 and 1000')
        elif curve_type == CurveType.EXPONENTIAL:
            if slope <= 0 or slope >= 0.001:
                raise ValueError('Exponential curve slope must be between 0 and 0.001')
        elif curve_type == CurveType.SIGMOID:
            if slope <= 0 or slope >= 100:
                raise ValueError('Sigmoid curve slope must be between 0 and 100')
        
        if graduation_threshold <= initial_price:
            raise ValueError('Graduation threshold must be greater than initial price')
        
        return values


class TokenCreateRequest(BaseModel):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    name: str = Field(..., min_length=1, max_length=50, description="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
    symbol: str = Field(..., min_length=1, max_length=10, description="–°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞")
    description: Optional[str] = Field(None, max_length=1000, description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
    image_url: Optional[str] = Field(None, max_length=500, description="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    telegram_url: Optional[str] = Field(None, max_length=255, description="–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram")
    twitter_url: Optional[str] = Field(None, max_length=255, description="–°—Å—ã–ª–∫–∞ –Ω–∞ Twitter")
    website_url: Optional[str] = Field(None, max_length=255, description="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π
    bonding_curve_params: BondingCurveParamsRequest = Field(..., description="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π")
    
    # –¢–µ–≥–∏
    tags: Optional[List[str]] = Field([], max_items=10, description="–¢–µ–≥–∏ —Ç–æ–∫–µ–Ω–∞")
    
    @validator('symbol')
    def validate_symbol(cls, v):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ —Ç–æ–∫–µ–Ω–∞"""
        if not v.isalnum():
            raise ValueError('Token symbol must be alphanumeric')
        return v.upper()
    
    @validator('tags')
    def validate_tags(cls, v):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–≥–æ–≤"""
        if v:
            for tag in v:
                if len(tag) > 20:
                    raise ValueError('Tag length must not exceed 20 characters')
        return v


class TokenSearchRequest(BaseModel):
    """–ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–æ–≤"""
    query: Optional[str] = Field(None, min_length=1, description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    curve_type: Optional[CurveType] = Field(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫—Ä–∏–≤–æ–π")
    min_market_cap: Optional[Decimal] = Field(None, ge=0, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è")
    max_market_cap: Optional[Decimal] = Field(None, ge=0, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è")
    is_graduated: Optional[bool] = Field(None, description="–¢–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω—ã –Ω–∞ DEX")
    is_verified: Optional[bool] = Field(None, description="–¢–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ")
    creator_id: Optional[str] = Field(None, description="ID —Å–æ–∑–¥–∞—Ç–µ–ª—è")
    tags: Optional[List[str]] = Field(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º")
    
    @root_validator
    def validate_market_cap_range(cls, values):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏"""
        min_cap = values.get('min_market_cap')
        max_cap = values.get('max_market_cap')
        
        if min_cap and max_cap and min_cap > max_cap:
            raise ValueError('min_market_cap must be less than max_market_cap')
        
        return values


class TokenUpdateRequest(BaseModel):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"""
    description: Optional[str] = Field(None, max_length=1000)
    telegram_url: Optional[str] = Field(None, max_length=255)
    twitter_url: Optional[str] = Field(None, max_length=255)
    website_url: Optional[str] = Field(None, max_length=255)
    tags: Optional[List[str]] = Field(None, max_items=10)


# === –¢–û–†–ì–û–í–õ–Ø ===

class TradeRequest(BaseModel):
    """–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é"""
    token_address: str = Field(..., min_length=44, max_length=44, description="Mint –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞")
    slippage_tolerance: float = Field(..., ge=0.1, le=50.0, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π slippage –≤ %")
    
    @validator('token_address')
    def validate_token_address(cls, v):
        if not v.isalnum():
            raise ValueError('Token address must be alphanumeric')
        return v


class BuyTokensRequest(TradeRequest):
    """–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
    sol_amount: Decimal = Field(..., gt=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
    min_tokens_out: Decimal = Field(..., gt=0, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤")
    
    @validator('sol_amount')
    def validate_sol_amount(cls, v):
        # –ú–∞–∫—Å–∏–º—É–º 100 SOL –∑–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É
        if v > 100:
            raise ValueError('Maximum trade size is 100 SOL')
        return v


class SellTokensRequest(TradeRequest):
    """–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
    token_amount: Decimal = Field(..., gt=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
    min_sol_out: Decimal = Field(..., gt=0, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL")


class TradeHistoryRequest(PaginationRequest):
    """–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤"""
    user_id: Optional[str] = Field(None, description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    token_id: Optional[str] = Field(None, description="ID —Ç–æ–∫–µ–Ω–∞")
    trade_type: Optional[TradeType] = Field(None, description="–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏")
    min_amount: Optional[Decimal] = Field(None, ge=0, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞")
    date_from: Optional[datetime] = Field(None, description="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞")
    date_to: Optional[datetime] = Field(None, description="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
    
    @root_validator
    def validate_date_range(cls, values):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç"""
        date_from = values.get('date_from')
        date_to = values.get('date_to')
        
        if date_from and date_to and date_from > date_to:
            raise ValueError('date_from must be less than date_to')
        
        return values


# === –ê–ù–ê–õ–ò–¢–ò–ö–ê ===

class PriceHistoryRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω"""
    token_address: str = Field(..., min_length=44, max_length=44)
    interval: int = Field(..., description="–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö (1, 5, 15, 60, 240, 1440)")
    date_from: Optional[datetime] = Field(None, description="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞")
    date_to: Optional[datetime] = Field(None, description="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
    limit: int = Field(1000, ge=1, le=5000, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫")
    
    @validator('interval')
    def validate_interval(cls, v):
        allowed_intervals = [1, 5, 15, 60, 240, 1440]
        if v not in allowed_intervals:
            raise ValueError(f'Interval must be one of {allowed_intervals}')
        return v
    
    @root_validator
    def validate_date_range(cls, values):
        date_from = values.get('date_from')
        date_to = values.get('date_to')
        
        if date_from and date_to and date_from > date_to:
            raise ValueError('date_from must be less than date_to')
        
        return values


class MarketStatsRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    period: str = Field("24h", regex="^(1h|24h|7d|30d)$", description="–ü–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    include_graduated: bool = Field(True, description="–í–∫–ª—é—á–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –Ω–∞ DEX")


class TopTokensRequest(PaginationRequest):
    """–ó–∞–ø—Ä–æ—Å —Ç–æ–ø —Ç–æ–∫–µ–Ω–æ–≤"""
    sort_by: str = Field("market_cap", regex="^(market_cap|volume_24h|trade_count|created_at)$")
    period: str = Field("24h", regex="^(24h|7d|30d|all)$", description="–ü–µ—Ä–∏–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞")
    include_graduated: bool = Field(True, description="–í–∫–ª—é—á–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –Ω–∞ DEX")


# === –ê–î–ú–ò–ù ===

class AdminUserUpdateRequest(BaseModel):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    role: Optional[UserRole] = Field(None)
    is_verified: Optional[bool] = Field(None)
    reputation_score: Optional[float] = Field(None, ge=0, le=100)
    ban_reason: Optional[str] = Field(None, max_length=500)
    banned_until: Optional[datetime] = Field(None)


class AdminTokenUpdateRequest(BaseModel):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    is_verified: Optional[bool] = Field(None)
    is_flagged: Optional[bool] = Field(None)
    flag_reason: Optional[str] = Field(None, max_length=500)
    security_score: Optional[float] = Field(None, ge=0, le=100)


class PlatformConfigUpdateRequest(BaseModel):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    trading_paused: Optional[bool] = Field(None, description="–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
    max_trade_size: Optional[Decimal] = Field(None, gt=0, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏")
    platform_fee_percent: Optional[float] = Field(None, ge=0, le=10, description="–ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ %")
    max_slippage_percent: Optional[float] = Field(None, ge=0, le=100, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π slippage –≤ %")


# === WEBSOCKET ===

class WebSocketSubscribeRequest(BaseModel):
    """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ WebSocket —Å–æ–±—ã—Ç–∏—è"""
    event_types: List[str] = Field(..., min_items=1, description="–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π")
    token_addresses: Optional[List[str]] = Field(None, description="–ê–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
    user_id: Optional[str] = Field(None, description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    @validator('event_types')
    def validate_event_types(cls, v):
        allowed_events = [
            'trade', 'token_created', 'token_graduated', 
            'price_update', 'user_update', 'platform_update'
        ]
        for event in v:
            if event not in allowed_events:
                raise ValueError(f'Invalid event type: {event}')
        return v


# === BATCH –û–ü–ï–†–ê–¶–ò–ò ===

class BatchTradeRequest(BaseModel):
    """–ü–∞–∫–µ—Ç–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"""
    trades: List[Union[BuyTokensRequest, SellTokensRequest]] = Field(
        ..., 
        min_items=1, 
        max_items=10,
        description="–°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"
    )
    execute_all_or_none: bool = Field(
        True, 
        description="–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π"
    )


class BatchTokenCreateRequest(BaseModel):
    """–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤"""
    tokens: List[TokenCreateRequest] = Field(
        ..., 
        min_items=1, 
        max_items=5,
        description="–°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è"
    )


# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–•–ï–ú–´ ===

class ReportRequest(BaseModel):
    """–ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ç–æ–∫–µ–Ω"""
    target_type: str = Field(..., regex="^(user|token)$", description="–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∂–∞–ª–æ–±—ã")
    target_id: str = Field(..., description="ID –æ–±—ä–µ–∫—Ç–∞")
    reason: str = Field(..., max_length=50, description="–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã")
    description: str = Field(..., max_length=1000, description="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")


class FeedbackRequest(BaseModel):
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"""
    category: str = Field(..., regex="^(bug|feature|general)$", description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    subject: str = Field(..., min_length=5, max_length=100, description="–¢–µ–º–∞")
    message: str = Field(..., min_length=10, max_length=2000, description="–°–æ–æ–±—â–µ–Ω–∏–µ")
    contact_email: Optional[str] = Field(None, description="Email –¥–ª—è —Å–≤—è–∑–∏")


class HealthCheckRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    detailed: bool = Field(False, description="–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    check_external: bool = Field(False, description="–ü—Ä–æ–≤–µ—Ä—è—Ç—å –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã")