// contracts/pump-core/programs/pump-core/src/state.rs

use anchor_lang::prelude::*;

// üèõÔ∏è –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
#[account]
pub struct PlatformConfig {
    pub admin: Pubkey,                      // –ê–¥–º–∏–Ω –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    pub treasury: Pubkey,                   // –ö–∞–∑–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    pub fee_rate: f64,                      // –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (%)
    pub paused: bool,                       // –ü–∞—É–∑–∞ —Ç–æ—Ä–≥–æ–≤
    pub total_tokens_created: u64,          // –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–æ
    pub total_volume: u64,                  // –û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –≤ SOL
    pub total_fees_collected: u64,          // –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–π
    pub security_params: SecurityParams,    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    pub graduation_fee: u64,                // –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ª–∏—Å—Ç–∏–Ω–≥ –Ω–∞ DEX
    pub min_initial_liquidity: u64,         // –ú–∏–Ω –Ω–∞—á–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
    pub platform_version: u8,              // –í–µ—Ä—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    pub emergency_contacts: [Pubkey; 3],    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    pub trading_locked: bool,                // –§–ª–∞–≥ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç reentrancy
    pub bump: u8,
}

// ü™ô –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ
#[account]
pub struct TokenInfo {
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    pub creator: Pubkey,                    // –°–æ–∑–¥–∞—Ç–µ–ª—å —Ç–æ–∫–µ–Ω–∞
    pub mint: Pubkey,                       // Mint –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
    pub name: String,                       // –ò–º—è —Ç–æ–∫–µ–Ω–∞ (–º–∞–∫—Å 50 —Å–∏–º–≤–æ–ª–æ–≤)
    pub symbol: String,                     // –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ (–º–∞–∫—Å 10 —Å–∏–º–≤–æ–ª–æ–≤)
    pub uri: String,                        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ URI (–º–∞–∫—Å 200 —Å–∏–º–≤–æ–ª–æ–≤)
    pub description: String,                // –û–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å 500 —Å–∏–º–≤–æ–ª–æ–≤)
    
    // –ë–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–∞—è
    pub bonding_curve: BondingCurve,        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π
    pub sol_reserves: u64,                  // –†–µ–∑–µ—Ä–≤—ã SOL –≤ lamports
    pub token_reserves: u64,                // –†–µ–∑–µ—Ä–≤—ã —Ç–æ–∫–µ–Ω–æ–≤
    pub total_supply: u64,                  // –û–±—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    pub initial_supply: u64,                // –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∏–≤–æ–π
    
    // –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    pub current_market_cap: u64,            // –¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
    pub all_time_high_price: u64,          // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
    pub all_time_high_market_cap: u64,      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
    pub graduation_eligible: bool,          // –ú–æ–∂–µ—Ç –ª–∏ –±—ã—Ç—å –ª–∏—Å—Ç–∏–Ω–≥–æ–≤–∞–Ω
    pub graduated: bool,                    // –õ–∏—Å—Ç–∏–Ω–≥–æ–≤–∞–Ω –ª–∏ –Ω–∞ DEX
    pub graduation_timestamp: i64,          // –í—Ä–µ–º—è –ª–∏—Å—Ç–∏–Ω–≥–∞
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    pub created_at: i64,                    // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    pub last_trade_at: i64,                 // –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞
    pub trade_count: u64,                   // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
    pub unique_traders: u32,                // –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
    pub holder_count: u32,                  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π
    pub volume_24h: u64,                    // –û–±—ä–µ–º –∑–∞ 24 —á–∞—Å–∞
    pub trades_24h: u32,                    // –°–¥–µ–ª–∫–∏ –∑–∞ 24 —á–∞—Å–∞
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—è
    pub creator_reputation_at_creation: f64, // –†–µ–ø—É—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    pub security_score: f64,                // –°—á–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (0-100)
    pub community_rating: f64,              // –†–µ–π—Ç–∏–Ω–≥ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (0-5)
    pub verified: bool,                     // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    pub flagged: bool,                      // –ü–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π
    pub rug_pull_risk_score: f64,          // –†–∏—Å–∫ rug pull (0-100)
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
    pub locked_liquidity: bool,             // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
    pub fair_launch: bool,                  // –ß–µ—Å—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫ (–±–µ–∑ –ø—Ä–µ–º–∞–π–Ω–∞)
    pub doxxed_creator: bool,               // –î–µ–∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—å
    pub audited: bool,                      // –ü—Ä–æ—à–µ–ª –∞—É–¥–∏—Ç
    
    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    pub telegram_url: String,               // Telegram –≥—Ä—É–ø–ø–∞ (–º–∞–∫—Å 100 —Å–∏–º–≤–æ–ª–æ–≤)
    pub twitter_url: String,                // Twitter –ø—Ä–æ—Ñ–∏–ª—å (–º–∞–∫—Å 100 —Å–∏–º–≤–æ–ª–æ–≤)
    pub website_url: String,                // –í–µ–±-—Å–∞–π—Ç (–º–∞–∫—Å 100 —Å–∏–º–≤–æ–ª–æ–≤)
    
    pub bump: u8,
}

// üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π
#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct BondingCurve {
    pub curve_type: CurveType,              // –¢–∏–ø –∫—Ä–∏–≤–æ–π
    pub initial_price: u64,                 // –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ lamports –∑–∞ —Ç–æ–∫–µ–Ω
    pub current_price: u64,                 // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
    pub graduation_threshold: u64,          // –ü–æ—Ä–æ–≥ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø—ã –¥–ª—è –ª–∏—Å—Ç–∏–Ω–≥–∞
    pub slope: f64,                         // –ù–∞–∫–ª–æ–Ω –∫—Ä–∏–≤–æ–π
    pub volatility_damper: f64,             // –î–µ–º–ø—Ñ–µ—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (0.1-2.0)
    pub initial_supply: u64,                // –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∏–≤–æ–π
}

// üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö)
#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct BondingCurveParams {
    pub curve_type: CurveType,              // –¢–∏–ø –∫—Ä–∏–≤–æ–π
    pub initial_supply: u64,                // –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    pub initial_price: u64,                 // –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
    pub graduation_threshold: u64,          // –ü–æ—Ä–æ–≥ –¥–ª—è –ª–∏—Å—Ç–∏–Ω–≥–∞
    pub slope: f64,                         // –ù–∞–∫–ª–æ–Ω –∫—Ä–∏–≤–æ–π
    pub volatility_damper: Option<f64>,     // –î–µ–º–ø—Ñ–µ—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
}

// üìä –¢–∏–ø—ã –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤—ã—Ö
#[derive(AnchorSerialize, AnchorDeserialize, Clone, PartialEq, Debug)]
pub enum CurveType {
    Linear,                                 // y = mx + b
    Exponential,                            // y = ae^(bx)
    Logarithmic,                            // y = a + b*ln(x)
    Sigmoid,                                // y = L/(1 + e^(-k(x-x0)))
    ConstantProduct,                        // xy = k (Uniswap style)
}

// üõ°Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct SecurityParams {
    // –¢–æ—Ä–≥–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã
    pub max_trade_size: u64,                // –ú–∞–∫—Å —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ –≤ SOL
    pub max_wallet_percentage: f64,         // –ú–∞–∫—Å % –æ—Ç supply –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    pub daily_volume_limit: u64,            // –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –æ–±—ä–µ–º–∞
    pub hourly_trade_limit: u32,            // –õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ –≤ —á–∞—Å –Ω–∞ –∫–æ—à–µ–ª–µ–∫
    
    // –ù–∞–ª–æ–≥–∏ –∏ –∫–æ–º–∏—Å—Å–∏–∏
    pub whale_tax_threshold: u64,           // –ü–æ—Ä–æ–≥ –¥–ª—è whale tax –≤ SOL
    pub whale_tax_rate: f64,                // –ù–∞–ª–æ–≥ –Ω–∞ –∫—Ä—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (%)
    pub early_sell_tax: f64,                // –ù–∞–ª–æ–≥ –Ω–∞ —Ä–∞–Ω–Ω—é—é –ø—Ä–æ–¥–∞–∂—É (%)
    pub liquidity_tax: f64,                 // –ù–∞–ª–æ–≥ –Ω–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (%)
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    pub min_hold_time: i64,                 // –ú–∏–Ω –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    pub trade_cooldown: i64,                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
    pub creation_cooldown: i64,             // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤
    
    // –ó–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
    pub circuit_breaker_threshold: f64,     // –ü–æ—Ä–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤ (% –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã)
    pub max_price_impact: f64,              // –ú–∞–∫—Å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É (%)
    pub anti_bot_enabled: bool,             // –í–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –±–æ—Ç–æ–≤
    pub honeypot_detection: bool,           // –î–µ—Ç–µ–∫—Ü–∏—è honeypot
    
    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
    pub require_kyc_for_large_trades: bool, // KYC –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    pub min_reputation_to_create: f64,      // –ú–∏–Ω —Ä–µ–ø—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    pub max_tokens_per_creator: u32,        // –ú–∞–∫—Å —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è
}

// üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
#[account]
pub struct UserProfile {
    pub user: Pubkey,                       // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    pub tokens_created: u32,                // –¢–æ–∫–µ–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–æ
    pub successful_launches: u32,           // –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ (–¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏—Å—Ç–∏–Ω–≥–∞)
    pub failed_launches: u32,               // –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
    pub total_tokens_initial_value: u64,    // –û–±—â–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    pub total_tokens_current_value: u64,    // –û–±—â–∞—è —Ç–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
    pub total_volume_traded: u64,           // –û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –≤ SOL
    pub total_trades: u64,                  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
    pub profitable_trades: u64,             // –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    pub total_profit_loss: i64,             // –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –≤ lamports
    pub largest_trade: u64,                 // –ö—Ä—É–ø–Ω–µ–π—à–∞—è —Å–¥–µ–ª–∫–∞
    pub avg_trade_size: u64,                // –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏
    
    // –†–µ–ø—É—Ç–∞—Ü–∏—è –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏
    pub reputation_score: f64,              // –†–µ–ø—É—Ç–∞—Ü–∏—è (0-100)
    pub creator_rating: f64,                // –†–µ–π—Ç–∏–Ω–≥ –∫–∞–∫ —Å–æ–∑–¥–∞—Ç–µ–ª—è (0-5)
    pub trader_rating: f64,                 // –†–µ–π—Ç–∏–Ω–≥ –∫–∞–∫ —Ç—Ä–µ–π–¥–µ—Ä–∞ (0-5)
    pub community_votes_positive: u32,      // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
    pub community_votes_negative: u32,      // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞
    
    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    pub verified: bool,                     // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    pub kyc_completed: bool,                // –ü—Ä–æ—à–µ–ª KYC
    pub banned: bool,                       // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    pub warning_count: u32,                 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    pub ban_reason: String,                 // –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–º–∞–∫—Å 200 —Å–∏–º–≤–æ–ª–æ–≤)
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    pub created_at: i64,                    // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    pub last_activity: i64,                 // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    pub last_token_creation: i64,           // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    pub last_trade_time: i64,               // –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞
    
    // –ê–Ω—Ç–∏-—Å–ø–∞–º
    pub anti_spam_score: u32,               // –ê–Ω—Ç–∏-—Å–ø–∞–º —Å—á–µ—Ç—á–∏–∫
    pub failed_trade_attempts: u32,         // –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
    pub suspicious_activity_flags: u32,     // –§–ª–∞–≥–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    
    // –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    pub referrals_count: u32,               // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    pub referred_by: Pubkey,                // –ö–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω
    pub total_referral_volume: u64,         // –û–±—ä–µ–º –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —É—Ä–æ–≤–Ω–∏
    pub level: u32,                         // –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1-100)
    pub experience_points: u64,             // –û—á–∫–∏ –æ–ø—ã—Ç–∞
    pub achievements: Vec<Achievement>,     // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    
    pub bump: u8,
}

// üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct Achievement {
    pub id: u32,                            // ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    pub unlocked_at: i64,                   // –í—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    pub tier: u8,                           // –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (1-5)
}

// üìã –¢–∏–ø—ã DEX –¥–ª—è –ª–∏—Å—Ç–∏–Ω–≥–∞
#[derive(AnchorSerialize, AnchorDeserialize, Clone, PartialEq, Debug)]
pub enum DexType {
    Raydium,
    Jupiter,
    Orca,
    Serum,
    Meteora,
    Custom { program_id: Pubkey },
}

// üö® –¢–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤ –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
#[derive(AnchorSerialize, AnchorDeserialize, Clone, PartialEq, Debug)]
pub enum ReportReason {
    Spam,
    Scam,
    RugPull,
    MarketManipulation,
    FakeMetadata,
    Impersonation,
    Other,
}

// üìä –û—Ç—á–µ—Ç –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
#[account]
pub struct SuspiciousActivityReport {
    pub reporter: Pubkey,                   // –ö—Ç–æ —Å–æ–æ–±—â–∏–ª
    pub reported_user: Pubkey,              // –ù–∞ –∫–æ–≥–æ –∂–∞–ª–æ–±–∞
    pub reason: ReportReason,               // –ü—Ä–∏—á–∏–Ω–∞
    pub description: String,                // –û–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å 500 —Å–∏–º–≤–æ–ª–æ–≤)
    pub evidence_uri: String,               // –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    pub created_at: i64,                    // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    pub reviewed: bool,                     // –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –ª–∏
    pub reviewer: Pubkey,                   // –ö—Ç–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª
    pub action_taken: String,               // –ü—Ä–∏–Ω—è—Ç—ã–µ –º–µ—Ä—ã
    pub bump: u8,
}

// üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Å—Ç–∏–Ω–≥–µ –Ω–∞ DEX
#[account]
pub struct DexListing {
    pub token_mint: Pubkey,                 // –¢–æ–∫–µ–Ω
    pub dex_type: DexType,                  // –¢–∏–ø DEX
    pub pool_address: Pubkey,               // –ê–¥—Ä–µ—Å –ø—É–ª–∞
    pub initial_liquidity_sol: u64,         // –ù–∞—á–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å SOL
    pub initial_liquidity_token: u64,       // –ù–∞—á–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
    pub listing_timestamp: i64,             // –í—Ä–µ–º—è –ª–∏—Å—Ç–∏–Ω–≥–∞
    pub listing_price: u64,                 // –¶–µ–Ω–∞ –ª–∏—Å—Ç–∏–Ω–≥–∞
    pub fee_tier: u16,                      // –ö–æ–º–∏—Å—Å–∏—è –ø—É–ª–∞ (–≤ –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö)
    pub liquidity_locked: bool,             // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
    pub lock_duration: i64,                 // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    pub creator_lp_tokens: u64,             // LP —Ç–æ–∫–µ–Ω—ã —Å–æ–∑–¥–∞—Ç–µ–ª—è
    pub bump: u8,
}

// üìà –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)
#[account]
pub struct PriceHistory {
    pub token_mint: Pubkey,                 // –¢–æ–∫–µ–Ω
    pub timestamp: i64,                     // –í—Ä–µ–º—è
    pub price: u64,                         // –¶–µ–Ω–∞ –≤ lamports
    pub volume: u64,                        // –û–±—ä–µ–º –∑–∞ –ø–µ—Ä–∏–æ–¥
    pub market_cap: u64,                    // –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
    pub trades_count: u32,                  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
    pub price_change_percent: f64,          // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ %
    pub period: PricePeriod,                // –ü–µ—Ä–∏–æ–¥ (1m, 5m, 1h, 1d)
    pub bump: u8,
}

#[derive(AnchorSerialize, AnchorDeserialize, Clone, PartialEq, Debug)]
pub enum PricePeriod {
    OneMinute,
    FiveMinutes,
    FifteenMinutes,
    OneHour,
    FourHours,
    OneDay,
}

// üéØ –°–æ–±—ã—Ç–∏—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
#[event]
pub struct TokenCreated {
    pub token: Pubkey,
    pub creator: Pubkey,
    pub name: String,
    pub symbol: String,
    pub initial_supply: u64,
    pub initial_price: u64,
    pub curve_type: CurveType,
    pub timestamp: i64,
}

#[event]
pub struct TokenTraded {
    pub token: Pubkey,
    pub trader: Pubkey,
    pub is_buy: bool,
    pub sol_amount: u64,
    pub token_amount: u64,
    pub new_price: u64,
    pub new_market_cap: u64,
    pub price_impact: f64,
    pub timestamp: i64,
}

#[event]
pub struct TokenGraduated {
    pub token: Pubkey,
    pub dex: DexType,
    pub final_market_cap: u64,
    pub total_volume: u64,
    pub graduation_time_hours: u64,
    pub timestamp: i64,
}

#[event]
pub struct SuspiciousActivityDetected {
    pub user: Pubkey,
    pub activity_type: String,
    pub risk_score: f64,
    pub auto_flagged: bool,
    pub timestamp: i64,
}

#[event]
pub struct EmergencyAction {
    pub admin: Pubkey,
    pub action: String,
    pub target: Pubkey,
    pub reason: String,
    pub timestamp: i64,
}

// üîß –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ä–∞–∑–º–µ—Ä—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
impl PlatformConfig {
    pub const SEED: &'static str = "platform_config";
    pub const ACCOUNT_SIZE: usize = 8 + // discriminator
        32 + 32 + // admin + treasury
        8 + 1 + // fee_rate + paused
        8 + 8 + 8 + // counters
        200 + // security_params (estimated)
        8 + 8 + 1 + // graduation_fee + min_initial_liquidity + platform_version
        96 + // emergency_contacts
        1 + // trading_locked
        1; // bump
}

impl TokenInfo {
    pub const SEED_PREFIX: &'static str = "token_info";
    pub const ACCOUNT_SIZE: usize = 8 + // discriminator
        32 + 32 + // creator + mint
        60 + 20 + 250 + 550 + // strings (name, symbol, uri, description)
        200 + // bonding_curve
        8 + 8 + 8 + 8 + // reserves and supply
        8 + 8 + 8 + // market data
        1 + 1 + 8 + // graduation flags
        8 + 8 + 8 + 4 + 4 + 8 + 4 + // timestamps and counts
        8 + 8 + 8 + // reputation scores
        1 + 1 + 1 + 1 + // boolean flags
        110 + 110 + 110 + // social urls
        1; // bump

    pub const MAX_NAME_LEN: usize = 50;
    pub const MAX_SYMBOL_LEN: usize = 10;
    pub const MAX_URI_LEN: usize = 200;
    pub const MAX_DESCRIPTION_LEN: usize = 500;
    pub const MAX_URL_LEN: usize = 100;
}

impl UserProfile {
    pub const SEED_PREFIX: &'static str = "user_profile";
    pub const ACCOUNT_SIZE: usize = 8 + // discriminator
        32 + // user
        4 + 4 + 4 + 8 + 8 + // token creation stats
        8 + 8 + 8 + 8 + 8 + 8 + // trading stats
        8 + 8 + 8 + 4 + 4 + // reputation
        1 + 1 + 1 + 4 + 210 + // verification and bans
        8 + 8 + 8 + 8 + // timestamps
        4 + 4 + 4 + // anti-spam
        4 + 32 + 8 + // referrals
        4 + 8 + 400 + // achievements (estimated)
        1; // bump
}

impl SuspiciousActivityReport {
    pub const SEED_PREFIX: &'static str = "report";
    pub const ACCOUNT_SIZE: usize = 8 + 32 + 32 + 1 + 510 + 210 + 8 + 1 + 32 + 210 + 1;
}

impl DexListing {
    pub const SEED_PREFIX: &'static str = "dex_listing";
    pub const ACCOUNT_SIZE: usize = 8 + 32 + 50 + 32 + 8 + 8 + 8 + 8 + 2 + 1 + 8 + 8 + 1;
}

impl PriceHistory {
    pub const SEED_PREFIX: &'static str = "price_history";
    pub const ACCOUNT_SIZE: usize = 8 + 32 + 8 + 8 + 8 + 8 + 4 + 8 + 1 + 1;
}