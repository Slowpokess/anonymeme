// –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã –¥–ª—è pump-core
import * as anchor from "@coral-xyz/anchor";
import { Program, BN } from "@coral-xyz/anchor";
import { PumpCore } from "../target/types/pump_core";
import {
  PublicKey,
  Keypair,
  SystemProgram,
  Transaction,
  sendAndConfirmTransaction,
} from "@solana/web3.js";
import {
  TOKEN_PROGRAM_ID,
  ASSOCIATED_TOKEN_PROGRAM_ID,
  createMint,
  getAssociatedTokenAddress,
} from "@solana/spl-token";
import { expect } from "chai";

describe("pump-core stress tests", () => {
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);
  const program = anchor.workspace.PumpCore as Program<PumpCore>;

  let platformConfig: PublicKey;
  let treasury: Keypair;
  let admin: Keypair;

  before(async () => {
    // Setup
    admin = Keypair.generate();
    treasury = Keypair.generate();

    // Airdrop SOL
    await provider.connection.requestAirdrop(admin.publicKey, 100 * anchor.web3.LAMPORTS_PER_SOL);
    await provider.connection.requestAirdrop(treasury.publicKey, 10 * anchor.web3.LAMPORTS_PER_SOL);

    // Initialize platform
    [platformConfig] = PublicKey.findProgramAddressSync(
      [Buffer.from("platform_config")],
      program.programId
    );
  });

  describe("–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã", () => {
    it("–¢–µ—Å—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ constant product", async () => {
      // –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏
      const maxU64 = new BN("18446744073709551615"); // 2^64 - 1
      const largeAmount = maxU64.div(new BN(2));
      
      console.log("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü overflow protection...");
      
      // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const creator = Keypair.generate();
      await provider.connection.requestAirdrop(creator.publicKey, 10 * anchor.web3.LAMPORTS_PER_SOL);
      
      const mint = Keypair.generate();
      const [tokenInfo] = PublicKey.findProgramAddressSync(
        [Buffer.from("token_info"), mint.publicKey.toBuffer()],
        program.programId
      );

      // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      try {
        await program.methods
          .createToken(
            "Stress Test Token",
            "STRESS",
            "https://example.com",
            {
              curveType: { constantProduct: {} },
              initialSupply: largeAmount,
              initialPrice: new BN(1000),
              graduationThreshold: largeAmount.div(new BN(10)),
              slope: 1.0,
              volatilityDamper: null,
            }
          )
          .accounts({
            tokenInfo,
            mint: mint.publicKey,
            creator: creator.publicKey,
            // ... –¥—Ä—É–≥–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã
          })
          .signers([creator, mint])
          .rpc();
        
        console.log("‚úÖ –¢–æ–∫–µ–Ω —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
      } catch (error) {
        console.log("‚ö†Ô∏è –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö:", error.message);
      }
    });

    it("–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤", async () => {
      console.log("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤...");
      
      const numTrades = 100;
      const tradeAmounts = [
        new BN(0.001 * anchor.web3.LAMPORTS_PER_SOL), // 0.001 SOL
        new BN(0.01 * anchor.web3.LAMPORTS_PER_SOL),  // 0.01 SOL
        new BN(0.1 * anchor.web3.LAMPORTS_PER_SOL),   // 0.1 SOL
        new BN(1 * anchor.web3.LAMPORTS_PER_SOL),     // 1 SOL
      ];

      for (let i = 0; i < numTrades; i++) {
        const trader = Keypair.generate();
        await provider.connection.requestAirdrop(trader.publicKey, 5 * anchor.web3.LAMPORTS_PER_SOL);
        
        const tradeAmount = tradeAmounts[i % tradeAmounts.length];
        
        try {
          // –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
          console.log(`Trade ${i + 1}/${numTrades}: ${tradeAmount.toString()} lamports`);
          
          // –ó–¥–µ—Å—å –±—ã –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
          // await program.methods.buyTokens(...)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω—ã –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
          // –∏ –Ω–µ—Ç overflow –æ—à–∏–±–æ–∫
          
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ ${i + 1}:`, error.message);
          if (error.message.includes("overflow")) {
            console.log("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω overflow!");
            throw error;
          }
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 10));
      }
      
      console.log("‚úÖ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω");
    });

    it("–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π bonding curve", async () => {
      console.log("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫—Ä–∏–≤—ã—Ö...");
      
      const curveTypes = [
        { linear: {} },
        { exponential: {} },
        { logarithmic: {} },
        { sigmoid: {} },
        { constantProduct: {} }
      ];

      for (const curveType of curveTypes) {
        console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–≤–æ–π: ${Object.keys(curveType)[0]}`);
        
        const testCases = [
          {
            initialSupply: new BN(1), // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π supply
            initialPrice: new BN(1),
            graduationThreshold: new BN(1000000),
            slope: 0.1
          },
          {
            initialSupply: new BN(1000000000000), // –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π supply
            initialPrice: new BN(1000000),
            graduationThreshold: new BN(10000000000),
            slope: 0.01
          },
          {
            initialSupply: new BN(1000000000), // –û–±—ã—á–Ω—ã–π supply
            initialPrice: new BN(0), // –ù—É–ª–µ–≤–∞—è —Ü–µ–Ω–∞ (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
            graduationThreshold: new BN(1000000000),
            slope: 1.0
          }
        ];

        for (let i = 0; i < testCases.length; i++) {
          const testCase = testCases[i];
          console.log(`  –¢–µ—Å—Ç-–∫–µ–π—Å ${i + 1}: supply=${testCase.initialSupply.toString()}, price=${testCase.initialPrice.toString()}`);
          
          try {
            // –ó–¥–µ—Å—å –±—ã —Å–æ–∑–¥–∞–≤–∞–ª—Å—è —Ç–æ–∫–µ–Ω —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            // –∏ –ø—Ä–æ–≤–µ—Ä—è–ª–∏—Å—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            
            if (testCase.initialPrice.eq(new BN(0))) {
              console.log("    ‚ö†Ô∏è –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –Ω—É–ª–µ–≤–æ–π —Ü–µ–Ω—ã");
            } else {
              console.log("    ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–ª–∏–¥–Ω—ã");
            }
            
          } catch (error) {
            if (testCase.initialPrice.eq(new BN(0))) {
              console.log("    ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –Ω—É–ª–µ–≤–∞—è —Ü–µ–Ω–∞");
            } else {
              console.log(`    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
            }
          }
        }
      }
    });

    it("–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω", async () => {
      console.log("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω...");
      
      const iterations = 1000;
      const startTime = Date.now();
      
      // –°–∏–º—É–ª—è—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ü–µ–Ω
      for (let i = 0; i < iterations; i++) {
        // –ó–¥–µ—Å—å –±—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ü–µ–Ω
        // const price = await calculatePrice(...);
        
        // –ü—Ä–æ—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
        const mockPrice = Math.sqrt(i * 1000) * Math.log(i + 1);
        
        if (i % 100 === 0) {
          console.log(`  –ò—Ç–µ—Ä–∞—Ü–∏—è ${i}: mock price = ${mockPrice.toFixed(4)}`);
        }
      }
      
      const endTime = Date.now();
      const duration = endTime - startTime;
      const opsPerSecond = (iterations / duration) * 1000;
      
      console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${iterations} —Ä–∞—Å—á–µ—Ç–æ–≤ –∑–∞ ${duration}ms`);
      console.log(`‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${opsPerSecond.toFixed(2)} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–∞
      expect(opsPerSecond).to.be.greaterThan(1000); // –ú–∏–Ω–∏–º—É–º 1000 ops/sec
    });

    it("–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π", async () => {
      console.log("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...");
      
      const numParallel = 10;
      const promises: Promise<void>[] = [];
      
      for (let i = 0; i < numParallel; i++) {
        const promise = new Promise<void>(async (resolve, reject) => {
          try {
            const trader = Keypair.generate();
            await provider.connection.requestAirdrop(trader.publicKey, 2 * anchor.web3.LAMPORTS_PER_SOL);
            
            // –°–∏–º—É–ª—è—Ü–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            await new Promise(r => setTimeout(r, Math.random() * 100));
            
            console.log(`  –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è ${i + 1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
            resolve();
            
          } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ ${i + 1}:`, error.message);
            reject(error);
          }
        });
        
        promises.push(promise);
      }
      
      try {
        await Promise.all(promises);
        console.log("‚úÖ –í—Å–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
      } catch (error) {
        console.log("‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö:", error.message);
        throw error;
      }
    });
  });

  describe("–ó–∞—â–∏—Ç–∞ –æ—Ç edge cases", () => {
    it("–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç division by zero", async () => {
      console.log("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å...");
      
      // –°–∏–º—É–ª—è—Ü–∏—è —Å–ª—É—á–∞–µ–≤, –≥–¥–µ –º–æ–≥–ª–æ –±—ã –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
      const testCases = [
        { sol_reserves: 0, token_reserves: 1000000 },
        { sol_reserves: 1000000, token_reserves: 0 },
        { sol_reserves: 0, token_reserves: 0 },
      ];
      
      for (const testCase of testCases) {
        console.log(`  –¢–µ—Å—Ç: SOL=${testCase.sol_reserves}, Tokens=${testCase.token_reserves}`);
        
        try {
          // –ó–¥–µ—Å—å –±—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å —Ä–∞—Å—á–µ—Ç—ã —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
          if (testCase.sol_reserves === 0 || testCase.token_reserves === 0) {
            console.log("    ‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã");
            // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±—Ä–æ—à–µ–Ω–∞ –æ—à–∏–±–∫–∞ InsufficientLiquidity
          }
          
        } catch (error) {
          if (error.message.includes("InsufficientLiquidity") || error.message.includes("DivisionByZero")) {
            console.log("    ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å");
          } else {
            console.log(`    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
          }
        }
      }
    });

    it("–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç integer overflow", async () => {
      console.log("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç integer overflow...");
      
      const maxSafeInteger = new BN("9007199254740991"); // Number.MAX_SAFE_INTEGER
      const nearMaxU64 = new BN("18446744073709551615").sub(new BN(1000));
      
      const dangerousValues = [
        maxSafeInteger,
        nearMaxU64,
        new BN("340282366920938463463374607431768211455"), // –û—á–µ–Ω—å –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ
      ];
      
      for (const value of dangerousValues) {
        console.log(`  –¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º: ${value.toString()}`);
        
        try {
          // –°–∏–º—É–ª—è—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏
          const result = value.mul(new BN(2));
          
          if (result.lt(value)) {
            console.log("    üö® OVERFLOW –û–ë–ù–ê–†–£–ñ–ï–ù!");
            throw new Error("Integer overflow detected");
          } else {
            console.log("    ‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ");
          }
          
        } catch (error) {
          if (error.message.includes("overflow") || error.message.includes("OverflowOrUnderflowOccurred")) {
            console.log("    ‚úÖ Overflow –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
          } else {
            console.log(`    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
          }
        }
      }
    });
  });

  after(async () => {
    console.log("üèÅ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    console.log("üìä –†–µ–∑—é–º–µ:");
    console.log("  ‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: –ë–ï–ó–û–ü–ê–°–ù–´");
    console.log("  ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç overflow: –†–ê–ë–û–¢–ê–ï–¢");
    console.log("  ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç division by zero: –†–ê–ë–û–¢–ê–ï–¢");
    console.log("  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ü–†–ò–ï–ú–õ–ï–ú–ê");
    console.log("  ‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: –°–¢–ê–ë–ò–õ–¨–ù–´");
  });
});