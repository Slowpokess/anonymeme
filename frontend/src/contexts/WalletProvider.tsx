/**
 * üí∞ Wallet Provider –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Solana –∫–æ—à–µ–ª—å–∫–∞–º–∏
 * Production-ready –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Phantom, Solflare –∏ –¥—Ä—É–≥–∏—Ö
 */

'use client'

import React, { FC, ReactNode, useMemo, useCallback } from 'react'
import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react'
import { WalletAdapterNetwork } from '@solana/wallet-adapter-base'
import { WalletModalProvider } from '@solana/wallet-adapter-react-ui'
import {
  PhantomWalletAdapter,
  SolflareWalletAdapter,
  TorusWalletAdapter,
  LedgerWalletAdapter,
  MathWalletAdapter,
  Coin98WalletAdapter,
  TrustWalletAdapter,
} from '@solana/wallet-adapter-wallets'
import { clusterApiUrl } from '@solana/web3.js'
import toast from 'react-hot-toast'

// –ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤
require('@solana/wallet-adapter-react-ui/styles.css')

interface WalletContextProviderProps {
  children: ReactNode
}

export const WalletContextProvider: FC<WalletContextProviderProps> = ({ children }) => {
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const network = useMemo(() => {
    const networkEnv = process.env.NEXT_PUBLIC_SOLANA_NETWORK as string
    
    switch (networkEnv) {
      case 'mainnet-beta':
        return WalletAdapterNetwork.Mainnet
      case 'testnet':
        return WalletAdapterNetwork.Testnet
      case 'devnet':
      default:
        return WalletAdapterNetwork.Devnet
    }
  }, [])

  // RPC endpoint
  const endpoint = useMemo(() => {
    const customRPC = process.env.NEXT_PUBLIC_SOLANA_RPC_URL
    return customRPC || clusterApiUrl(network)
  }, [network])

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
  const wallets = useMemo(
    () => [
      // Phantom - —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
      new PhantomWalletAdapter(),
      
      // Solflare - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ Solana
      new SolflareWalletAdapter({ network }),
      
      // Torus - web-based –∫–æ—à–µ–ª–µ–∫
      new TorusWalletAdapter(),
      
      // Ledger - –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
      new LedgerWalletAdapter(),
      
      // –î—Ä—É–≥–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
      new MathWalletAdapter(),
      new Coin98WalletAdapter(),
      new TrustWalletAdapter(),
    ],
    [network]
  )

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
  const onError = useCallback((error: any) => {
    console.error('Wallet error:', error)
    
    // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    let message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –∫–æ—à–µ–ª—å–∫–æ–º'
    
    if (error?.message) {
      if (error.message.includes('User rejected')) {
        message = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
      } else if (error.message.includes('not found')) {
        message = '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ'
      } else if (error.message.includes('already pending')) {
        message = '–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏'
      } else if (error.message.includes('Wallet not ready')) {
        message = '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
      } else {
        message = error.message
      }
    }
    
    toast.error(message)
  }, [])

  // Autoconnect —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–∞–ª—Å—è
  const autoConnect = useMemo(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('wallet-auto-connect') === 'true'
    }
    return false
  }, [])

  return (
    <ConnectionProvider 
      endpoint={endpoint}
      config={{
        commitment: 'confirmed',
        confirmTransactionInitialTimeout: 60000,
      }}
    >
      <WalletProvider 
        wallets={wallets} 
        onError={onError}
        autoConnect={autoConnect}
      >
        <WalletModalProvider>
          {children}
        </WalletModalProvider>
      </WalletProvider>
    </ConnectionProvider>
  )
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏
export const getWalletIcon = (walletName: string): string => {
  const icons: Record<string, string> = {
    'Phantom': 'üëª',
    'Solflare': 'üî•',
    'Torus': 'üåÄ',
    'Ledger': 'üîí',
    'Sollet': 'üíº',
    'MathWallet': 'üìä',
    'Coin98': 'ü™ô',
    'Slope': 'üìà',
    'Trust Wallet': 'üõ°Ô∏è',
  }
  
  return icons[walletName] || 'üí∞'
}

export const getWalletDisplayName = (walletName: string): string => {
  const displayNames: Record<string, string> = {
    'Phantom': 'Phantom',
    'Solflare': 'Solflare',
    'Torus': 'Torus',
    'Ledger': 'Ledger',
    'Sollet': 'Sollet',
    'Sollet Extension': 'Sollet (Extension)',
    'MathWallet': 'Math Wallet',
    'Coin98': 'Coin98',
    'Slope': 'Slope',
    'Trust Wallet': 'Trust Wallet',
  }
  
  return displayNames[walletName] || walletName
}

export const saveAutoConnectPreference = (shouldAutoConnect: boolean) => {
  if (typeof window !== 'undefined') {
    localStorage.setItem('wallet-auto-connect', shouldAutoConnect.toString())
  }
}

export default WalletContextProvider