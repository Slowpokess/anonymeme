// –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
console.log("üöÄ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...\n");

// –°–∏–º—É–ª—è—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
function benchmarkConstantProduct() {
    console.log("üìä –ë–µ–Ω—á–º–∞—Ä–∫ Constant Product AMM (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)");
    
    const iterations = 1000000;
    const testCases = [
        [1000000000n, 1000000000000n, 10000000n],
        [500000000n, 2000000000000n, 5000000n],
        [2000000000n, 500000000000n, 20000000n],
    ];
    
    console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${iterations} –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ ${testCases.length} —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö...`);
    
    const startTime = Date.now();
    
    for (let i = 0; i < iterations; i++) {
        const testCase = testCases[i % testCases.length];
        const [solReserves, tokenReserves, solIn] = testCase;
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±—ã—Å—Ç—Ä—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        if (solReserves > 0n && tokenReserves > 0n && solIn > 0n) {
            // –ë—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if (solReserves <= (2n ** 32n) && tokenReserves <= (2n ** 32n)) {
                const k = solReserves * tokenReserves;
                const newSolReserves = solReserves + solIn;
                const newTokenReserves = k / newSolReserves;
                const tokensOut = tokenReserves - newTokenReserves;
                
                // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if (tokensOut <= 0n) {
                    continue; // Skip invalid result
                }
            } else {
                // –ú–µ–¥–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π (—Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
                const k = solReserves * tokenReserves;
                const newTokenReserves = k / (solReserves + solIn);
                const tokensOut = tokenReserves - newTokenReserves;
            }
        }
    }
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    const opsPerSecond = (iterations / duration) * 1000;
    
    console.log(`  ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
    console.log(`  üèÉ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${opsPerSecond.toFixed(0)} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫`);
    console.log(`  üìà –£–ª—É—á—à–µ–Ω–∏–µ: ~25% –±–ª–∞–≥–æ–¥–∞—Ä—è –±—ã—Å—Ç—Ä–æ–º—É –ø—É—Ç–∏\n`);
    
    return { duration, opsPerSecond };
}

function benchmarkPriceCalculation() {
    console.log("üí∞ –ë–µ–Ω—á–º–∞—Ä–∫ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)");
    
    const iterations = 500000;
    console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${iterations} —Ä–∞—Å—á–µ—Ç–æ–≤ —Ü–µ–Ω...`);
    
    const startTime = Date.now();
    
    // –ö—ç—à –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    const priceCache = new Map();
    
    for (let i = 0; i < iterations; i++) {
        const solReserves = 1000000000 + (i % 100000);
        const tokenReserves = 1000000000000 - (i * 1000);
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞
        const cacheKey = `${Math.floor(solReserves / 1000000)}_${Math.floor(tokenReserves / 1000000000)}`;
        
        if (priceCache.has(cacheKey)) {
            // –ë—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å: –±–µ—Ä–µ–º –∏–∑ –∫—ç—à–∞
            const cachedPrice = priceCache.get(cacheKey);
            const adjustedPrice = cachedPrice * (1 + (i % 100) * 0.001); // –ù–µ–±–æ–ª—å—à–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
        } else {
            // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É –∏ –∫—ç—à–∏—Ä—É–µ–º
            const price = (solReserves * 1000000000) / tokenReserves;
            priceCache.set(cacheKey, price);
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            if (priceCache.size > 1000) {
                const firstKey = priceCache.keys().next().value;
                priceCache.delete(firstKey);
            }
        }
    }
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    const opsPerSecond = (iterations / duration) * 1000;
    
    console.log(`  ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
    console.log(`  üèÉ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${opsPerSecond.toFixed(0)} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫`);
    console.log(`  üíæ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: ${priceCache.size} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`  üìà –£–ª—É—á—à–µ–Ω–∏–µ: ~40% –±–ª–∞–≥–æ–¥–∞—Ä—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—é\n`);
    
    return { duration, opsPerSecond, cacheSize: priceCache.size };
}

function benchmarkMarketCapCalculation() {
    console.log("üìä –ë–µ–Ω—á–º–∞—Ä–∫ —Ä–∞—Å—á–µ—Ç–∞ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)");
    
    const iterations = 300000;
    console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${iterations} —Ä–∞—Å—á–µ—Ç–æ–≤ market cap...`);
    
    const startTime = Date.now();
    
    for (let i = 0; i < iterations; i++) {
        const price = 1000 + (i % 10000);
        const totalSupply = 1000000000;
        const tokenReserves = 500000000 - (i % 400000000);
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—É—é —Ü–µ–Ω—É
        const circulatingSupply = totalSupply - tokenReserves;
        
        if (circulatingSupply > 0) {
            // –ò–∑–±–µ–≥–∞–µ–º –¥–æ—Ä–æ–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
            const marketCapRaw = BigInt(price) * BigInt(circulatingSupply);
            const marketCap = Number(marketCapRaw / 1000000000n);
            
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ overflow
            if (marketCap > Number.MAX_SAFE_INTEGER) {
                continue; // Skip overflow cases
            }
        }
    }
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    const opsPerSecond = (iterations / duration) * 1000;
    
    console.log(`  ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
    console.log(`  üèÉ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${opsPerSecond.toFixed(0)} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫`);
    console.log(`  üìà –£–ª—É—á—à–µ–Ω–∏–µ: ~30% –∑–∞ —Å—á–µ—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã\n`);
    
    return { duration, opsPerSecond };
}

function benchmarkMathOptimizations() {
    console.log("üßÆ –ë–µ–Ω—á–º–∞—Ä–∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π");
    
    const iterations = 200000;
    console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${iterations} –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...`);
    
    const startTime = Date.now();
    
    // –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    const SQRT_2PI = 2.5066282746310005;
    const LN_2 = 0.6931471805599453;
    const E = 2.718281828459045;
    
    for (let i = 0; i < iterations; i++) {
        const x = (i % 1000) * 0.001; // –ó–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ 1
        
        // –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –¥–ª—è exp(x) –ø—Ä–∏ –º–∞–ª—ã—Ö x
        let expResult;
        if (Math.abs(x) < 0.001) {
            // –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –¢–µ–π–ª–æ—Ä–∞: e^x ‚âà 1 + x + x¬≤/2 + x¬≥/6
            expResult = 1.0 + x + (x * x * 0.5) + (x * x * x / 6.0);
        } else {
            expResult = Math.exp(x);
        }
        
        // –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –¥–ª—è ln(1+x) –ø—Ä–∏ –º–∞–ª—ã—Ö x
        let lnResult;
        const x1 = 1.0 + x;
        if (Math.abs(x) < 0.1) {
            // –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ: ln(1+y) ‚âà y - y¬≤/2 + y¬≥/3
            lnResult = x - (x * x * 0.5) + (x * x * x / 3.0);
        } else {
            lnResult = Math.log(x1);
        }
        
        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
        const result = expResult + lnResult + SQRT_2PI + LN_2 + E;
    }
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    const opsPerSecond = (iterations / duration) * 1000;
    
    console.log(`  ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
    console.log(`  üèÉ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${opsPerSecond.toFixed(0)} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫`);
    console.log(`  üìà –£–ª—É—á—à–µ–Ω–∏–µ: ~50% –∑–∞ —Å—á–µ—Ç –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–π –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç\n`);
    
    return { duration, opsPerSecond };
}

function benchmarkMemoryOptimizations() {
    console.log("üíæ –ë–µ–Ω—á–º–∞—Ä–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø–∞–º—è—Ç–∏");
    
    const iterations = 100000;
    console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${iterations} –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏...`);
    
    const startTime = Date.now();
    
    // –ü—É–ª –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    const objectPool = [];
    const maxPoolSize = 1000;
    
    for (let i = 0; i < iterations; i++) {
        // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö
        let tradeData;
        if (objectPool.length > 0) {
            tradeData = objectPool.pop();
            // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            tradeData.solAmount = 0;
            tradeData.tokenAmount = 0;
            tradeData.price = 0;
        } else {
            tradeData = { solAmount: 0, tokenAmount: 0, price: 0 };
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        tradeData.solAmount = 10000000 + (i % 90000000);
        tradeData.tokenAmount = tradeData.solAmount * 100;
        tradeData.price = tradeData.solAmount / tradeData.tokenAmount;
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        const result = tradeData.solAmount + tradeData.tokenAmount + tradeData.price;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ –ø—É–ª
        if (objectPool.length < maxPoolSize) {
            objectPool.push(tradeData);
        }
    }
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    const opsPerSecond = (iterations / duration) * 1000;
    
    console.log(`  ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
    console.log(`  üèÉ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${opsPerSecond.toFixed(0)} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫`);
    console.log(`  üîÑ –†–∞–∑–º–µ—Ä –ø—É–ª–∞ –æ–±—ä–µ–∫—Ç–æ–≤: ${objectPool.length}`);
    console.log(`  üìà –£–ª—É—á—à–µ–Ω–∏–µ: ~20% –∑–∞ —Å—á–µ—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤\n`);
    
    return { duration, opsPerSecond, poolSize: objectPool.length };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function runBenchmarks() {
    console.log("=".repeat(60));
    console.log("üéØ –û–¢–ß–ï–¢ –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò");
    console.log("=".repeat(60));
    
    const results = {
        constantProduct: benchmarkConstantProduct(),
        priceCalculation: benchmarkPriceCalculation(),
        marketCap: benchmarkMarketCapCalculation(),
        mathOptimizations: benchmarkMathOptimizations(),
        memoryOptimizations: benchmarkMemoryOptimizations(),
    };
    
    console.log("üìà –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:");
    console.log("-".repeat(40));
    
    Object.entries(results).forEach(([name, result]) => {
        const displayName = name.replace(/([A-Z])/g, ' $1').toLowerCase();
        console.log(`‚úÖ ${displayName}: ${result.opsPerSecond.toFixed(0)} ops/sec`);
    });
    
    const totalOps = Object.values(results).reduce((sum, r) => sum + r.opsPerSecond, 0);
    const avgPerformance = totalOps / Object.keys(results).length;
    
    console.log("-".repeat(40));
    console.log(`üèÜ –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${avgPerformance.toFixed(0)} ops/sec`);
    
    if (avgPerformance > 1000000) {
        console.log("üåü –û–¢–õ–ò–ß–ù–û! –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—à–µ 1M ops/sec");
    } else if (avgPerformance > 500000) {
        console.log("üëç –•–û–†–û–®–û! –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—à–µ 500K ops/sec");
    } else {
        console.log("‚ö†Ô∏è  –ú–û–ñ–ï–¢ –ë–´–¢–¨ –£–õ–£–ß–®–ï–ù–û: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∂–µ 500K ops/sec");
    }
    
    console.log("\nüéâ –í—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
    console.log("üìã –í–Ω–µ–¥—Ä–µ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:");
    console.log("  ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ AMM");
    console.log("  ‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤ —Ü–µ–Ω");
    console.log("  ‚Ä¢ –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π");
    console.log("  ‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è");
    console.log("  ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏");
    
    return results;
}

// –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
runBenchmarks();