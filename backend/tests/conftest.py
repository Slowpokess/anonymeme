"""
üß™ Pytest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è integration —Ç–µ—Å—Ç–æ–≤ API
Comprehensive test setup –¥–ª—è production-ready —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import pytest
import asyncio
import tempfile
import os
from typing import AsyncGenerator, Generator
from unittest.mock import AsyncMock, Mock

import asyncpg
from fastapi.testclient import TestClient
from httpx import AsyncClient

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç FastAPI
# from api.main import app
# from api.core.config import get_settings
# from api.models.database import get_database


class TestConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
    DATABASE_URL = "postgresql://test_user:test_pass@localhost:5432/test_anonymeme"
    REDIS_URL = "redis://localhost:6379/1"
    SECRET_KEY = "test-secret-key-for-testing-only"
    ENVIRONMENT = "testing"
    DEBUG = True
    TESTING = True
    
    # Solana test configuration
    SOLANA_RPC_URL = "https://api.devnet.solana.com"
    SOLANA_CLUSTER = "devnet"
    
    # WebSocket test configuration
    WEBSOCKET_HOST = "localhost"
    WEBSOCKET_PORT = 8001
    
    # Disable external services in tests
    ENABLE_EXTERNAL_APIS = False
    ENABLE_WEBSOCKETS = False


@pytest.fixture(scope="session")
def event_loop() -> Generator[asyncio.AbstractEventLoop, None, None]:
    """–°–æ–∑–¥–∞–Ω–∏–µ event loop –¥–ª—è async —Ç–µ—Å—Ç–æ–≤"""
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()


@pytest.fixture(scope="session")
async def test_db() -> AsyncGenerator[str, None]:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
    temp_db_name = f"test_anonymeme_{os.getpid()}"
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
    try:
        conn = await asyncpg.connect("postgresql://postgres@localhost:5432/postgres")
        await conn.execute(f'CREATE DATABASE "{temp_db_name}"')
        await conn.close()
        
        test_db_url = f"postgresql://postgres@localhost:5432/{temp_db_name}"
        
        # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
        # await run_migrations(test_db_url)
        
        yield test_db_url
        
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
        try:
            conn = await asyncpg.connect("postgresql://postgres@localhost:5432/postgres")
            await conn.execute(f'DROP DATABASE IF EXISTS "{temp_db_name}"')
            await conn.close()
        except Exception as e:
            print(f"Warning: Could not cleanup test database: {e}")


@pytest.fixture
async def db_connection(test_db: str) -> AsyncGenerator[asyncpg.Connection, None]:
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    conn = await asyncpg.connect(test_db)
    try:
        yield conn
    finally:
        await conn.close()


@pytest.fixture
async def clean_db(db_connection: asyncpg.Connection) -> AsyncGenerator[asyncpg.Connection, None]:
    """–û—á–∏—Å—Ç–∫–∞ –ë–î –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏"""
    # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    async with db_connection.transaction():
        yield db_connection
        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–∞—Ç–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞


# @pytest.fixture
# def test_app() -> FastAPI:
#     """–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI —Å —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
#     app.dependency_overrides[get_settings] = lambda: TestConfig()
#     return app


@pytest.fixture
def client() -> TestClient:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π test client –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö API —Ç–µ—Å—Ç–æ–≤"""
    # return TestClient(test_app)
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    return Mock()


@pytest.fixture
async def async_client() -> AsyncGenerator[AsyncClient, None]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP client –¥–ª—è complex API —Ç–µ—Å—Ç–æ–≤"""
    # async with AsyncClient(app=test_app, base_url="http://test") as ac:
    #     yield ac
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    yield AsyncMock()


@pytest.fixture
def mock_solana_client() -> Mock:
    """Mock Solana client –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è blockchain –æ–ø–µ—Ä–∞—Ü–∏–π"""
    mock = Mock()
    
    # –ú–æ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    mock.get_balance = AsyncMock(return_value=1000000000)  # 1 SOL
    mock.get_transaction = AsyncMock(return_value={
        "slot": 123456,
        "transaction": {
            "signatures": ["test_signature"],
            "message": {
                "accountKeys": [],
                "instructions": []
            }
        }
    })
    mock.send_transaction = AsyncMock(return_value="test_transaction_signature")
    mock.confirm_transaction = AsyncMock(return_value={"value": {"confirmationStatus": "finalized"}})
    
    return mock


@pytest.fixture
def mock_redis_client() -> Mock:
    """Mock Redis client –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è cache –æ–ø–µ—Ä–∞—Ü–∏–π"""
    mock = Mock()
    
    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π store –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ Redis
    store = {}
    
    async def mock_get(key):
        return store.get(key)
    
    async def mock_set(key, value, ex=None):
        store[key] = value
        return True
    
    async def mock_delete(key):
        return store.pop(key, None) is not None
    
    async def mock_exists(key):
        return key in store
    
    mock.get = AsyncMock(side_effect=mock_get)
    mock.set = AsyncMock(side_effect=mock_set)
    mock.delete = AsyncMock(side_effect=mock_delete)
    mock.exists = AsyncMock(side_effect=mock_exists)
    
    return mock


@pytest.fixture
def sample_token_data() -> dict:
    """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞"""
    return {
        "name": "Test Meme Token",
        "symbol": "TMT",
        "description": "A test token for integration testing",
        "image_url": "https://example.com/token.png",
        "initial_supply": 1000000000000000000,  # 1 –º–ª—Ä–¥
        "initial_price": 1000000,  # 0.001 SOL
        "bonding_curve_type": "linear",
        "graduation_threshold": 50000000000000000,  # 50 SOL market cap
    }


@pytest.fixture
def sample_user_data() -> dict:
    """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return {
        "wallet_address": "7wUQXRQtBzTmyp9kcrmok9FKcc4RSYXxPYN9FGDLnqxb",
        "username": "testuser",
        "email": "test@example.com",
        "reputation_score": 50.0,
    }


@pytest.fixture
def sample_trade_data() -> dict:
    """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏"""
    return {
        "token_mint": "TokenMintAddress123456789",
        "trader_address": "7wUQXRQtBzTmyp9kcrmok9FKcc4RSYXxPYN9FGDLnqxb",
        "trade_type": "buy",
        "sol_amount": 1000000000,  # 1 SOL
        "token_amount": 1000000,
        "slippage_tolerance": 100,  # 1%
    }


@pytest.fixture
def auth_headers() -> dict:
    """–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return {
        "Authorization": "Bearer test_jwt_token",
        "Content-Type": "application/json"
    }


@pytest.fixture
def admin_auth_headers() -> dict:
    """–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return {
        "Authorization": "Bearer admin_jwt_token",
        "Content-Type": "application/json",
        "X-Admin-Key": "test_admin_key"
    }


class DatabaseTestHelper:
    """–•–µ–ª–ø–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î –≤ —Ç–µ—Å—Ç–∞—Ö"""
    
    def __init__(self, connection: asyncpg.Connection):
        self.conn = connection
    
    async def create_test_user(self, user_data: dict) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = """
            INSERT INTO users (wallet_address, username, email, reputation_score)
            VALUES ($1, $2, $3, $4)
            RETURNING id
        """
        return await self.conn.fetchval(
            query,
            user_data["wallet_address"],
            user_data["username"],
            user_data["email"],
            user_data["reputation_score"]
        )
    
    async def create_test_token(self, token_data: dict, creator_id: int) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        query = """
            INSERT INTO tokens (
                mint_address, name, symbol, description, 
                creator_id, initial_supply, current_price
            )
            VALUES ($1, $2, $3, $4, $5, $6, $7)
            RETURNING mint_address
        """
        return await self.conn.fetchval(
            query,
            f"test_mint_{creator_id}",
            token_data["name"],
            token_data["symbol"],
            token_data["description"],
            creator_id,
            token_data["initial_supply"],
            token_data["initial_price"]
        )
    
    async def create_test_trade(self, trade_data: dict) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–¥–µ–ª–∫–∏"""
        query = """
            INSERT INTO trades (
                token_mint, trader_address, trade_type,
                sol_amount, token_amount, created_at
            )
            VALUES ($1, $2, $3, $4, $5, NOW())
            RETURNING id
        """
        return await self.conn.fetchval(
            query,
            trade_data["token_mint"],
            trade_data["trader_address"],
            trade_data["trade_type"],
            trade_data["sol_amount"],
            trade_data["token_amount"]
        )


@pytest.fixture
def db_helper(clean_db: asyncpg.Connection) -> DatabaseTestHelper:
    """–•–µ–ª–ø–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    return DatabaseTestHelper(clean_db)


class WebSocketTestHelper:
    """–•–µ–ª–ø–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self):
        self.connections = []
        self.messages = []
    
    async def connect(self, uri: str):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        mock_ws = AsyncMock()
        mock_ws.send = AsyncMock()
        mock_ws.recv = AsyncMock()
        mock_ws.close = AsyncMock()
        
        self.connections.append(mock_ws)
        return mock_ws
    
    async def send_message(self, ws, message: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket"""
        self.messages.append(message)
        await ws.send(message)
    
    async def wait_for_message(self, ws, timeout: float = 5.0):
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        return {"type": "test_message", "data": {}}


@pytest.fixture
def ws_helper() -> WebSocketTestHelper:
    """–•–µ–ª–ø–µ—Ä –¥–ª—è WebSocket —Ç–µ—Å—Ç–æ–≤"""
    return WebSocketTestHelper()


# –ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
def pytest_configure(config):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest —Å custom –º–∞—Ä–∫–µ—Ä–∞–º–∏"""
    config.addinivalue_line("markers", "unit: mark test as unit test")
    config.addinivalue_line("markers", "integration: mark test as integration test")
    config.addinivalue_line("markers", "e2e: mark test as end-to-end test")
    config.addinivalue_line("markers", "slow: mark test as slow running")
    config.addinivalue_line("markers", "requires_db: mark test as requiring database")
    config.addinivalue_line("markers", "requires_redis: mark test as requiring Redis")
    config.addinivalue_line("markers", "requires_solana: mark test as requiring Solana connection")


# –°–∫–∏–ø —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
def pytest_runtest_setup(item):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–∏–ø —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    if "requires_db" in item.keywords:
        try:
            import asyncpg
        except ImportError:
            pytest.skip("asyncpg not available")
    
    if "requires_redis" in item.keywords:
        try:
            import redis
        except ImportError:
            pytest.skip("redis not available")
    
    if "requires_solana" in item.keywords:
        try:
            import solana
        except ImportError:
            pytest.skip("solana not available")


@pytest.fixture(autouse=True)
def setup_test_environment():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    os.environ["ENVIRONMENT"] = "testing"
    os.environ["DEBUG"] = "True"
    os.environ["TESTING"] = "True"
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    test_env_vars = ["ENVIRONMENT", "DEBUG", "TESTING"]
    for var in test_env_vars:
        os.environ.pop(var, None)