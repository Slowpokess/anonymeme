#!/usr/bin/env python3
"""
üöÄ Database Migration Runner –¥–ª—è Anonymeme
Production-ready –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º
"""

import os
import sys
import asyncio
import logging
from pathlib import Path
from typing import List, Dict, Any
from datetime import datetime

import asyncpg
from asyncpg import Connection
import click

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class MigrationRunner:
    """–°–∏—Å—Ç–µ–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –ë–î"""
    
    def __init__(self, database_url: str):
        self.database_url = database_url
        self.migrations_dir = Path(__file__).parent / "migrations"
        self.connection: Connection = None
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = await asyncpg.connect(self.database_url)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection:
            await self.connection.close()
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
    
    async def create_migration_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""
        query = """
        CREATE TABLE IF NOT EXISTS schema_migrations (
            id SERIAL PRIMARY KEY,
            version VARCHAR(100) UNIQUE NOT NULL,
            name VARCHAR(255) NOT NULL,
            applied_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
            execution_time_ms INTEGER,
            checksum VARCHAR(64),
            success BOOLEAN DEFAULT TRUE,
            error_message TEXT
        );
        
        CREATE INDEX IF NOT EXISTS idx_schema_migrations_version 
        ON schema_migrations(version);
        
        CREATE INDEX IF NOT EXISTS idx_schema_migrations_applied_at 
        ON schema_migrations(applied_at);
        """
        
        await self.connection.execute(query)
        logger.info("üìã –¢–∞–±–ª–∏—Ü–∞ –º–∏–≥—Ä–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    
    async def get_applied_migrations(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        query = """
        SELECT version FROM schema_migrations 
        WHERE success = TRUE 
        ORDER BY version
        """
        
        rows = await self.connection.fetch(query)
        return [row['version'] for row in rows]
    
    def get_migration_files(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π"""
        migrations = []
        
        if not self.migrations_dir.exists():
            logger.warning(f"–ü–∞–ø–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.migrations_dir}")
            return migrations
        
        for file_path in sorted(self.migrations_dir.glob("*.sql")):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 001_initial_schema.sql -> 001)
            version = file_path.stem.split('_')[0]
            
            migrations.append({
                'version': version,
                'name': file_path.stem,
                'file_path': file_path,
                'content': file_path.read_text(encoding='utf-8')
            })
        
        return migrations
    
    def calculate_checksum(self, content: str) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –º–∏–≥—Ä–∞—Ü–∏–∏"""
        import hashlib
        return hashlib.sha256(content.encode('utf-8')).hexdigest()
    
    async def apply_migration(self, migration: Dict[str, Any]) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
        version = migration['version']
        name = migration['name']
        content = migration['content']
        checksum = self.calculate_checksum(content)
        
        logger.info(f"üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ {version}: {name}")
        
        start_time = datetime.now()
        
        try:
            # –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            async with self.connection.transaction():
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
                await self.connection.execute(content)
                
                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                execution_time = (datetime.now() - start_time).total_seconds() * 1000
                
                # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
                await self.connection.execute("""
                    INSERT INTO schema_migrations 
                    (version, name, execution_time_ms, checksum, success)
                    VALUES ($1, $2, $3, $4, $5)
                """, version, name, int(execution_time), checksum, True)
                
                logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {version} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ ({execution_time:.0f}ms)")
                return True
                
        except Exception as e:
            # –ó–∞–ø–∏—Å—å –æ–± –æ—à–∏–±–∫–µ
            try:
                execution_time = (datetime.now() - start_time).total_seconds() * 1000
                await self.connection.execute("""
                    INSERT INTO schema_migrations 
                    (version, name, execution_time_ms, checksum, success, error_message)
                    VALUES ($1, $2, $3, $4, $5, $6)
                """, version, name, int(execution_time), checksum, False, str(e))
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
            
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ {version}: {e}")
            return False
    
    async def migrate_down(self, target_version: str) -> bool:
        """–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        await self.create_migration_table()
        
        applied_migrations = await self.get_applied_migrations()
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        migrations_to_rollback = [
            v for v in reversed(applied_migrations) 
            if v > target_version
        ]
        
        if not migrations_to_rollback:
            logger.info("üîÑ –ù–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞")
            return True
        
        logger.warning(f"‚ö†Ô∏è –û—Ç–∫–∞—Ç {len(migrations_to_rollback)} –º–∏–≥—Ä–∞—Ü–∏–π –¥–æ –≤–µ—Ä—Å–∏–∏ {target_version}")
        
        # –í –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–∫–∞—á–µ–Ω–Ω—ã–µ
        # –í production –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç down-–º–∏–≥—Ä–∞—Ü–∏–∏
        for version in migrations_to_rollback:
            try:
                await self.connection.execute("""
                    UPDATE schema_migrations 
                    SET success = FALSE, error_message = 'Rolled back'
                    WHERE version = $1
                """, version)
                logger.info(f"üîÑ –û—Ç–∫–∞—á–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è {version}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ {version}: {e}")
                return False
        
        logger.info(f"‚úÖ –û—Ç–∫–∞—Ç –¥–æ –≤–µ—Ä—Å–∏–∏ {target_version} –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
    
    async def migrate_up(self, target_version: str = None) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        await self.create_migration_table()
        
        applied_migrations = await self.get_applied_migrations()
        available_migrations = self.get_migration_files()
        
        logger.info(f"üìä –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: {len(applied_migrations)}")
        logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: {len(available_migrations)}")
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
        pending_migrations = [
            m for m in available_migrations 
            if m['version'] not in applied_migrations
        ]
        
        if target_version:
            pending_migrations = [
                m for m in pending_migrations 
                if m['version'] <= target_version
            ]
        
        if not pending_migrations:
            logger.info("‚ú® –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            return True
        
        logger.info(f"üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {len(pending_migrations)} –º–∏–≥—Ä–∞—Ü–∏–π...")
        
        success_count = 0
        for migration in pending_migrations:
            if await self.apply_migration(migration):
                success_count += 1
            else:
                logger.error("üí• –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
                break
        
        if success_count == len(pending_migrations):
            logger.info(f"üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã ({success_count}/{len(pending_migrations)})")
            return True
        else:
            logger.error(f"‚ö†Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Ç–æ–ª—å–∫–æ {success_count}/{len(pending_migrations)} –º–∏–≥—Ä–∞—Ü–∏–π")
            return False
    
    async def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"""
        await self.create_migration_table()
        
        applied_migrations = await self.get_applied_migrations()
        available_migrations = self.get_migration_files()
        
        print("\n" + "="*60)
        print("üìã –°–¢–ê–¢–£–° –ú–ò–ì–†–ê–¶–ò–ô")
        print("="*60)
        
        print(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: {len(applied_migrations)}")
        print(f"–î–æ—Å—Ç—É–ø–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: {len(available_migrations)}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
        print("\n–î–µ—Ç–∞–ª–∏:")
        for migration in available_migrations:
            version = migration['version']
            name = migration['name']
            status = "‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞" if version in applied_migrations else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
            print(f"  {version}: {name} - {status}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        if applied_migrations:
            query = """
            SELECT version, name, applied_at, execution_time_ms 
            FROM schema_migrations 
            WHERE success = TRUE 
            ORDER BY applied_at DESC 
            LIMIT 5
            """
            recent_migrations = await self.connection.fetch(query)
            
            print("\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
            for row in recent_migrations:
                print(f"  {row['version']}: {row['name']} "
                      f"({row['applied_at'].strftime('%Y-%m-%d %H:%M:%S')}, "
                      f"{row['execution_time_ms']}ms)")
        
        print("="*60)
    
    async def validate_migrations(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""
        logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π...")
        
        migrations = self.get_migration_files()
        
        if not migrations:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π
        versions = [m['version'] for m in migrations]
        for i, version in enumerate(versions):
            expected = f"{i+1:03d}"
            if version != expected:
                logger.error(f"‚ùå –ù–∞—Ä—É—à–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π: –Ω–∞–π–¥–µ–Ω–∞ {version}, –æ–∂–∏–¥–∞–ª–∞—Å—å {expected}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ SQL (–±–∞–∑–æ–≤–∞—è)
        for migration in migrations:
            content = migration['content'].strip()
            if not content:
                logger.error(f"‚ùå –ü—É—Å—Ç–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: {migration['name']}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
            dangerous_patterns = [
                'DROP DATABASE',
                'DROP SCHEMA',
                'TRUNCATE',
            ]
            
            content_upper = content.upper()
            for pattern in dangerous_patterns:
                if pattern in content_upper:
                    logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤ {migration['name']}: {pattern}")
        
        logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True


# CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
@click.group()
def cli():
    """Anonymeme Database Migration Tool"""
    pass


@cli.command()
@click.option('--database-url', 
              envvar='DATABASE_URL',
              required=True,
              help='URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
@click.option('--target-version', 
              help='–í–µ—Ä—Å–∏—è –¥–æ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏')
def migrate(database_url: str, target_version: str = None):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    async def run_migration():
        runner = MigrationRunner(database_url)
        try:
            await runner.connect()
            success = await runner.migrate_up(target_version)
            sys.exit(0 if success else 1)
        finally:
            await runner.disconnect()
    
    asyncio.run(run_migration())


@cli.command()
@click.option('--database-url',
              envvar='DATABASE_URL', 
              required=True,
              help='URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
def status(database_url: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"""
    async def show_migration_status():
        runner = MigrationRunner(database_url)
        try:
            await runner.connect()
            await runner.show_status()
        finally:
            await runner.disconnect()
    
    asyncio.run(show_migration_status())


@cli.command()
@click.option('--database-url',
              envvar='DATABASE_URL',
              required=True,
              help='URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
@click.option('--target-version',
              required=True,
              help='–í–µ—Ä—Å–∏—è –¥–æ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏')
def rollback(database_url: str, target_version: str):
    """–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    async def run_rollback():
        runner = MigrationRunner(database_url)
        try:
            await runner.connect()
            success = await runner.migrate_down(target_version)
            sys.exit(0 if success else 1)
        finally:
            await runner.disconnect()
    
    asyncio.run(run_rollback())


@cli.command()
def validate():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π"""
    async def validate_migrations():
        runner = MigrationRunner("dummy://")  # URL –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        success = await runner.validate_migrations()
        sys.exit(0 if success else 1)
    
    asyncio.run(validate_migrations())


@cli.command()
@click.option('--name', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏')
def create(name: str):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
    migrations_dir = Path(__file__).parent / "migrations"
    migrations_dir.mkdir(exist_ok=True)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä—Å–∏–∏
    existing_migrations = list(migrations_dir.glob("*.sql"))
    if existing_migrations:
        versions = [int(f.stem.split('_')[0]) for f in existing_migrations]
        next_version = max(versions) + 1
    else:
        next_version = 1
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
    version_str = f"{next_version:03d}"
    filename = f"{version_str}_{name.lower().replace(' ', '_')}.sql"
    file_path = migrations_dir / filename
    
    template = f"""-- ==================================================================
-- Anonymeme Database Migration {version_str}
-- Version: {version_str}
-- Description: {name}
-- Author: Developer
-- Date: {datetime.now().strftime('%Y-%m-%d')}
-- ==================================================================

-- TODO: –î–æ–±–∞–≤—å—Ç–µ SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏

-- ==================================================================
-- –ó–ê–í–ï–†–®–ï–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ò
-- ==================================================================

-- –õ–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
DO $$
BEGIN
    RAISE NOTICE 'Migration {filename} completed successfully at %', NOW();
END $$;
"""
    
    file_path.write_text(template, encoding='utf-8')
    
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: {filename}")
    logger.info(f"üìÇ –ü—É—Ç—å: {file_path}")


if __name__ == "__main__":
    cli()