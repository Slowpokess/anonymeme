#!/usr/bin/env python3
"""
ü™ô API —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏
Production-ready endpoints —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
"""

import logging
from typing import List, Optional, Dict, Any
from uuid import UUID
from datetime import datetime

from fastapi import APIRouter, Depends, HTTPException, status, Query, Path
from fastapi.responses import JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, or_, desc, asc, func
from sqlalchemy.orm import selectinload

from ..models.database import Token, User, TokenStatus, CurveType
from ..schemas.requests import (
    TokenCreateRequest, TokenSearchRequest, TokenUpdateRequest, 
    PaginationRequest
)
from ..schemas.responses import (
    TokenResponse, TokenDetailResponse, TokensListResponse, 
    TokenCreateResponse, SuccessResponse, PaginationResponse
)
from ..services.blockchain import SolanaService
from ..services.cache import CacheService
from ..core.exceptions import (
    RecordNotFoundException, ValidationException, BlockchainException,
    AuthorizationException, DatabaseException
)
from ..core.config import settings

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = APIRouter()


# === DEPENDENCY FUNCTIONS ===

async def get_db() -> AsyncSession:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î (–±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ main.py)"""
    pass


async def get_current_user() -> User:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    pass


async def get_solana_service() -> SolanaService:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Solana —Å–µ—Ä–≤–∏—Å–∞"""
    pass


async def get_cache_service() -> CacheService:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Cache —Å–µ—Ä–≤–∏—Å–∞"""
    pass


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def _get_token_by_id(db: AsyncSession, token_id: UUID) -> Token:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ ID —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
    stmt = select(Token).where(Token.id == token_id).options(
        selectinload(Token.creator)
    )
    result = await db.execute(stmt)
    token = result.scalar_one_or_none()
    
    if not token:
        raise RecordNotFoundException("Token", str(token_id))
    
    return token


async def _get_token_by_mint(db: AsyncSession, mint_address: str) -> Token:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ mint –∞–¥—Ä–µ—Å—É"""
    stmt = select(Token).where(Token.mint_address == mint_address).options(
        selectinload(Token.creator)
    )
    result = await db.execute(stmt)
    token = result.scalar_one_or_none()
    
    if not token:
        raise RecordNotFoundException("Token", mint_address)
    
    return token


async def _update_token_price_data(
    token: Token, 
    solana: SolanaService,
    cache: CacheService
) -> Token:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ —Ç–æ–∫–µ–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
        price_info = await solana.get_token_price(token.mint_address)
        
        if price_info:
            token.current_price = price_info.current_price
            token.market_cap = price_info.market_cap
            token.sol_reserves = price_info.sol_reserves
            token.token_reserves = price_info.token_reserves
            
            # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ
            await cache.cache_price_data(token.mint_address, {
                "current_price": float(price_info.current_price),
                "market_cap": float(price_info.market_cap),
                "sol_reserves": float(price_info.sol_reserves),
                "token_reserves": float(price_info.token_reserves),
                "last_updated": datetime.utcnow().isoformat()
            })
    
    except Exception as e:
        logger.warning(f"Failed to update price data for {token.mint_address}: {e}")
    
    return token


def _build_token_search_query(db_query, search_params: TokenSearchRequest):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
    
    if search_params.query:
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏ —Å–∏–º–≤–æ–ª—É
        search_filter = or_(
            Token.name.ilike(f"%{search_params.query}%"),
            Token.symbol.ilike(f"%{search_params.query}%"),
            Token.description.ilike(f"%{search_params.query}%")
        )
        db_query = db_query.where(search_filter)
    
    if search_params.curve_type:
        db_query = db_query.where(Token.curve_type == search_params.curve_type)
    
    if search_params.min_market_cap is not None:
        db_query = db_query.where(Token.market_cap >= search_params.min_market_cap)
    
    if search_params.max_market_cap is not None:
        db_query = db_query.where(Token.market_cap <= search_params.max_market_cap)
    
    if search_params.is_graduated is not None:
        db_query = db_query.where(Token.is_graduated == search_params.is_graduated)
    
    if search_params.is_verified is not None:
        db_query = db_query.where(Token.is_verified == search_params.is_verified)
    
    if search_params.creator_id:
        try:
            creator_uuid = UUID(search_params.creator_id)
            db_query = db_query.where(Token.creator_id == creator_uuid)
        except ValueError:
            raise ValidationException("Invalid creator_id format")
    
    if search_params.tags:
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º (JSON –ø–æ–ª–µ)
        for tag in search_params.tags:
            db_query = db_query.where(Token.tags.contains([tag]))
    
    return db_query


# === ENDPOINTS ===

@router.get("", response_model=TokensListResponse)
async def get_tokens(
    search: TokenSearchRequest = Depends(),
    pagination: PaginationRequest = Depends(),
    db: AsyncSession = Depends(get_db),
    cache: CacheService = Depends(get_cache_service),
    solana: SolanaService = Depends(get_solana_service)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, —Å–∏–º–≤–æ–ª—É, –æ–ø–∏—Å–∞–Ω–∏—é
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∫—Ä–∏–≤–æ–π, –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏, —Å—Ç–∞—Ç—É—Å—É
    - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    """
    try:
        # –ö—ç—à –∫–ª—é—á –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        cache_key = f"tokens_list:{hash(str(search.dict()) + str(pagination.dict()))}"
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
        cached_result = await cache.get(cache_key, "token")
        if cached_result:
            return TokensListResponse(**cached_result)
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        base_query = select(Token).where(Token.status == TokenStatus.ACTIVE)
        base_query = base_query.options(selectinload(Token.creator))
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filtered_query = _build_token_search_query(base_query, search)
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        count_query = select(func.count()).select_from(
            filtered_query.subquery()
        )
        result = await db.execute(count_query)
        total_count = result.scalar()
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sort_column = getattr(Token, pagination.sort_by, Token.created_at)
        if pagination.sort_order == "asc":
            filtered_query = filtered_query.order_by(asc(sort_column))
        else:
            filtered_query = filtered_query.order_by(desc(sort_column))
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        offset = (pagination.page - 1) * pagination.limit
        filtered_query = filtered_query.offset(offset).limit(pagination.limit)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        result = await db.execute(filtered_query)
        tokens = result.scalars().all()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10 —Ç–æ–∫–µ–Ω–æ–≤
        for token in tokens[:10]:
            await _update_token_price_data(token, solana, cache)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        token_responses = [TokenResponse.from_orm(token) for token in tokens]
        
        pagination_info = PaginationResponse(
            page=pagination.page,
            limit=pagination.limit,
            total=total_count,
            pages=(total_count + pagination.limit - 1) // pagination.limit,
            has_next=pagination.page * pagination.limit < total_count,
            has_prev=pagination.page > 1
        )
        
        response = TokensListResponse(
            tokens=token_responses,
            pagination=pagination_info
        )
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await cache.set(cache_key, response.dict(), "token", ttl=60)
        
        return response
        
    except Exception as e:
        logger.error(f"Failed to get tokens: {e}")
        if isinstance(e, (ValidationException, DatabaseException)):
            raise e
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to retrieve tokens"
        )


@router.get("/{token_id}", response_model=TokenDetailResponse)
async def get_token(
    token_id: UUID = Path(..., description="ID —Ç–æ–∫–µ–Ω–∞"),
    db: AsyncSession = Depends(get_db),
    cache: CacheService = Depends(get_cache_service),
    solana: SolanaService = Depends(get_solana_service)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
    """
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
        cache_key = f"token_detail:{token_id}"
        cached_token = await cache.get(cache_key, "token")
        
        if cached_token:
            return TokenDetailResponse(**cached_token)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ë–î
        token = await _get_token_by_id(db, token_id)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ
        token = await _update_token_price_data(token, solana, cache)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î
        await db.commit()
        await db.refresh(token)
        
        response = TokenDetailResponse.from_orm(token)
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await cache.set(cache_key, response.dict(), "token", ttl=300)
        
        return response
        
    except RecordNotFoundException:
        raise
    except Exception as e:
        logger.error(f"Failed to get token {token_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to retrieve token"
        )


@router.get("/mint/{mint_address}", response_model=TokenDetailResponse)
async def get_token_by_mint(
    mint_address: str = Path(..., description="Mint –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞"),
    db: AsyncSession = Depends(get_db),
    cache: CacheService = Depends(get_cache_service),
    solana: SolanaService = Depends(get_solana_service)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ mint –∞–¥—Ä–µ—Å—É
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è mint –∞–¥—Ä–µ—Å–∞
        if len(mint_address) != 44:
            raise ValidationException("Invalid mint address format")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
        cache_key = f"token_mint:{mint_address}"
        cached_token = await cache.get(cache_key, "token")
        
        if cached_token:
            return TokenDetailResponse(**cached_token)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ë–î
        token = await _get_token_by_mint(db, mint_address)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ
        token = await _update_token_price_data(token, solana, cache)
        
        await db.commit()
        await db.refresh(token)
        
        response = TokenDetailResponse.from_orm(token)
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await cache.set(cache_key, response.dict(), "token", ttl=300)
        
        return response
        
    except RecordNotFoundException:
        raise
    except Exception as e:
        logger.error(f"Failed to get token by mint {mint_address}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to retrieve token"
        )


@router.post("", response_model=TokenCreateResponse)
async def create_token(
    token_data: TokenCreateRequest,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user),
    solana: SolanaService = Depends(get_solana_service),
    cache: CacheService = Depends(get_cache_service)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    
    –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –°–æ–∑–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if current_user.tokens_created >= settings.MAX_TOKENS_PER_USER:
            raise ValidationException(
                f"Maximum {settings.MAX_TOKENS_PER_USER} tokens per user exceeded"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–∞
        existing_token = await db.execute(
            select(Token).where(Token.symbol == token_data.symbol.upper())
        )
        if existing_token.scalar_one_or_none():
            raise ValidationException(f"Token symbol '{token_data.symbol}' already exists")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
        logger.info(f"Creating token {token_data.symbol} for user {current_user.id}")
        
        transaction_signature = await solana.create_token(
            creator_wallet=current_user.wallet_address,
            name=token_data.name,
            symbol=token_data.symbol,
            uri=token_data.image_url or "",
            bonding_curve_params=token_data.bonding_curve_params.dict()
        )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è mint –∞–¥—Ä–µ—Å–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
        # –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        import hashlib
        mint_address = hashlib.sha256(
            f"{current_user.wallet_address}{token_data.symbol}{transaction_signature}".encode()
        ).hexdigest()[:44]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        new_token = Token(
            mint_address=mint_address,
            name=token_data.name,
            symbol=token_data.symbol.upper(),
            description=token_data.description,
            image_url=token_data.image_url,
            creator_id=current_user.id,
            curve_type=token_data.bonding_curve_params.curve_type,
            initial_supply=token_data.bonding_curve_params.initial_supply,
            current_supply=token_data.bonding_curve_params.initial_supply,
            initial_price=token_data.bonding_curve_params.initial_price,
            current_price=token_data.bonding_curve_params.initial_price,
            token_reserves=token_data.bonding_curve_params.initial_supply,
            graduation_threshold=token_data.bonding_curve_params.graduation_threshold,
            telegram_url=token_data.telegram_url,
            twitter_url=token_data.twitter_url,
            website_url=token_data.website_url,
            tags=token_data.tags or [],
            bonding_curve_params=token_data.bonding_curve_params.dict()
        )
        
        db.add(new_token)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user.tokens_created += 1
        current_user.last_token_creation_at = datetime.utcnow()
        
        await db.commit()
        await db.refresh(new_token)
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        await cache.delete_pattern("tokens_list:*", "token")
        await cache.delete_pattern("trending_*", "analytics")
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        token_response = TokenResponse.from_orm(new_token)
        
        response = TokenCreateResponse(
            token=token_response,
            transaction_signature=transaction_signature,
            estimated_confirmation_time=30
        )
        
        logger.info(f"‚úÖ Token {token_data.symbol} created successfully: {new_token.id}")
        
        return response
        
    except ValidationException:
        raise
    except BlockchainException:
        raise
    except Exception as e:
        logger.error(f"Failed to create token: {e}")
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to create token"
        )


@router.put("/{token_id}", response_model=TokenResponse)
async def update_token(
    token_id: UUID,
    update_data: TokenUpdateRequest,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user),
    cache: CacheService = Depends(get_cache_service)
):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ —Ç–µ–≥–∏.
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        token = await _get_token_by_id(db, token_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
        if token.creator_id != current_user.id:
            raise AuthorizationException("Only token creator can update token")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
        update_fields = update_data.dict(exclude_unset=True)
        
        for field, value in update_fields.items():
            if hasattr(token, field):
                setattr(token, field, value)
        
        await db.commit()
        await db.refresh(token)
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        await cache.delete(f"token_detail:{token_id}", "token")
        await cache.delete(f"token_mint:{token.mint_address}", "token")
        
        response = TokenResponse.from_orm(token)
        
        logger.info(f"Token {token_id} updated by user {current_user.id}")
        
        return response
        
    except (RecordNotFoundException, AuthorizationException):
        raise
    except Exception as e:
        logger.error(f"Failed to update token {token_id}: {e}")
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to update token"
        )


@router.get("/{token_id}/price", response_model=Dict[str, Any])
async def get_token_price(
    token_id: UUID,
    db: AsyncSession = Depends(get_db),
    solana: SolanaService = Depends(get_solana_service),
    cache: CacheService = Depends(get_cache_service)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞
    """
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
        cache_key = f"price:{token_id}"
        cached_price = await cache.get(cache_key, "price")
        
        if cached_price:
            return cached_price
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        token = await _get_token_by_id(db, token_id)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
        price_info = await solana.get_token_price(token.mint_address)
        
        if not price_info:
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Unable to fetch current price"
            )
        
        price_data = {
            "token_id": str(token_id),
            "mint_address": token.mint_address,
            "current_price": float(price_info.current_price),
            "market_cap": float(price_info.market_cap),
            "sol_reserves": float(price_info.sol_reserves),
            "token_reserves": float(price_info.token_reserves),
            "price_impact_1_sol": price_info.price_impact_1_sol,
            "graduation_progress": price_info.graduation_progress,
            "last_updated": datetime.utcnow().isoformat()
        }
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
        await cache.set(cache_key, price_data, "price", ttl=30)
        
        return price_data
        
    except RecordNotFoundException:
        raise
    except Exception as e:
        logger.error(f"Failed to get price for token {token_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to get token price"
        )


@router.get("/trending/volume", response_model=List[TokenResponse])
async def get_trending_by_volume(
    limit: int = Query(10, ge=1, le=50, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤"),
    period: str = Query("24h", regex="^(1h|24h|7d)$", description="–ü–µ—Ä–∏–æ–¥"),
    db: AsyncSession = Depends(get_db),
    cache: CacheService = Depends(get_cache_service)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤
    """
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
        cache_key = f"trending_volume:{period}:{limit}"
        cached_result = await cache.get(cache_key, "analytics")
        
        if cached_result:
            return [TokenResponse(**token) for token in cached_result]
        
        # –ó–∞–ø—Ä–æ—Å –≤ –ë–î
        query = select(Token).where(
            and_(
                Token.status == TokenStatus.ACTIVE,
                Token.volume_24h > 0
            )
        ).order_by(desc(Token.volume_24h)).limit(limit)
        
        query = query.options(selectinload(Token.creator))
        
        result = await db.execute(query)
        tokens = result.scalars().all()
        
        token_responses = [TokenResponse.from_orm(token) for token in tokens]
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 5 –º–∏–Ω—É—Ç
        await cache.set(
            cache_key, 
            [token.dict() for token in token_responses], 
            "analytics", 
            ttl=300
        )
        
        return token_responses
        
    except Exception as e:
        logger.error(f"Failed to get trending tokens by volume: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to retrieve trending tokens"
        )


@router.get("/search/autocomplete")
async def search_autocomplete(
    q: str = Query(..., min_length=2, description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"),
    limit: int = Query(10, ge=1, le=20),
    db: AsyncSession = Depends(get_db),
    cache: CacheService = Depends(get_cache_service)
):
    """
    –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    """
    try:
        # –ö—ç—à –∫–ª—é—á
        cache_key = f"autocomplete:{q.lower()}:{limit}"
        cached_result = await cache.get(cache_key, "token")
        
        if cached_result:
            return cached_result
        
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏ —Å–∏–º–≤–æ–ª—É
        search_filter = or_(
            Token.name.ilike(f"{q}%"),
            Token.symbol.ilike(f"{q}%")
        )
        
        query = select(Token.name, Token.symbol, Token.mint_address).where(
            and_(
                Token.status == TokenStatus.ACTIVE,
                search_filter
            )
        ).limit(limit)
        
        result = await db.execute(query)
        suggestions = []
        
        for row in result:
            suggestions.append({
                "name": row.name,
                "symbol": row.symbol,
                "mint_address": row.mint_address,
                "display": f"{row.name} ({row.symbol})"
            })
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 10 –º–∏–Ω—É—Ç
        await cache.set(cache_key, suggestions, "token", ttl=600)
        
        return suggestions
        
    except Exception as e:
        logger.error(f"Failed to get autocomplete suggestions: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to get suggestions"
        )


@router.delete("/{token_id}")
async def delete_token(
    token_id: UUID,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user),
    cache: CacheService = Depends(get_cache_service)
):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω)
    
    –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø–æ–º–µ—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π, –Ω–µ —É–¥–∞–ª—è–µ—Ç –∏–∑ –ë–î.
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        token = await _get_token_by_id(db, token_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if token.creator_id != current_user.id and current_user.role != "admin":
            raise AuthorizationException("Only token creator or admin can delete token")
        
        # "–£–¥–∞–ª–µ–Ω–∏–µ" (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞)
        token.status = TokenStatus.PAUSED
        
        await db.commit()
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        await cache.delete(f"token_detail:{token_id}", "token")
        await cache.delete(f"token_mint:{token.mint_address}", "token")
        await cache.delete_pattern("tokens_list:*", "token")
        
        logger.info(f"Token {token_id} deleted by user {current_user.id}")
        
        return SuccessResponse(
            message="Token deleted successfully",
            timestamp=datetime.utcnow()
        )
        
    except (RecordNotFoundException, AuthorizationException):
        raise
    except Exception as e:
        logger.error(f"Failed to delete token {token_id}: {e}")
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to delete token"
        )