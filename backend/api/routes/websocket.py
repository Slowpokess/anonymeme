#!/usr/bin/env python3
"""
üîå WebSocket —Ä–æ—É—Ç—ã –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
–û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ FastAPI
"""

import json
import logging
from typing import Optional, Dict, Any
from datetime import datetime, timezone

from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Depends, HTTPException, status
from fastapi.websockets import WebSocketState

from ..services.websocket import get_websocket_manager, WebSocketManager, WebSocketMessage, EventType
from ..core.config import settings

logger = logging.getLogger(__name__)

router = APIRouter()


@router.websocket("/ws")
async def websocket_endpoint(
    websocket: WebSocket,
    token: Optional[str] = None,
    room: Optional[str] = None,
    user_id: Optional[str] = None,
    ws_manager: WebSocketManager = Depends(get_websocket_manager)
):
    """
    WebSocket endpoint –¥–ª—è real-time —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - token: JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - room: –ö–æ–º–Ω–∞—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    # –ü—Ä–∏–Ω—è—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await websocket.accept()
    
    connection_id = ws_manager.generate_connection_id()
    logger.info(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: {connection_id}")
    
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        from ..services.websocket import ConnectionInfo
        connection = ConnectionInfo(websocket=websocket)
        ws_manager.connections[connection_id] = connection
        ws_manager.stats["total_connections"] += 1
        ws_manager.stats["active_connections"] += 1
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω user_id
        if user_id:
            connection.user_id = user_id
            await ws_manager.join_room(connection_id, f"user_{user_id}")
            logger.info(f"WebSocket {connection_id} –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
        if room:
            await ws_manager.join_room(connection_id, room)
        
        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è –æ–±—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await ws_manager.join_room(connection_id, "global")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        welcome_message = WebSocketMessage(
            type=EventType.USER_CONNECTED,
            data={
                "connection_id": connection_id,
                "user_id": user_id,
                "joined_rooms": list(connection.rooms),
                "server_time": datetime.now(timezone.utc).isoformat(),
                "message": "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Anonymeme real-time!"
            },
            timestamp=datetime.now(timezone.utc).isoformat()
        )
        
        await websocket.send_text(welcome_message.to_json())
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        while True:
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                data = await websocket.receive_text()
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                connection.last_ping = datetime.now(timezone.utc)
                
                # –ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    message_data = json.loads(data)
                    message_type = message_data.get("type")
                    message_payload = message_data.get("data", {})
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                    if message_type == "heartbeat":
                        # –û—Ç–≤–µ—Ç –Ω–∞ heartbeat
                        pong_message = WebSocketMessage(
                            type=EventType.HEARTBEAT,
                            data={"pong": True, "server_time": datetime.now(timezone.utc).isoformat()},
                            timestamp=datetime.now(timezone.utc).isoformat()
                        )
                        await websocket.send_text(pong_message.to_json())
                        
                    elif message_type == "join_room":
                        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
                        room_name = message_payload.get("room")
                        if room_name:
                            await ws_manager.join_room(connection_id, room_name)
                            
                            response = WebSocketMessage(
                                type="room_joined",
                                data={"room": room_name, "success": True},
                                timestamp=datetime.now(timezone.utc).isoformat()
                            )
                            await websocket.send_text(response.to_json())
                        
                    elif message_type == "leave_room":
                        # –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
                        room_name = message_payload.get("room")
                        if room_name:
                            await ws_manager.leave_room(connection_id, room_name)
                            
                            response = WebSocketMessage(
                                type="room_left",
                                data={"room": room_name, "success": True},
                                timestamp=datetime.now(timezone.utc).isoformat()
                            )
                            await websocket.send_text(response.to_json())
                    
                    elif message_type == "subscribe":
                        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ç–æ–∫–µ–Ω–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        subscribe_to = message_payload.get("subscribe_to")
                        if subscribe_to:
                            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                            if subscribe_to.startswith("token_"):
                                await ws_manager.join_room(connection_id, subscribe_to)
                            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            elif subscribe_to.startswith("user_"):
                                if connection.user_id:  # –¢–æ–ª—å–∫–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                                    await ws_manager.join_room(connection_id, subscribe_to)
                            
                            response = WebSocketMessage(
                                type="subscribed",
                                data={"subscription": subscribe_to, "success": True},
                                timestamp=datetime.now(timezone.utc).isoformat()
                            )
                            await websocket.send_text(response.to_json())
                    
                    elif message_type == "get_room_info":
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ
                        room_name = message_payload.get("room")
                        if room_name:
                            room_info = ws_manager.get_room_info(room_name)
                            response = WebSocketMessage(
                                type="room_info",
                                data={"room": room_name, "info": room_info},
                                timestamp=datetime.now(timezone.utc).isoformat()
                            )
                            await websocket.send_text(response.to_json())
                    
                    else:
                        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                        error_response = WebSocketMessage(
                            type=EventType.ERROR,
                            data={"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}"},
                            timestamp=datetime.now(timezone.utc).isoformat()
                        )
                        await websocket.send_text(error_response.to_json())
                        
                except json.JSONDecodeError:
                    # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
                    error_response = WebSocketMessage(
                        type=EventType.ERROR,
                        data={"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON"},
                        timestamp=datetime.now(timezone.utc).isoformat()
                    )
                    await websocket.send_text(error_response.to_json())
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {connection_id}: {e}")
                    error_response = WebSocketMessage(
                        type=EventType.ERROR,
                        data={"error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"},
                        timestamp=datetime.now(timezone.utc).isoformat()
                    )
                    await websocket.send_text(error_response.to_json())
                
            except WebSocketDisconnect:
                logger.info(f"üîå WebSocket {connection_id} –æ—Ç–∫–ª—é—á–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º")
                break
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ WebSocket —Ü–∏–∫–ª–µ {connection_id}: {e}")
                break
    
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ WebSocket {connection_id}: {e}")
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        await cleanup_connection(connection_id, ws_manager)


async def cleanup_connection(connection_id: str, ws_manager: WebSocketManager):
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ WebSocket"""
    try:
        connection = ws_manager.connections.get(connection_id)
        if not connection:
            return
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        disconnect_message = WebSocketMessage(
            type=EventType.USER_DISCONNECTED,
            data={
                "connection_id": connection_id,
                "user_id": connection.user_id,
                "disconnect_time": datetime.now(timezone.utc).isoformat()
            },
            timestamp=datetime.now(timezone.utc).isoformat()
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç –æ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for room in list(connection.rooms):
            if room != f"user_{connection.user_id}":  # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –ª–∏—á–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
                await ws_manager.send_to_room(room, disconnect_message)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
        for room in list(connection.rooms):
            await ws_manager.leave_room(connection_id, room)
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket –µ—Å–ª–∏ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç
        if connection.websocket.client_state == WebSocketState.CONNECTED:
            await connection.websocket.close()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        if connection_id in ws_manager.connections:
            del ws_manager.connections[connection_id]
            ws_manager.stats["active_connections"] -= 1
        
        logger.info(f"‚úÖ WebSocket {connection_id} –æ—á–∏—â–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ WebSocket {connection_id}: {e}")


@router.get("/ws/stats")
async def get_websocket_stats(
    ws_manager: WebSocketManager = Depends(get_websocket_manager)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏
    """
    try:
        stats = ws_manager.get_stats()
        
        return {
            "success": True,
            "data": {
                "websocket_stats": stats,
                "server_info": {
                    "is_running": ws_manager.is_running,
                    "max_connections": settings.WEBSOCKET_MAX_CONNECTIONS,
                    "server_time": datetime.now(timezone.utc).isoformat()
                }
            },
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è WebSocket —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É WebSocket"
        )


@router.get("/ws/rooms/{room_name}")
async def get_room_info(
    room_name: str,
    ws_manager: WebSocketManager = Depends(get_websocket_manager)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π WebSocket –∫–æ–º–Ω–∞—Ç–µ
    """
    try:
        room_info = ws_manager.get_room_info(room_name)
        
        return {
            "success": True,
            "data": {
                "room_name": room_name,
                "room_info": room_info
            },
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ {room_name}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ"
        )


@router.post("/ws/broadcast")
async def broadcast_message(
    message_type: str,
    data: Dict[str, Any],
    room: Optional[str] = None,
    user_id: Optional[str] = None,
    ws_manager: WebSocketManager = Depends(get_websocket_manager)
):
    """
    API endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    try:
        message = WebSocketMessage(
            type=message_type,
            data=data,
            timestamp=datetime.now(timezone.utc).isoformat(),
            room=room,
            user_id=user_id
        )
        
        sent_count = 0
        
        if user_id:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            sent_count = await ws_manager.send_to_user(user_id, message)
        elif room:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
            sent_count = await ws_manager.send_to_room(room, message)
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º
            sent_count = await ws_manager.broadcast(message)
        
        return {
            "success": True,
            "data": {
                "message_sent": True,
                "recipients_count": sent_count,
                "message_type": message_type,
                "target": user_id or room or "all"
            },
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )