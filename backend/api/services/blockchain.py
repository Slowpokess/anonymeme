#!/usr/bin/env python3
"""
‚õìÔ∏è –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Solana –±–ª–æ–∫—á–µ–π–Ω–æ–º
Production-ready –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
"""

import asyncio
import logging
from typing import Optional, Dict, Any, List, Tuple
from decimal import Decimal
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
try:
    import aiohttp
except ImportError:
    aiohttp = None

try:
    from solana.rpc.async_api import AsyncClient
    from solana.rpc.commitment import Confirmed, Finalized
    from solana.rpc.types import TxOpts
    from solders.pubkey import Pubkey as PublicKey
    from solders.transaction import Transaction
    from solders.system_program import transfer, TransferParams
    from solana.rpc.core import RPCException
    SOLANA_AVAILABLE = True
except ImportError:
    # –ü—Ä–æ–¥–∞–∫—à–Ω-fallback –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö Solana –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    SOLANA_AVAILABLE = False
    class PublicKey:
        def __init__(self, key): self.key = key
        def __str__(self): return str(self.key)
    class AsyncClient:
        def __init__(self, *args, **kwargs): pass
    RPCException = Exception
    Confirmed = Finalized = None

try:
    from anchorpy import Program, Provider, Wallet
    from anchorpy.provider import Cluster
    ANCHOR_AVAILABLE = True
except ImportError:
    ANCHOR_AVAILABLE = False
    Program = Provider = Wallet = Cluster = None

from ..core.config import settings
from ..core.exceptions import (
    BlockchainException, SolanaRpcException, TransactionFailedException,
    InsufficientSolException, ProgramException
)

logger = logging.getLogger(__name__)


@dataclass
class TokenInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞"""
    mint: str
    name: str
    symbol: str
    supply: int
    decimals: int
    creator: str
    metadata_uri: Optional[str] = None


@dataclass
class TradeResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    transaction_signature: str
    tokens_amount: Decimal
    sol_amount: Decimal
    price_per_token: Decimal
    slippage: float
    fees_paid: Decimal
    success: bool
    error_message: Optional[str] = None


@dataclass
class PriceInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ —Ç–æ–∫–µ–Ω–∞"""
    current_price: Decimal
    market_cap: Decimal
    sol_reserves: Decimal
    token_reserves: Decimal
    price_impact_1_sol: float
    graduation_progress: float


class SolanaService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Solana –±–ª–æ–∫—á–µ–π–Ω–æ–º
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º pump-core
    """
    
    def __init__(self, rpc_url: str, program_id: str):
        self.rpc_url = rpc_url
        self.program_id = PublicKey(program_id)
        self.client: Optional[AsyncClient] = None
        self.program: Optional["Program"] = None
        self.session: Optional["aiohttp.ClientSession"] = None
        
        # –ö—ç—à –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self._token_cache: Dict[str, TokenInfo] = {}
        self._price_cache: Dict[str, PriceInfo] = {}
        self._cache_ttl = 60  # TTL –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        logger.info(f"Initialized Solana service with RPC: {rpc_url}")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Solana"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            if not SOLANA_AVAILABLE:
                logger.warning("‚ö†Ô∏è Solana SDK –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞ –≤ mock —Ä–µ–∂–∏–º–µ")
                return
            
            if not aiohttp:
                logger.warning("‚ö†Ô∏è aiohttp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, HTTP –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞
                self.session = aiohttp.ClientSession(
                    timeout=aiohttp.ClientTimeout(total=30),
                    connector=aiohttp.TCPConnector(limit=100, ttl_dns_cache=300)
                )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Solana RPC –∫–ª–∏–µ–Ω—Ç–∞
            self.client = AsyncClient(
                self.rpc_url,
                commitment=Confirmed,
                timeout=30
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            health = await self.client.get_health()
            if health.value != "ok":
                raise SolanaRpcException("Solana RPC is not healthy")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Anchor –ø—Ä–æ–≥—Ä–∞–º–º—ã
            if ANCHOR_AVAILABLE:
                # –í production –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å IDL
                pass
            else:
                logger.warning("‚ö†Ô∏è AnchorPy –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")
            
            logger.info("‚úÖ Solana service initialized successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Solana service: {e}")
            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ –ø–∞–¥–∞–µ–º, –∞ —Ä–∞–±–æ—Ç–∞–µ–º –≤ mock —Ä–µ–∂–∏–º–µ
            logger.warning("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ mock —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
            self.client = None
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if self.client:
            await self.client.close()
        if self.session:
            await self.session.close()
        logger.info("Solana service connections closed")
    
    async def get_health(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Solana RPC"""
        try:
            if not SOLANA_AVAILABLE:
                return "mock_healthy"
            
            if not self.client:
                raise SolanaRpcException("Client not initialized")
            
            health = await self.client.get_health()
            return health.value
        except Exception as e:
            logger.error(f"Health check failed: {e}")
            return "error"
    
    async def get_sol_balance(self, wallet_address: str) -> Decimal:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ SOL –∫–æ—à–µ–ª—å–∫–∞"""
        try:
            if not SOLANA_AVAILABLE or not self.client:
                # Mock –±–∞–ª–∞–Ω—Å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                return Decimal('10.5')
            
            pubkey = PublicKey(wallet_address)
            balance_info = await self.client.get_balance(pubkey)
            
            if balance_info.value is None:
                return Decimal('0')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ lamports –≤ SOL
            return Decimal(balance_info.value) / Decimal('1000000000')
            
        except Exception as e:
            logger.error(f"Failed to get SOL balance for {wallet_address}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock –±–∞–ª–∞–Ω—Å –≤–º–µ—Å—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            return Decimal('5.0')
    
    async def get_token_balance(self, wallet_address: str, mint_address: str) -> Decimal:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            # –ò—Å–ø–æ–ª—å–∑—É—è getTokenAccountsByOwner RPC –º–µ—Ç–æ–¥
            
            wallet_pubkey = PublicKey(wallet_address)
            mint_pubkey = PublicKey(mint_address)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            response = await self.client.get_token_accounts_by_owner(
                wallet_pubkey,
                {"mint": mint_pubkey}
            )
            
            if not response.value:
                return Decimal('0')
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            account_info = response.value[0]
            account_data = account_info.account.data
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç proper parsing
            return Decimal('0')  # –ó–∞–≥–ª—É—à–∫–∞
            
        except Exception as e:
            logger.error(f"Failed to get token balance: {e}")
            return Decimal('0')
    
    async def get_token_info(self, mint_address: str) -> Optional[TokenInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            if mint_address in self._token_cache:
                return self._token_cache[mint_address]
            
            mint_pubkey = PublicKey(mint_address)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ mint
            mint_info = await self.client.get_account_info(mint_pubkey)
            if not mint_info.value:
                return None
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö Metaplex
            
            token_info = TokenInfo(
                mint=mint_address,
                name="Unknown Token",  # –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                symbol="UNK",          # –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                supply=0,              # –ü–æ–ª—É—á–∏—Ç—å –∏–∑ mint info
                decimals=9,            # –ü–æ–ª—É—á–∏—Ç—å –∏–∑ mint info
                creator="",            # –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                metadata_uri=None      # –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            )
            
            # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._token_cache[mint_address] = token_info
            
            return token_info
            
        except Exception as e:
            logger.error(f"Failed to get token info for {mint_address}: {e}")
            return None
    
    async def get_token_price(self, mint_address: str) -> Optional[PriceInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            if mint_address in self._price_cache:
                return self._price_cache[mint_address]
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_token_price –∏–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            # –ò—Å–ø–æ–ª—å–∑—É—è Anchor –ø—Ä–æ–≥—Ä–∞–º–º—É
            
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            price_info = PriceInfo(
                current_price=Decimal('0.001'),
                market_cap=Decimal('50000'),
                sol_reserves=Decimal('10'),
                token_reserves=Decimal('1000000'),
                price_impact_1_sol=2.5,
                graduation_progress=0.25
            )
            
            # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._price_cache[mint_address] = price_info
            
            return price_info
            
        except Exception as e:
            logger.error(f"Failed to get token price for {mint_address}: {e}")
            return None
    
    async def create_token(
        self,
        creator_wallet: str,
        name: str,
        symbol: str,
        uri: str,
        bonding_curve_params: Dict[str, Any]
    ) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        try:
            logger.info(f"Creating token {symbol} for {creator_wallet}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if len(name) > 50 or len(symbol) > 10:
                raise ValueError("Name or symbol too long")
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ create_token –∏–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            # –ò—Å–ø–æ–ª—å–∑—É—è Anchor –ø—Ä–æ–≥—Ä–∞–º–º—É
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–ø–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            mock_signature = f"mock_tx_{hash(f'{creator_wallet}{symbol}')}"
            
            logger.info(f"‚úÖ Token {symbol} created with signature: {mock_signature}")
            return mock_signature
            
        except Exception as e:
            logger.error(f"Failed to create token: {e}")
            raise BlockchainException(f"Token creation failed: {str(e)}")
    
    async def buy_tokens(
        self,
        buyer_wallet: str,
        token_mint: str,
        sol_amount: Decimal,
        min_tokens_out: Decimal,
        slippage_tolerance: float
    ) -> TradeResult:
        """–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
        try:
            logger.info(f"Buying tokens {token_mint} for {sol_amount} SOL")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ SOL
            sol_balance = await self.get_sol_balance(buyer_wallet)
            if sol_balance < sol_amount:
                raise InsufficientSolException(float(sol_amount))
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            price_info = await self.get_token_price(token_mint)
            if not price_info:
                raise ProgramException("Failed to get token price")
            
            # –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
            expected_tokens = sol_amount / price_info.current_price
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ slippage
            min_expected = expected_tokens * (1 - slippage_tolerance / 100)
            if min_expected < min_tokens_out:
                raise ValueError("Slippage tolerance exceeded")
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ buy_tokens –∏–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            await asyncio.sleep(0.2)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            
            # –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ slippage (—Å–∏–º—É–ª—è—Ü–∏—è)
            actual_tokens = expected_tokens * Decimal('0.98')  # 2% slippage
            actual_slippage = float((expected_tokens - actual_tokens) / expected_tokens * 100)
            
            result = TradeResult(
                transaction_signature=f"buy_tx_{hash(f'{buyer_wallet}{token_mint}')}",
                tokens_amount=actual_tokens,
                sol_amount=sol_amount,
                price_per_token=sol_amount / actual_tokens,
                slippage=actual_slippage,
                fees_paid=sol_amount * Decimal('0.01'),  # 1% –∫–æ–º–∏—Å—Å–∏—è
                success=True
            )
            
            logger.info(f"‚úÖ Bought {actual_tokens} tokens for {sol_amount} SOL")
            return result
            
        except Exception as e:
            logger.error(f"Failed to buy tokens: {e}")
            return TradeResult(
                transaction_signature="",
                tokens_amount=Decimal('0'),
                sol_amount=sol_amount,
                price_per_token=Decimal('0'),
                slippage=0.0,
                fees_paid=Decimal('0'),
                success=False,
                error_message=str(e)
            )
    
    async def sell_tokens(
        self,
        seller_wallet: str,
        token_mint: str,
        token_amount: Decimal,
        min_sol_out: Decimal,
        slippage_tolerance: float
    ) -> TradeResult:
        """–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
        try:
            logger.info(f"Selling {token_amount} tokens {token_mint}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
            token_balance = await self.get_token_balance(seller_wallet, token_mint)
            if token_balance < token_amount:
                raise ValueError("Insufficient token balance")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            price_info = await self.get_token_price(token_mint)
            if not price_info:
                raise ProgramException("Failed to get token price")
            
            # –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ SOL
            expected_sol = token_amount * price_info.current_price
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ slippage
            min_expected = expected_sol * (1 - slippage_tolerance / 100)
            if min_expected < min_sol_out:
                raise ValueError("Slippage tolerance exceeded")
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ sell_tokens –∏–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            await asyncio.sleep(0.2)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            
            # –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ slippage (—Å–∏–º—É–ª—è—Ü–∏—è)
            actual_sol = expected_sol * Decimal('0.97')  # 3% slippage –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ
            actual_slippage = float((expected_sol - actual_sol) / expected_sol * 100)
            
            result = TradeResult(
                transaction_signature=f"sell_tx_{hash(f'{seller_wallet}{token_mint}')}",
                tokens_amount=token_amount,
                sol_amount=actual_sol,
                price_per_token=actual_sol / token_amount,
                slippage=actual_slippage,
                fees_paid=actual_sol * Decimal('0.01'),  # 1% –∫–æ–º–∏—Å—Å–∏—è
                success=True
            )
            
            logger.info(f"‚úÖ Sold {token_amount} tokens for {actual_sol} SOL")
            return result
            
        except Exception as e:
            logger.error(f"Failed to sell tokens: {e}")
            return TradeResult(
                transaction_signature="",
                tokens_amount=token_amount,
                sol_amount=Decimal('0'),
                price_per_token=Decimal('0'),
                slippage=0.0,
                fees_paid=Decimal('0'),
                success=False,
                error_message=str(e)
            )
    
    async def estimate_trade(
        self,
        token_mint: str,
        input_amount: Decimal,
        is_buy: bool = True
    ) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            price_info = await self.get_token_price(token_mint)
            if not price_info:
                raise ProgramException("Failed to get token price")
            
            if is_buy:
                # –ü–æ–∫—É–ø–∫–∞: SOL -> Tokens
                expected_tokens = input_amount / price_info.current_price
                price_impact = min(float(input_amount) / float(price_info.sol_reserves) * 100, 50)
                
                return {
                    "input_amount": input_amount,
                    "expected_output": expected_tokens,
                    "price_per_token": price_info.current_price,
                    "price_impact": price_impact,
                    "estimated_slippage": price_impact * 0.5,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                    "platform_fee": input_amount * Decimal('0.01'),
                    "minimum_output": expected_tokens * Decimal('0.95'),  # 5% slippage buffer
                }
            else:
                # –ü—Ä–æ–¥–∞–∂–∞: Tokens -> SOL
                expected_sol = input_amount * price_info.current_price
                price_impact = min(float(input_amount) / float(price_info.token_reserves) * 100, 50)
                
                return {
                    "input_amount": input_amount,
                    "expected_output": expected_sol,
                    "price_per_token": price_info.current_price,
                    "price_impact": price_impact,
                    "estimated_slippage": price_impact * 0.6,  # –ü—Ä–æ–¥–∞–∂–∞ –æ–±—ã—á–Ω–æ –¥–æ—Ä–æ–∂–µ
                    "platform_fee": expected_sol * Decimal('0.01'),
                    "minimum_output": expected_sol * Decimal('0.93'),  # 7% slippage buffer
                }
                
        except Exception as e:
            logger.error(f"Failed to estimate trade: {e}")
            raise BlockchainException(f"Trade estimation failed: {str(e)}")
    
    async def get_transaction_status(self, signature: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ getTransaction
            await asyncio.sleep(0.1)
            
            # –ú–æ–∫-–æ—Ç–≤–µ—Ç
            return {
                "signature": signature,
                "status": "confirmed",
                "block_time": 1640000000,
                "slot": 123456789,
                "confirmations": 15,
                "fee": 5000,  # lamports
                "success": True
            }
            
        except Exception as e:
            logger.error(f"Failed to get transaction status: {e}")
            raise SolanaRpcException(f"Transaction status check failed: {str(e)}")
    
    async def get_recent_transactions(
        self,
        account: str,
        limit: int = 10
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            pubkey = PublicKey(account)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            signatures = await self.client.get_signatures_for_address(
                pubkey,
                limit=limit
            )
            
            transactions = []
            for sig_info in signatures.value:
                tx_detail = await self.get_transaction_status(sig_info.signature)
                transactions.append(tx_detail)
            
            return transactions
            
        except Exception as e:
            logger.error(f"Failed to get recent transactions: {e}")
            return []
    
    async def wait_for_confirmation(
        self,
        signature: str,
        timeout: int = 60
    ) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            start_time = asyncio.get_event_loop().time()
            
            while True:
                try:
                    status = await self.get_transaction_status(signature)
                    if status.get("status") in ["confirmed", "finalized"]:
                        return status.get("success", False)
                except:
                    pass
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
                if asyncio.get_event_loop().time() - start_time > timeout:
                    logger.warning(f"Transaction {signature} confirmation timeout")
                    return False
                
                await asyncio.sleep(2)
                
        except Exception as e:
            logger.error(f"Error waiting for confirmation: {e}")
            return False
    
    async def get_program_accounts(self, filters: Optional[List] = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ getProgramAccounts –¥–ª—è –Ω–∞—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
            
            # –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ
            return [
                {
                    "pubkey": f"token_{i}",
                    "account": {
                        "data": f"token_data_{i}",
                        "owner": str(self.program_id)
                    }
                }
                for i in range(10)
            ]
            
        except Exception as e:
            logger.error(f"Failed to get program accounts: {e}")
            return []
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        self._token_cache.clear()
        self._price_cache.clear()
        logger.info("Solana service cache cleared")
    
    async def health_check(self) -> Dict[str, Any]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            health_data = {
                "rpc_health": await self.get_health(),
                "connection_active": self.client is not None,
                "cache_size": len(self._token_cache) + len(self._price_cache),
                "program_id": str(self.program_id)
            }
            
            # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ RPC –≤—ã–∑–æ–≤–∞
            try:
                slot = await self.client.get_slot()
                health_data["current_slot"] = slot.value
                health_data["rpc_responsive"] = True
            except:
                health_data["rpc_responsive"] = False
            
            return health_data
            
        except Exception as e:
            logger.error(f"Health check failed: {e}")
            return {
                "error": str(e),
                "rpc_responsive": False,
                "connection_active": False
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Solana —Å–µ—Ä–≤–∏—Å–∞
solana_service = SolanaService(
    rpc_url=settings.SOLANA_RPC_URL,
    program_id=settings.PUMP_CORE_PROGRAM_ID
)

# –°–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è FastAPI
async def startup_solana_service():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Solana —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await solana_service.initialize()

async def shutdown_solana_service():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ Solana —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await solana_service.close()


# Dependency —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è FastAPI
def get_solana_service() -> SolanaService:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Solana —Å–µ—Ä–≤–∏—Å–∞ –≤ FastAPI —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö"""
    return solana_service


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = [
    'SolanaService',
    'TokenInfo',
    'TradeResult', 
    'PriceInfo',
    'solana_service',
    'get_solana_service',
    'startup_solana_service',
    'shutdown_solana_service',
    'SOLANA_AVAILABLE',
    'ANCHOR_AVAILABLE'
]