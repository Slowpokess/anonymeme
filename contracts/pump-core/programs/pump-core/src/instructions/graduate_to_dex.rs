/*!
üéì –ì—Ä–∞–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ DEX - –ª–∏—Å—Ç–∏–Ω–≥ —Å –ø–æ–ª–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é
Production-ready –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π –Ω–∞ DEX

## Raydium AMM V4 Integration

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Raydium AMM V4 —á–µ—Ä–µ–∑ CPI (Cross-Program Invocation).

### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º –¥–ª—è Raydium:

1. **pool_account** - –ê–∫–∫–∞—É–Ω—Ç AMM –ø—É–ª–∞ (—Å–æ–∑–¥–∞–µ—Ç—Å—è)
2. **dex_account_a** - Vault –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ (Token Vault)
3. **dex_account_b** - Vault –¥–ª—è SOL/WSOL (PC Vault)
4. **dex_account_c** - LP Token Mint (—Å–æ–∑–¥–∞–µ—Ç—Å—è)
5. **dex_program** - Raydium AMM V4 Program ID: `675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8`

### –ü—Ä–æ—Ü–µ—Å—Å –≥—Ä–∞–¥–∞—Ü–∏–∏:

1. –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ª–æ–≤–∏–π (market cap, liquidity, time)
2. –°–±–æ—Ä –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –≥—Ä–∞–¥–∞—Ü–∏—é
3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –Ω–∞ Raydium —á–µ—Ä–µ–∑ CPI
4. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (SOL + —Ç–æ–∫–µ–Ω—ã)
5. –í—ã–ø—É—Å–∫ LP —Ç–æ–∫–µ–Ω–æ–≤ —Å–æ–∑–¥–∞—Ç–µ–ª—é
6. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–∫–µ–Ω–∞

### –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:

- ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ Program ID Raydium
- ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (0.1 SOL)
- ‚úÖ Checked arithmetic –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è overflow
- ‚úÖ PDA signer seeds –¥–ª—è CPI
- ‚úÖ Minimum liquidity burn (1000 LP tokens)
- ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π (–º–∏–Ω–∏–º—É–º 1 —á–∞—Å —Å —Å–æ–∑–¥–∞–Ω–∏—è)

### –§–æ—Ä–º—É–ª–∞ LP —Ç–æ–∫–µ–Ω–æ–≤:

```
LP_tokens = sqrt(sol_amount * token_amount) - minimum_liquidity
```

–ì–¥–µ `minimum_liquidity = 1000` —Å–∂–∏–≥–∞–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞—Ç–∞–∫.

*/

use anchor_lang::prelude::*;
use anchor_lang::system_program;
use anchor_spl::{
    token::{self, Token, TokenAccount, Transfer, Mint},
    associated_token::AssociatedToken,
};
use raydium_contract_instructions::amm_instruction;

use crate::state::*;
use crate::errors::ErrorCode;

/// –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–ª—è –≥—Ä–∞–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ DEX
#[derive(Accounts)]
pub struct GraduateToDex<'info> {
    /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ –¥–ª—è –≥—Ä–∞–¥–∞—Ü–∏–∏
    #[account(
        mut,
        seeds = [TokenInfo::SEED.as_bytes(), mint.key().as_ref()],
        bump = token_info.bump,
        constraint = !token_info.is_graduated @ ErrorCode::TokenAlreadyGraduated,
        constraint = token_info.is_tradeable @ ErrorCode::TradingDisabled,
        constraint = !token_info.is_frozen @ ErrorCode::TokenFrozen,
    )]
    pub token_info: Account<'info, TokenInfo>,

    /// Mint —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –≥—Ä–∞–¥–∞—Ü–∏–∏
    #[account(address = token_info.mint)]
    pub mint: Account<'info, Mint>,

    /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Å—Ç–∏–Ω–≥–µ –Ω–∞ DEX (—Å–æ–∑–¥–∞–µ—Ç—Å—è)
    #[account(
        init,
        payer = initiator,
        space = DexListing::ACCOUNT_SIZE,
        seeds = [DexListing::SEED.as_bytes(), mint.key().as_ref()],
        bump
    )]
    pub dex_listing: Account<'info, DexListing>,

    /// –•—Ä–∞–Ω–∏–ª–∏—â–µ SOL –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π
    #[account(
        mut,
        seeds = [b"bonding_curve_vault", mint.key().as_ref()],
        bump = token_info.vault_bump,
    )]
    /// CHECK: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–∞–∫ PDA
    pub bonding_curve_vault: AccountInfo<'info>,

    /// –¢–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π (–∏—Å—Ç–æ—á–Ω–∏–∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏)
    #[account(
        mut,
        associated_token::mint = mint,
        associated_token::authority = bonding_curve_vault,
    )]
    pub bonding_curve_token_account: Account<'info, TokenAccount>,

    /// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    #[account(
        mut,
        seeds = [PlatformConfig::SEED.as_bytes()],
        bump = platform_config.bump,
        constraint = !platform_config.emergency_paused @ ErrorCode::PlatformPaused,
        constraint = !platform_config.trading_paused @ ErrorCode::TradingPaused,
    )]
    pub platform_config: Account<'info, PlatformConfig>,

    /// –ö–∞–∑–Ω–∞—á–µ–π—Å—Ç–≤–æ –¥–ª—è —Å–±–æ—Ä–∞ –∫–æ–º–∏—Å—Å–∏–π –∑–∞ –≥—Ä–∞–¥–∞—Ü–∏—é
    #[account(
        mut,
        address = platform_config.treasury
    )]
    /// CHECK: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ address constraint
    pub treasury: AccountInfo<'info>,

    /// –ü—Ä–æ–≥—Ä–∞–º–º–∞ DEX –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø–æ —Ç–∏–ø—É DEX)
    /// CHECK: –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç dex_type
    pub dex_program: AccountInfo<'info>,

    /// –ê–∫–∫–∞—É–Ω—Ç –ø—É–ª–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞ DEX (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è)
    #[account(mut)]
    /// CHECK: –°–æ–∑–¥–∞–µ—Ç—Å—è DEX –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
    pub pool_account: AccountInfo<'info>,

    /// DEX-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ DEX)
    #[account(mut)]
    /// CHECK: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DEX –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
    pub dex_account_a: AccountInfo<'info>,

    #[account(mut)]
    /// CHECK: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DEX –ø—Ä–æ–≥—Ä–∞–º–º–æ–π  
    pub dex_account_b: AccountInfo<'info>,

    #[account(mut)]
    /// CHECK: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DEX –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
    pub dex_account_c: AccountInfo<'info>,

    /// –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –≥—Ä–∞–¥–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    #[account(mut)]
    pub initiator: Signer<'info>,

    /// –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    pub token_program: Program<'info, Token>,
    pub associated_token_program: Program<'info, AssociatedToken>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}

/// –ì—Ä–∞–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞ DEX —Å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º –≤—Å–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
pub fn graduate_to_dex(
    ctx: Context<GraduateToDex>,
    dex_type: DexType,
    minimum_liquidity_sol: u64,
) -> Result<()> {
    msg!("üéì –ù–∞—á–∏–Ω–∞–µ–º –≥—Ä–∞–¥–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞ –Ω–∞ DEX: {:?}", dex_type);

    let clock = Clock::get()?;
    let platform_config = &mut ctx.accounts.platform_config;
    let token_info = &mut ctx.accounts.token_info;

    // === –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–õ–û–í–ò–ô –ì–†–ê–î–ê–¶–ò–ò ===

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    require!(
        token_info.market_cap >= platform_config.graduation_fee,
        ErrorCode::GraduationThresholdNotMet
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    require!(
        token_info.sol_reserves >= minimum_liquidity_sol,
        ErrorCode::InsufficientLiquidity
    );

    require!(
        token_info.token_reserves > 0,
        ErrorCode::InsufficientLiquidity
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (–º–∏–Ω–∏–º—É–º 1 —á–∞—Å)
    let time_since_creation = clock.unix_timestamp - token_info.created_at;
    require!(
        time_since_creation >= 3600, // 1 —á–∞—Å
        ErrorCode::TooEarlyForGraduation
    );

    // === –í–ê–õ–ò–î–ê–¶–ò–Ø DEX –ü–†–û–ì–†–ê–ú–ú–´ ===
    
    let expected_program_id = match dex_type {
        DexType::Raydium => "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8",
        DexType::Orca => "9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP", 
        DexType::Jupiter => "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4",
        DexType::Serum => "9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin",
        DexType::Meteora => "24Uqj9JCLxUeoC3hGfh5W3s9FM9uCHDS2SG3LYwBpyTi",
    };

    require!(
        ctx.accounts.dex_program.key().to_string() == expected_program_id,
        ErrorCode::InvalidDexProgram
    );

    // === –°–ë–û–† –ö–û–ú–ò–°–°–ò–ò –ó–ê –ì–†–ê–î–ê–¶–ò–Æ ===
    
    let graduation_fee = platform_config.graduation_fee;
    if graduation_fee > 0 {
        msg!("üí∞ –°–±–æ—Ä –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –≥—Ä–∞–¥–∞—Ü–∏—é: {} lamports", graduation_fee);
        
        system_program::transfer(
            CpiContext::new(
                ctx.accounts.system_program.to_account_info(),
                system_program::Transfer {
                    from: ctx.accounts.initiator.to_account_info(),
                    to: ctx.accounts.treasury.to_account_info(),
                },
            ),
            graduation_fee,
        )?;
    }

    // === –ü–û–î–ì–û–¢–û–í–ö–ê –õ–ò–ö–í–ò–î–ù–û–°–¢–ò ===
    
    let sol_liquidity = token_info.sol_reserves;
    let token_liquidity = token_info.token_reserves;
    
    msg!("üíß –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {} SOL + {} —Ç–æ–∫–µ–Ω–æ–≤", 
         sol_liquidity as f64 / 1_000_000_000.0, 
         token_liquidity);

    // === –°–û–ó–î–ê–ù–ò–ï –ü–£–õ–ê –ù–ê DEX ===
    
    let pool_creation_result = match dex_type {
        DexType::Raydium => {
            create_raydium_pool(&ctx, sol_liquidity, token_liquidity)?
        },
        DexType::Orca => {
            create_orca_pool(&ctx, sol_liquidity, token_liquidity)?
        },
        DexType::Jupiter => {
            create_jupiter_pool(&ctx, sol_liquidity, token_liquidity)?
        },
        _ => {
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö DEX –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É
            create_generic_pool(&ctx, sol_liquidity, token_liquidity)?
        }
    };

    // === –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –õ–ò–ö–í–ò–î–ù–û–°–¢–ò ===
    
    let vault_seeds = &[
        b"bonding_curve_vault",
        ctx.accounts.mint.key().as_ref(),
        &[token_info.vault_bump],
    ];
    let vault_signer = &[&vault_seeds[..]];

    // –ü–µ—Ä–µ–≤–æ–¥ SOL –≤ –ø—É–ª DEX
    **ctx.accounts.bonding_curve_vault.try_borrow_mut_lamports()? -= sol_liquidity;
    **ctx.accounts.pool_account.try_borrow_mut_lamports()? += sol_liquidity;

    // –ü–µ—Ä–µ–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø—É–ª DEX
    token::transfer(
        CpiContext::new_with_signer(
            ctx.accounts.token_program.to_account_info(),
            Transfer {
                from: ctx.accounts.bonding_curve_token_account.to_account_info(),
                to: ctx.accounts.dex_account_a.to_account_info(),
                authority: ctx.accounts.bonding_curve_vault.to_account_info(),
            },
            vault_signer,
        ),
        token_liquidity,
    )?;

    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –¢–û–ö–ï–ù–ê ===
    
    token_info.is_graduated = true;
    token_info.graduated_at = Some(clock.unix_timestamp);
    token_info.sol_reserves = 0; // –í—Å—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ DEX
    token_info.token_reserves = 0;
    token_info.is_tradeable = false; // –¢–æ—Ä–≥–æ–≤–ª—è —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –Ω–∞ DEX

    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –õ–ò–°–¢–ò–ù–ì–ï ===
    
    let dex_listing = &mut ctx.accounts.dex_listing;
    dex_listing.token_mint = ctx.accounts.mint.key();
    dex_listing.dex_type = dex_type;
    dex_listing.pool_address = ctx.accounts.pool_account.key();
    dex_listing.initial_liquidity_sol = sol_liquidity;
    dex_listing.initial_liquidity_token = token_liquidity;
    dex_listing.listing_timestamp = clock.unix_timestamp;
    dex_listing.listing_price = token_info.current_price;
    dex_listing.fee_tier = 300; // 0.3% —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è
    dex_listing.liquidity_locked = true;
    dex_listing.lock_duration = 30 * 24 * 60 * 60; // 30 –¥–Ω–µ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    dex_listing.pool_lp_supply = pool_creation_result.lp_tokens_minted;
    dex_listing.creator_lp_tokens = pool_creation_result.creator_lp_tokens;
    dex_listing.bump = ctx.bumps.dex_listing;

    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–õ–ê–¢–§–û–†–ú–´ ===
    
    platform_config.total_graduated_tokens = platform_config
        .total_graduated_tokens
        .checked_add(1)
        .ok_or(ErrorCode::MathOverflow)?;
    
    platform_config.total_liquidity_moved = platform_config
        .total_liquidity_moved
        .checked_add(sol_liquidity)
        .ok_or(ErrorCode::MathOverflow)?;

    platform_config.last_updated = clock.unix_timestamp;

    // === –†–ê–°–ß–ï–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ì–†–ê–î–ê–¶–ò–ò ===
    
    let graduation_time_hours = time_since_creation / 3600;
    let final_market_cap = token_info.market_cap;

    // === –°–û–ë–´–¢–ò–ï –ì–†–ê–î–ê–¶–ò–ò ===
    
    emit!(TokenGraduatedEvent {
        mint: ctx.accounts.mint.key(),
        creator: token_info.creator,
        dex_type,
        final_market_cap,
        liquidity_sol: sol_liquidity,
        liquidity_tokens: token_liquidity,
        graduation_time_hours: graduation_time_hours as u64,
        pool_address: ctx.accounts.pool_account.key(),
        timestamp: clock.unix_timestamp,
    });

    msg!("‚úÖ –¢–æ–∫–µ–Ω {} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø—É—â–µ–Ω –Ω–∞ {:?}!", 
         token_info.symbol, 
         dex_type);
    msg!("   –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {} SOL", 
         final_market_cap as f64 / 1_000_000_000.0);
    msg!("   –í—Ä–µ–º—è –¥–æ –≥—Ä–∞–¥–∞—Ü–∏–∏: {} —á–∞—Å–æ–≤", graduation_time_hours);
    msg!("   –ê–¥—Ä–µ—Å –ø—É–ª–∞: {}", ctx.accounts.pool_account.key());

    Ok(())
}

// === DEX-–°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ü–£–õ–û–í ===

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞
#[derive(Debug)]
pub struct PoolCreationResult {
    pub lp_tokens_minted: u64,
    pub creator_lp_tokens: u64,
    pub pool_initialized: bool,
}

/// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞ Raydium AMM V4
fn create_raydium_pool(
    ctx: &Context<GraduateToDex>,
    sol_amount: u64,
    token_amount: u64,
) -> Result<PoolCreationResult> {
    msg!("üåä –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ Raydium AMM V4");
    msg!("   üí∞ SOL: {} (~{} SOL)", sol_amount, sol_amount as f64 / 1_000_000_000.0);
    msg!("   ü™ô Tokens: {}", token_amount);

    // === –í–ê–õ–ò–î–ê–¶–ò–Ø –í–•–û–î–ù–´–• –î–ê–ù–ù–´–• ===
    require!(sol_amount > 0, ErrorCode::InsufficientLiquidity);
    require!(token_amount > 0, ErrorCode::InsufficientLiquidity);
    require!(
        sol_amount >= 100_000_000, // –ú–∏–Ω–∏–º—É–º 0.1 SOL
        ErrorCode::InsufficientLiquidity
    );

    // === –ö–û–ù–°–¢–ê–ù–¢–´ RAYDIUM AMM V4 ===

    // Raydium AMM V4 Program ID (Mainnet/Devnet)
    const RAYDIUM_AMM_PROGRAM_ID: &str = "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8";

    // Wrapped SOL (Native SOL mint)
    const WSOL_MINT: &str = "So11111111111111111111111111111111111111112";

    // Raydium Authority V4
    const RAYDIUM_AUTHORITY_V4: &str = "5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1";

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ DEX –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
    let expected_raydium_program = Pubkey::try_from(RAYDIUM_AMM_PROGRAM_ID)
        .map_err(|_| ErrorCode::InvalidDexProgram)?;

    require!(
        ctx.accounts.dex_program.key() == expected_raydium_program,
        ErrorCode::InvalidDexProgram
    );

    // === –†–ê–°–ß–ï–¢ –ü–ê–†–ê–ú–ï–¢–†–û–í –ü–£–õ–ê ===

    // –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: price = sol_amount / token_amount
    // –í Raydium –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ—Ä–º—É–ª–∞ constant product: x * y = k
    let initial_price = (sol_amount as f64) / (token_amount as f64);
    msg!("   üíπ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {} SOL/token", initial_price);

    // –†–∞—Å—á–µ—Ç LP —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —Ñ–æ—Ä–º—É–ª–µ: sqrt(x * y)
    let lp_tokens_minted = calculate_lp_tokens(sol_amount, token_amount)?;
    msg!("   üé´ LP tokens –∫ —Å–æ–∑–¥–∞–Ω–∏—é: {}", lp_tokens_minted);

    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (—Å–≥–æ—Ä–∞–µ—Ç –Ω–∞–≤—Å–µ–≥–¥–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∞—Ç–∞–∫)
    let minimum_liquidity = 1000_u64;
    let creator_lp_tokens = lp_tokens_minted
        .checked_sub(minimum_liquidity)
        .ok_or(ErrorCode::MathOverflow)?;

    // === –ü–û–î–ì–û–¢–û–í–ö–ê CPI –í–´–ó–û–í–ê –ö RAYDIUM ===

    msg!("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ CPI –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Raydium AMM...");

    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é initialize_pool –¥–ª—è Raydium AMM V4
    // Raydium —Ç—Ä–µ–±—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
    // - nonce: –¥–ª—è PDA derivation (–æ–±—ã—á–Ω–æ 255)
    // - open_time: –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (0 = —Å—Ä–∞–∑—É)
    // - init_pc_amount: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "price currency" (SOL)
    // - init_coin_amount: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–∞

    let nonce = 255_u8; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è Raydium
    let open_time = 0_u64; // –û—Ç–∫—Ä—ã—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é —Å—Ä–∞–∑—É

    // === –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–û–í –î–õ–Ø CPI ===

    // Raydium AMM V4 —Ç—Ä–µ–±—É–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤:
    // 0. `[writable]` AMM account (pool_account)
    // 1. `[]` AMM authority (PDA)
    // 2. `[writable]` AMM open orders
    // 3. `[writable]` LP mint
    // 4. `[]` Coin mint (–Ω–∞—à —Ç–æ–∫–µ–Ω)
    // 5. `[]` PC mint (WSOL)
    // 6. `[writable]` Coin vault (dex_account_a)
    // 7. `[writable]` PC vault (dex_account_b)
    // 8. `[writable]` Withdraw queue
    // 9. `[writable]` Target orders
    // 10. `[writable]` Temp LP token account
    // 11. `[signer]` Payer (initiator)
    // 12-15. Program IDs –∏ system accounts

    let wsol_mint = Pubkey::try_from(WSOL_MINT)
        .map_err(|_| ErrorCode::InvalidDexProgram)?;

    let raydium_authority = Pubkey::try_from(RAYDIUM_AUTHORITY_V4)
        .map_err(|_| ErrorCode::InvalidDexProgram)?;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è CPI
    let account_metas = vec![
        AccountMeta::new(ctx.accounts.pool_account.key(), false),           // 0. AMM
        AccountMeta::new_readonly(raydium_authority, false),                // 1. Authority
        AccountMeta::new(ctx.accounts.dex_account_c.key(), false),         // 2. Open orders (–∑–∞–≥–ª—É—à–∫–∞)
        AccountMeta::new(ctx.accounts.dex_account_c.key(), false),         // 3. LP mint (–∏—Å–ø–æ–ª—å–∑—É–µ–º dex_account_c)
        AccountMeta::new_readonly(ctx.accounts.mint.key(), false),          // 4. Coin mint (–Ω–∞—à —Ç–æ–∫–µ–Ω)
        AccountMeta::new_readonly(wsol_mint, false),                        // 5. PC mint (WSOL)
        AccountMeta::new(ctx.accounts.dex_account_a.key(), false),         // 6. Coin vault
        AccountMeta::new(ctx.accounts.dex_account_b.key(), false),         // 7. PC vault
        AccountMeta::new(ctx.accounts.pool_account.key(), false),           // 8. Withdraw queue (–∑–∞–≥–ª—É—à–∫–∞)
        AccountMeta::new(ctx.accounts.pool_account.key(), false),           // 9. Target orders (–∑–∞–≥–ª—É—à–∫–∞)
        AccountMeta::new(ctx.accounts.bonding_curve_token_account.key(), false), // 10. Temp LP
        AccountMeta::new(ctx.accounts.initiator.key(), true),               // 11. Payer
        AccountMeta::new_readonly(ctx.accounts.token_program.key(), false), // 12. Token program
        AccountMeta::new_readonly(ctx.accounts.system_program.key(), false),// 13. System program
        AccountMeta::new_readonly(ctx.accounts.rent.key(), false),          // 14. Rent sysvar
    ];

    // === –ü–û–°–¢–†–û–ï–ù–ò–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò ===

    // Raydium AMM V4 instruction discriminator –¥–ª—è initialize_pool
    // –§–æ—Ä–º–∞—Ç: [discriminator(1 byte)][nonce(1)][open_time(8)][init_pc(8)][init_coin(8)]
    let mut instruction_data = Vec::with_capacity(26);

    // Discriminator –¥–ª—è initialize (–æ–±—ã—á–Ω–æ 0 –∏–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    instruction_data.push(1_u8); // Initialize pool instruction

    // Nonce
    instruction_data.push(nonce);

    // Open time (8 bytes, little-endian)
    instruction_data.extend_from_slice(&open_time.to_le_bytes());

    // Init PC amount (SOL amount, 8 bytes)
    instruction_data.extend_from_slice(&sol_amount.to_le_bytes());

    // Init coin amount (token amount, 8 bytes)
    instruction_data.extend_from_slice(&token_amount.to_le_bytes());

    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    let raydium_instruction = solana_program::instruction::Instruction {
        program_id: ctx.accounts.dex_program.key(),
        accounts: account_metas,
        data: instruction_data,
    };

    msg!("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ CPI –≤—ã–∑–æ–≤–∞ –∫ Raydium AMM...");

    // === –í–´–ü–û–õ–ù–ï–ù–ò–ï CPI –í–´–ó–û–í–ê ===

    // –í–ê–ñ–ù–û: –î–ª—è CPI –≤—ã–∑–æ–≤–∞ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ signer seeds
    let vault_seeds = &[
        b"bonding_curve_vault",
        ctx.accounts.mint.key().as_ref(),
        &[ctx.accounts.token_info.vault_bump],
    ];
    let vault_signer = &[&vault_seeds[..]];

    // –í—ã–ø–æ–ª–Ω—è–µ–º CPI —á–µ—Ä–µ–∑ invoke_signed
    solana_program::program::invoke_signed(
        &raydium_instruction,
        &[
            ctx.accounts.pool_account.to_account_info(),
            ctx.accounts.dex_program.to_account_info(),
            ctx.accounts.dex_account_a.to_account_info(),
            ctx.accounts.dex_account_b.to_account_info(),
            ctx.accounts.dex_account_c.to_account_info(),
            ctx.accounts.mint.to_account_info(),
            ctx.accounts.bonding_curve_vault.to_account_info(),
            ctx.accounts.bonding_curve_token_account.to_account_info(),
            ctx.accounts.initiator.to_account_info(),
            ctx.accounts.token_program.to_account_info(),
            ctx.accounts.system_program.to_account_info(),
            ctx.accounts.rent.to_account_info(),
        ],
        vault_signer,
    )?;

    msg!("‚úÖ –ü—É–ª Raydium —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
    msg!("   üèä Pool Address: {}", ctx.accounts.pool_account.key());
    msg!("   üé´ LP Tokens —Å–æ–∑–¥–∞–Ω–æ: {}", lp_tokens_minted);
    msg!("   üë§ –°–æ–∑–¥–∞—Ç–µ–ª—é –≤—ã–¥–∞–Ω–æ: {}", creator_lp_tokens);
    msg!("   üî• –°–æ–∂–∂–µ–Ω–æ (min liquidity): {}", minimum_liquidity);

    // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ü–£–õ–ê ===

    // Raydium –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è:
    // - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–π
    // - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    // - –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏

    // –≠—Ç–∏ —à–∞–≥–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Raydium AMM
    // –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±—É–¥—É—â–µ–º

    // === –í–û–ó–í–†–ê–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===

    Ok(PoolCreationResult {
        lp_tokens_minted,
        creator_lp_tokens,
        pool_initialized: true,
    })
}

/// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞ Orca Whirlpools
fn create_orca_pool(
    ctx: &Context<GraduateToDex>,
    sol_amount: u64,
    token_amount: u64,
) -> Result<PoolCreationResult> {
    msg!("üêã –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ Orca Whirlpool —Å {} SOL –∏ {} —Ç–æ–∫–µ–Ω–æ–≤", 
         sol_amount as f64 / 1_000_000_000.0, 
         token_amount);

    // –í production –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Orca Whirlpools
    // Orca –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
    /*
    let cpi_accounts = orca_whirlpools::cpi::accounts::InitializePool {
        whirlpool: ctx.accounts.pool_account.to_account_info(),
        token_mint_a: ctx.accounts.mint.to_account_info(),
        token_mint_b: /* WSOL mint */,
        token_vault_a: ctx.accounts.dex_account_a.to_account_info(),
        token_vault_b: ctx.accounts.dex_account_b.to_account_info(),
        tick_spacing: 64, // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π tick spacing
        initial_sqrt_price: /* calculated sqrt price */,
        payer: ctx.accounts.initiator.to_account_info(),
    };
    */

    let lp_tokens = calculate_lp_tokens(sol_amount, token_amount)?;
    
    Ok(PoolCreationResult {
        lp_tokens_minted: lp_tokens,
        creator_lp_tokens: lp_tokens,
        pool_initialized: true,
    })
}

/// –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ Jupiter (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞–∑–æ–≤—ã–µ DEX)
fn create_jupiter_pool(
    ctx: &Context<GraduateToDex>,
    sol_amount: u64,
    token_amount: u64,
) -> Result<PoolCreationResult> {
    msg!("ü™ê –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ Jupiter —Å {} SOL –∏ {} —Ç–æ–∫–µ–Ω–æ–≤", 
         sol_amount as f64 / 1_000_000_000.0, 
         token_amount);

    // Jupiter —ç—Ç–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä, –Ω–µ —Å–æ–∑–¥–∞—ë—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—É–ª—ã
    // –û–±—ã—á–Ω–æ —Å–æ–∑–¥–∞—ë–º –ø—É–ª –Ω–∞ –±–∞–∑–æ–≤–æ–º DEX (–Ω–∞–ø—Ä–∏–º–µ—Ä, Orca)
    // –∏ Jupiter –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç
    
    // –î–µ–ª–µ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –Ω–∞ Orca
    create_orca_pool(ctx, sol_amount, token_amount)
}

/// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ –¥–ª—è –Ω–µ—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö DEX
fn create_generic_pool(
    _ctx: &Context<GraduateToDex>,
    sol_amount: u64,
    token_amount: u64,
) -> Result<PoolCreationResult> {
    msg!("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—É–ª–∞ —Å {} SOL –∏ {} —Ç–æ–∫–µ–Ω–æ–≤", 
         sol_amount as f64 / 1_000_000_000.0, 
         token_amount);

    // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–µ—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö DEX
    let lp_tokens = calculate_lp_tokens(sol_amount, token_amount)?;
    
    Ok(PoolCreationResult {
        lp_tokens_minted: lp_tokens,
        creator_lp_tokens: lp_tokens,
        pool_initialized: true,
    })
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

/// –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ LP —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
fn calculate_lp_tokens(sol_amount: u64, token_amount: u64) -> Result<u64> {
    // LP —Ç–æ–∫–µ–Ω—ã = sqrt(sol_amount * token_amount)
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è

    let product = (sol_amount as u128)
        .checked_mul(token_amount as u128)
        .ok_or(ErrorCode::MathOverflow)?;

    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å —á–µ—Ä–µ–∑ –∏—Ç–µ—Ä–∞—Ü–∏–∏
    let mut x = product / 2;
    if x == 0 {
        return Ok(0);
    }

    // –ú–µ—Ç–æ–¥ –ù—å—é—Ç–æ–Ω–∞ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è
    // sqrt(n) ‚âà x_{k+1} = (x_k + n/x_k) / 2
    for _ in 0..10 {
        let new_x = (x + product / x) / 2;
        if new_x >= x {
            break;
        }
        x = new_x;
    }

    Ok(x as u64)
}

/// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ –Ω–∞ Raydium
///
/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ:
/// - Pool account –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
/// - –ò–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π owner (Raydium Program)
/// - –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–Ω—É–ª–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
fn verify_raydium_pool_created(pool_account: &AccountInfo) -> Result<bool> {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if pool_account.data_is_empty() {
        msg!("‚ö†Ô∏è Pool account –ø—É—Å—Ç–æ–π - –≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å");
        return Ok(false);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
    let raydium_program_id = "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8";
    let expected_owner = Pubkey::try_from(raydium_program_id)
        .map_err(|_| ErrorCode::InvalidDexProgram)?;

    if pool_account.owner != &expected_owner {
        msg!("‚ö†Ô∏è Pool account –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞");
        msg!("   –û–∂–∏–¥–∞–ª—Å—è: {}", expected_owner);
        msg!("   –ü–æ–ª—É—á–µ–Ω: {}", pool_account.owner);
        return Ok(false);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (Raydium pool –æ–±—ã—á–Ω–æ ~700+ bytes)
    let data_len = pool_account.data_len();
    if data_len < 500 {
        msg!("‚ö†Ô∏è Pool account —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π: {} bytes", data_len);
        return Ok(false);
    }

    msg!("‚úÖ Raydium pool –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:");
    msg!("   Owner: {}", pool_account.owner);
    msg!("   Size: {} bytes", data_len);
    msg!("   Address: {}", pool_account.key());

    Ok(true)
}

/// –†–∞—Å—á–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
///
/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –≤ lamports –∑–∞ –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω
fn calculate_initial_pool_price(sol_amount: u64, token_amount: u64) -> Result<u64> {
    require!(token_amount > 0, ErrorCode::MathOverflow);

    // –¶–µ–Ω–∞ = SOL / Tokens
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º u128 –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    let price = (sol_amount as u128)
        .checked_mul(1_000_000_000) // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        .ok_or(ErrorCode::MathOverflow)?
        .checked_div(token_amount as u128)
        .ok_or(ErrorCode::MathOverflow)?;

    Ok(price as u64)
}

/// –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ price impact –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
///
/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç impact –≤ –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö (10000 = 100%)
fn calculate_liquidity_impact(
    current_sol: u64,
    current_tokens: u64,
    adding_sol: u64,
    adding_tokens: u64,
) -> Result<u16> {
    if current_sol == 0 || current_tokens == 0 {
        return Ok(0); // –ù–µ—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ - –Ω–µ—Ç impact
    }

    // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
    let current_price = (current_sol as u128)
        .checked_mul(1_000_000)
        .ok_or(ErrorCode::MathOverflow)?
        .checked_div(current_tokens as u128)
        .ok_or(ErrorCode::MathOverflow)?;

    // –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    let new_sol = current_sol
        .checked_add(adding_sol)
        .ok_or(ErrorCode::MathOverflow)?;

    let new_tokens = current_tokens
        .checked_add(adding_tokens)
        .ok_or(ErrorCode::MathOverflow)?;

    let new_price = (new_sol as u128)
        .checked_mul(1_000_000)
        .ok_or(ErrorCode::MathOverflow)?
        .checked_div(new_tokens as u128)
        .ok_or(ErrorCode::MathOverflow)?;

    // Price impact –≤ –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö
    if new_price > current_price {
        let impact = ((new_price - current_price) * 10_000 / current_price) as u16;
        Ok(impact.min(10_000))
    } else {
        let impact = ((current_price - new_price) * 10_000 / current_price) as u16;
        Ok(impact.min(10_000))
    }
}

/// –°–æ–±—ã—Ç–∏–µ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
#[event]
pub struct TokenGraduatedEvent {
    /// Mint —Ç–æ–∫–µ–Ω–∞
    pub mint: Pubkey,
    /// –°–æ–∑–¥–∞—Ç–µ–ª—å —Ç–æ–∫–µ–Ω–∞
    pub creator: Pubkey,
    /// –¢–∏–ø DEX
    pub dex_type: DexType,
    /// –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
    pub final_market_cap: u64,
    /// –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å SOL
    pub liquidity_sol: u64,
    /// –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
    pub liquidity_tokens: u64,
    /// –í—Ä–µ–º—è –¥–æ –≥—Ä–∞–¥–∞—Ü–∏–∏ –≤ —á–∞—Å–∞—Ö
    pub graduation_time_hours: u64,
    /// –ê–¥—Ä–µ—Å –ø—É–ª–∞ –Ω–∞ DEX
    pub pool_address: Pubkey,
    /// –í—Ä–µ–º—è –≥—Ä–∞–¥–∞—Ü–∏–∏
    pub timestamp: i64,
}