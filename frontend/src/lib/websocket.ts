/**
 * üîå WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 * Production-ready WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
 */

export type EventType = 
  | 'price_update'
  | 'new_trade'
  | 'token_created'
  | 'token_graduated'
  | 'user_connected'
  | 'user_disconnected'
  | 'portfolio_update'
  | 'market_stats'
  | 'error'
  | 'heartbeat'

export interface WebSocketMessage {
  type: EventType | string
  data: Record<string, any>
  timestamp: string
  room?: string
  user_id?: string
}

export interface WebSocketConfig {
  url: string
  reconnectInterval?: number
  maxReconnectAttempts?: number
  heartbeatInterval?: number
  debug?: boolean
}

export type EventHandler = (data: any) => void

class WebSocketClient {
  private ws: WebSocket | null = null
  private config: Required<WebSocketConfig>
  private eventHandlers: Map<string, EventHandler[]> = new Map()
  private reconnectAttempts = 0
  private isConnecting = false
  private heartbeatTimer: NodeJS.Timeout | null = null
  private reconnectTimer: NodeJS.Timeout | null = null
  private isDestroyed = false

  constructor(config: WebSocketConfig) {
    this.config = {
      reconnectInterval: 5000,
      maxReconnectAttempts: 10,
      heartbeatInterval: 30000,
      debug: false,
      ...config
    }

    this.log('WebSocket –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
   */
  async connect(token?: string, room?: string, userId?: string): Promise<void> {
    if (this.isConnecting || this.isDestroyed) {
      return
    }

    this.isConnecting = true

    try {
      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const url = new URL(this.config.url)
      if (token) url.searchParams.set('token', token)
      if (room) url.searchParams.set('room', room)
      if (userId) url.searchParams.set('user_id', userId)

      this.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: ${url.toString()}`)

      this.ws = new WebSocket(url.toString())

      this.ws.onopen = () => {
        this.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω')
        this.isConnecting = false
        this.reconnectAttempts = 0
        this.startHeartbeat()
        this.emit('connected', {})
      }

      this.ws.onmessage = (event) => {
        try {
          const message: WebSocketMessage = JSON.parse(event.data)
          this.handleMessage(message)
        } catch (error) {
          this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`)
        }
      }

      this.ws.onclose = (event) => {
        this.log(`üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: ${event.code} ${event.reason}`)
        this.isConnecting = false
        this.stopHeartbeat()
        this.emit('disconnected', { code: event.code, reason: event.reason })

        if (!this.isDestroyed && event.code !== 1000) {
          this.scheduleReconnect()
        }
      }

      this.ws.onerror = (error) => {
        this.log(`‚ùå WebSocket –æ—à–∏–±–∫–∞: ${error}`)
        this.isConnecting = false
        this.emit('error', { error })
      }

    } catch (error) {
      this.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: ${error}`)
      this.isConnecting = false
      this.scheduleReconnect()
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞
   */
  disconnect(): void {
    this.isDestroyed = true
    this.stopHeartbeat()
    this.clearReconnectTimer()

    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.ws.close(1000, 'Client disconnect')
    }

    this.ws = null
    this.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω')
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  send(type: string, data: Record<string, any> = {}): boolean {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      this.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${type}: WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω`)
      return false
    }

    const message: WebSocketMessage = {
      type,
      data,
      timestamp: new Date().toISOString()
    }

    try {
      this.ws.send(JSON.stringify(message))
      this.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${type}`)
      return true
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`)
      return false
    }
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
   */
  on(event: string, handler: EventHandler): void {
    if (!this.eventHandlers.has(event)) {
      this.eventHandlers.set(event, [])
    }
    this.eventHandlers.get(event)!.push(handler)
  }

  /**
   * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è
   */
  off(event: string, handler?: EventHandler): void {
    if (!this.eventHandlers.has(event)) return

    if (handler) {
      const handlers = this.eventHandlers.get(event)!
      const index = handlers.indexOf(handler)
      if (index !== -1) {
        handlers.splice(index, 1)
      }
    } else {
      this.eventHandlers.delete(event)
    }
  }

  /**
   * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
   */
  joinRoom(room: string): boolean {
    return this.send('join_room', { room })
  }

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
   */
  leaveRoom(room: string): boolean {
    return this.send('leave_room', { room })
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ç–æ–∫–µ–Ω–∞
   */
  subscribeToToken(tokenMint: string): boolean {
    return this.send('subscribe', { subscribe_to: `token_${tokenMint}` })
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  subscribeToUser(userId: string): boolean {
    return this.send('subscribe', { subscribe_to: `user_${userId}` })
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  get isConnected(): boolean {
    return this.ws?.readyState === WebSocket.OPEN
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  get readyState(): number {
    return this.ws?.readyState ?? WebSocket.CLOSED
  }

  // === –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ===

  private handleMessage(message: WebSocketMessage): void {
    this.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ: ${message.type}`)

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (message.type === 'heartbeat' && message.data.pong) {
      // Heartbeat –æ—Ç–≤–µ—Ç - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      return
    }

    // –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    this.emit(message.type, message.data)
  }

  private emit(event: string, data: any): void {
    const handlers = this.eventHandlers.get(event) || []
    handlers.forEach(handler => {
      try {
        handler(data)
      } catch (error) {
        this.log(`‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${event}: ${error}`)
      }
    })
  }

  private startHeartbeat(): void {
    this.stopHeartbeat()
    this.heartbeatTimer = setInterval(() => {
      if (this.isConnected) {
        this.send('heartbeat', {})
      }
    }, this.config.heartbeatInterval)
  }

  private stopHeartbeat(): void {
    if (this.heartbeatTimer) {
      clearInterval(this.heartbeatTimer)
      this.heartbeatTimer = null
    }
  }

  private scheduleReconnect(): void {
    if (this.isDestroyed || this.reconnectAttempts >= this.config.maxReconnectAttempts) {
      this.log(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${this.config.maxReconnectAttempts})`)
      return
    }

    this.clearReconnectTimer()
    this.reconnectAttempts++

    const delay = Math.min(
      this.config.reconnectInterval * Math.pow(2, this.reconnectAttempts - 1),
      30000 // –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
    )

    this.log(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${this.reconnectAttempts}/${this.config.maxReconnectAttempts})`)

    this.reconnectTimer = setTimeout(() => {
      this.connect()
    }, delay)
  }

  private clearReconnectTimer(): void {
    if (this.reconnectTimer) {
      clearTimeout(this.reconnectTimer)
      this.reconnectTimer = null
    }
  }

  private log(message: string): void {
    if (this.config.debug) {
      console.log(`[WebSocket] ${message}`)
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä WebSocket –∫–ª–∏–µ–Ω—Ç–∞
let wsClient: WebSocketClient | null = null

export function createWebSocketClient(config: WebSocketConfig): WebSocketClient {
  if (wsClient) {
    wsClient.disconnect()
  }
  
  wsClient = new WebSocketClient(config)
  return wsClient
}

export function getWebSocketClient(): WebSocketClient | null {
  return wsClient
}

// React Hook –¥–ª—è WebSocket
export interface UseWebSocketReturn {
  client: WebSocketClient | null
  isConnected: boolean
  connect: (token?: string, room?: string, userId?: string) => Promise<void>
  disconnect: () => void
  send: (type: string, data?: Record<string, any>) => boolean
  on: (event: string, handler: EventHandler) => void
  off: (event: string, handler?: EventHandler) => void
}

export function useWebSocket(config?: Partial<WebSocketConfig>): UseWebSocketReturn {
  // –í React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö—É–∫
  // –ó–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  
  const defaultConfig: WebSocketConfig = {
    url: process.env.NEXT_PUBLIC_WEBSOCKET_URL || 'ws://localhost:8001/api/v1/websocket/ws',
    reconnectInterval: 5000,
    maxReconnectAttempts: 10,
    heartbeatInterval: 30000,
    debug: process.env.NODE_ENV === 'development',
    ...config
  }

  if (!wsClient) {
    wsClient = new WebSocketClient(defaultConfig)
  }

  return {
    client: wsClient,
    isConnected: wsClient.isConnected,
    connect: wsClient.connect.bind(wsClient),
    disconnect: wsClient.disconnect.bind(wsClient),
    send: wsClient.send.bind(wsClient),
    on: wsClient.on.bind(wsClient),
    off: wsClient.off.bind(wsClient)
  }
}

export default WebSocketClient