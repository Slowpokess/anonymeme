use anchor_lang::prelude::*;

pub mod state;
pub mod instructions;
pub mod errors;
pub mod utils;

use crate::instructions::*;
use crate::state::*;

declare_id!("7wUQXRQtBzTmyp9kcrmok9FKcc4RSYXxPYN9FGDLnqxb");

#[program]
pub mod pump_core {
    use super::*;

    /// üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    pub fn initialize_platform(
        ctx: Context<InitializePlatform>,
        fee_rate: u16, // –í –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö (10000 = 100%)
        treasury: Pubkey,
        security_params: SecurityParams,
    ) -> Result<()> {
        instructions::initialize_platform(ctx, fee_rate, treasury, security_params)
    }

    /// üè≠ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Å –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π
    pub fn create_token(
        ctx: Context<CreateToken>,
        params: crate::instructions::create_token::CreateTokenParams,
    ) -> Result<()> {
        instructions::create_token(ctx, params)
    }

    /// üí∞ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ SOL (—Å–ª–µ–¥—É–µ—Ç –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π)
    pub fn buy_tokens(
        ctx: Context<BuyTokens>,
        sol_amount: u64,
        min_tokens_out: u64,
        slippage_tolerance: u16, // –í –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö (100 = 1%)
    ) -> Result<()> {
        instructions::buy_tokens(ctx, sol_amount, min_tokens_out, slippage_tolerance)
    }

    /// üí∏ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ SOL (—Å–ª–µ–¥—É–µ—Ç –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π)
    pub fn sell_tokens(
        ctx: Context<SellTokens>,
        token_amount: u64,
        min_sol_out: u64,
        slippage_tolerance: u16,
    ) -> Result<()> {
        instructions::sell_tokens(ctx, token_amount, min_sol_out, slippage_tolerance)
    }

    /// üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–∏—Å—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ DEX –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫—Ä–∏–≤–æ–π
    pub fn graduate_to_dex(
        ctx: Context<GraduateToDex>,
        dex_type: DexType,
        minimum_liquidity_sol: u64,
    ) -> Result<()> {
        instructions::graduate_to_dex(ctx, dex_type, minimum_liquidity_sol)
    }

    /// üõ°Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
    pub fn update_security_params(
        ctx: Context<UpdateSecurity>,
        new_params: SecurityParams,
    ) -> Result<()> {
        instructions::update_security_params(ctx, new_params)
    }

    /// ‚è∏Ô∏è –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
    pub fn emergency_pause_platform(
        ctx: Context<EmergencyControl>,
        pause: bool,
        reason: String,
    ) -> Result<()> {
        instructions::emergency_pause_platform(ctx, pause, reason)
    }

    /// üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ –∏–∑ –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π
    pub fn get_token_price(
        ctx: Context<ViewTokenInfo>,
    ) -> Result<u64> {
        instructions::get_token_price(ctx)
    }

    /// üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    pub fn update_user_reputation(
        ctx: Context<UpdateUserReputation>,
        reputation_delta: i32,
        reason: String,
    ) -> Result<()> {
        instructions::update_user_reputation(ctx, reputation_delta, reason)
    }

    /// üö® –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–º–æ–¥–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞)
    pub fn report_suspicious_activity(
        ctx: Context<ReportActivity>,
        reported_user: Pubkey,
        reason: ReportReason,
        description: String,
    ) -> Result<()> {
        instructions::report_suspicious_activity(ctx, reported_user, reason, description)
    }

    /// üíº –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
    pub fn update_platform_fee(
        ctx: Context<UpdatePlatformConfig>,
        new_fee_rate: u16, // –í –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö (10000 = 100%)
        reason: String,
    ) -> Result<()> {
        instructions::update_platform_fee(ctx, new_fee_rate, reason)
    }

    /// üè¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–∞–∑–Ω—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
    pub fn update_treasury(
        ctx: Context<UpdatePlatformConfig>,
        new_treasury: Pubkey,
        reason: String,
    ) -> Result<()> {
        instructions::update_treasury(ctx, new_treasury, reason)
    }

    /// üëë –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω)
    pub fn transfer_admin(
        ctx: Context<TransferAdmin>,
        reason: String,
    ) -> Result<()> {
        instructions::transfer_admin(ctx, reason)
    }

    // === LP TOKEN LOCK –ú–ï–•–ê–ù–ò–ó–ú ===

    /// üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ LP —Ç–æ–∫–µ–Ω–æ–≤ —Å —Ç–∞–π–º–ª–æ–∫–æ–º –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç rug pulls
    pub fn lock_lp_tokens(
        ctx: Context<LockLpTokens>,
        lp_amount: u64,
        lock_duration: i64,
        enable_vesting: bool,
    ) -> Result<()> {
        instructions::lock_lp_tokens(ctx, lp_amount, lock_duration, enable_vesting)
    }

    /// üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ LP —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    pub fn unlock_lp_tokens(
        ctx: Context<UnlockLpTokens>,
        amount: u64,
    ) -> Result<()> {
        instructions::unlock_lp_tokens(ctx, amount)
    }

    /// ‚è±Ô∏è –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ LP —Ç–æ–∫–µ–Ω–æ–≤
    pub fn extend_lock(
        ctx: Context<ExtendLock>,
        additional_duration: i64,
    ) -> Result<()> {
        instructions::extend_lock(ctx, additional_duration)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_program_id() {
        let expected_id = "7wUQXRQtBzTmyp9kcrmok9FKcc4RSYXxPYN9FGDLnqxb";
        assert_eq!(id().to_string(), expected_id);
    }
}