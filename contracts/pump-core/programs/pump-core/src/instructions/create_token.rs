/*!
üè≠ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤—ã–º–∏
Production-ready –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–µ–∫–æ–∏–Ω–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
*/

use anchor_lang::prelude::*;
use anchor_lang::system_program;
use anchor_spl::{
    token::{self, Mint, Token, TokenAccount, MintTo},
    associated_token::AssociatedToken,
    metadata::{
        create_metadata_accounts_v3,
        CreateMetadataAccountsV3,
        Metadata,
        mpl_token_metadata::types::DataV2,
    },
};

use crate::state::*;
use crate::errors::ErrorCode;
use crate::utils::bonding_curve::{validate_curve_params, CurveCalculation};

/// –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
#[derive(Accounts)]
#[instruction(name: String, symbol: String)]
pub struct CreateToken<'info> {
    /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ (PDA)
    #[account(
        init,
        payer = creator,
        space = TokenInfo::ACCOUNT_SIZE,
        seeds = [TokenInfo::SEED.as_bytes(), mint.key().as_ref()],
        bump
    )]
    pub token_info: Account<'info, TokenInfo>,

    /// Mint —Ç–æ–∫–µ–Ω–∞
    #[account(
        init,
        payer = creator,
        mint::decimals = 9,
        mint::authority = bonding_curve_vault,
        mint::freeze_authority = bonding_curve_vault,
    )]
    pub mint: Account<'info, Mint>,

    /// –•—Ä–∞–Ω–∏–ª–∏—â–µ SOL –¥–ª—è –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π (PDA)
    #[account(
        mut,
        seeds = [b"bonding_curve_vault", mint.key().as_ref()],
        bump,
    )]
    /// CHECK: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–∞–∫ PDA –≤ seeds constraint
    pub bonding_curve_vault: AccountInfo<'info>,

    /// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π
    #[account(
        init,
        payer = creator,
        associated_token::mint = mint,
        associated_token::authority = bonding_curve_vault,
    )]
    pub bonding_curve_token_account: Account<'info, TokenAccount>,

    /// –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
    #[account(
        mut,
        seeds = [
            b"metadata",
            metadata_program.key().as_ref(),
            mint.key().as_ref(),
        ],
        seeds::program = metadata_program.key(),
        bump,
    )]
    /// CHECK: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    pub metadata: AccountInfo<'info>,

    /// –°–æ–∑–¥–∞—Ç–µ–ª—å —Ç–æ–∫–µ–Ω–∞
    #[account(mut)]
    pub creator: Signer<'info>,

    /// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    #[account(
        mut,
        seeds = [PlatformConfig::SEED.as_bytes()],
        bump = platform_config.bump,
        constraint = !platform_config.emergency_paused @ ErrorCode::PlatformPaused,
        constraint = !platform_config.trading_paused @ ErrorCode::TradingPaused,
    )]
    pub platform_config: Account<'info, PlatformConfig>,

    /// –ü—Ä–æ–≥—Ä–∞–º–º—ã
    pub system_program: Program<'info, System>,
    pub token_program: Program<'info, Token>,
    pub associated_token_program: Program<'info, AssociatedToken>,
    pub metadata_program: Program<'info, Metadata>,
    pub rent: Sysvar<'info, Rent>,
}

/// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct CreateTokenParams {
    /// –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    pub name: String,
    /// –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
    pub symbol: String,
    /// URI –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (JSON)
    pub uri: String,
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π
    pub bonding_curve_params: BondingCurveParams,
    /// –ù–∞—á–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è (–≤ lamports SOL)
    pub initial_liquidity: u64,
}

/// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π
#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct BondingCurveParams {
    /// –¢–∏–ø –∫—Ä–∏–≤–æ–π
    pub curve_type: BondingCurveType,
    /// –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (–≤ lamports –∑–∞ —Ç–æ–∫–µ–Ω)
    pub initial_price: u64,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π supply –¥–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞ DEX
    pub max_supply: u64,
    /// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    pub slope: Option<u64>,
    pub growth_factor: Option<u64>,
    pub max_price: Option<u64>,
    pub steepness: Option<u64>,
    pub midpoint: Option<u64>,
}

/// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
pub fn create_token(
    ctx: Context<CreateToken>,
    params: CreateTokenParams,
) -> Result<()> {
    msg!("üè≠ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {}", params.name);

    let clock = Clock::get()?;
    let platform_config = &mut ctx.accounts.platform_config;

    // === –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í ===
    validate_token_params(&params, platform_config)?;

    // === –°–û–ó–î–ê–ù–ò–ï –ú–ï–¢–ê–î–ê–ù–ù–´–• ===
    create_token_metadata(
        &ctx,
        &params.name,
        &params.symbol,
        &params.uri,
    )?;

    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–ù–î–ò–ù–ì-–ö–†–ò–í–û–ô ===
    let bonding_curve = BondingCurve {
        curve_type: params.bonding_curve_params.curve_type,
        initial_price: params.bonding_curve_params.initial_price,
        max_supply: params.bonding_curve_params.max_supply,
        slope: params.bonding_curve_params.slope,
        growth_factor: params.bonding_curve_params.growth_factor,
        max_price: params.bonding_curve_params.max_price,
        steepness: params.bonding_curve_params.steepness,
        midpoint: params.bonding_curve_params.midpoint,
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫—Ä–∏–≤–æ–π
    validate_curve_params(&bonding_curve)?;

    // === MINT –ù–ê–ß–ê–õ–¨–ù–û–ì–û SUPPLY ===
    let initial_supply = params.bonding_curve_params.max_supply;
    mint_initial_supply(&ctx, initial_supply)?;

    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–û–ö–ï–ù–ê ===
    let token_info = &mut ctx.accounts.token_info;
    
    token_info.mint = ctx.accounts.mint.key();
    token_info.creator = ctx.accounts.creator.key();
    token_info.name = params.name.clone();
    token_info.symbol = params.symbol.clone();
    token_info.uri = params.uri.clone();
    token_info.bonding_curve = bonding_curve;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    token_info.current_supply = initial_supply;
    token_info.circulating_supply = 0; // –í—Å–µ —Ç–æ–∫–µ–Ω—ã –≤ –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π
    token_info.total_volume_sol = 0;
    token_info.total_trades = 0;
    token_info.holders_count = 0;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    token_info.is_graduated = false;
    token_info.is_frozen = false;
    token_info.is_tradeable = true;
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    token_info.created_at = clock.unix_timestamp;
    token_info.last_trade_at = 0;
    token_info.graduated_at = None;
    
    // –ë–∞–º–ø—ã –¥–ª—è PDA
    token_info.bump = ctx.bumps.token_info;
    token_info.vault_bump = ctx.bumps.bonding_curve_vault;

    // === –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–ß–ê–õ–¨–ù–û–ô –õ–ò–ö–í–ò–î–ù–û–°–¢–ò ===
    if params.initial_liquidity > 0 {
        handle_initial_liquidity(&ctx, &mut token_info, params.initial_liquidity)?;
    }

    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–õ–ê–¢–§–û–†–ú–´ ===
    platform_config.total_tokens_created = platform_config
        .total_tokens_created
        .checked_add(1)
        .ok_or(ErrorCode::MathOverflow)?;
    
    platform_config.last_updated = clock.unix_timestamp;

    // === –°–û–ë–´–¢–ò–Ø ===
    emit!(TokenCreatedEvent {
        mint: ctx.accounts.mint.key(),
        creator: ctx.accounts.creator.key(),
        name: params.name,
        symbol: params.symbol,
        uri: params.uri,
        bonding_curve_type: params.bonding_curve_params.curve_type,
        initial_price: params.bonding_curve_params.initial_price,
        max_supply: params.bonding_curve_params.max_supply,
        initial_liquidity: params.initial_liquidity,
        timestamp: clock.unix_timestamp,
    });

    msg!("‚úÖ –¢–æ–∫–µ–Ω {} ({}) —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!", params.name, params.symbol);
    msg!("   Mint: {}", ctx.accounts.mint.key());
    msg!("   Creator: {}", ctx.accounts.creator.key());
    msg!("   Max Supply: {}", params.bonding_curve_params.max_supply);
    msg!("   Initial Price: {} lamports", params.bonding_curve_params.initial_price);

    Ok(())
}

/// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ–∫–µ–Ω–∞
fn validate_token_params(
    params: &CreateTokenParams,
    platform_config: &PlatformConfig,
) -> Result<()> {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è
    require!(
        params.name.len() >= platform_config.min_token_name_length as usize,
        ErrorCode::TokenNameTooShort
    );
    require!(
        params.name.len() <= platform_config.max_token_name_length as usize,
        ErrorCode::TokenNameTooLong
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∞ (1-10 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
    require!(
        params.symbol.len() >= 1 && params.symbol.len() <= 10,
        ErrorCode::InvalidTokenSymbol
    );
    require!(
        params.symbol.chars().all(|c| c.is_alphanumeric()),
        ErrorCode::InvalidTokenSymbol
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ URI
    require!(
        params.uri.len() <= 200,
        ErrorCode::TokenUriTooLong
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
    require!(
        params.bonding_curve_params.initial_price > 0,
        ErrorCode::InvalidInitialPrice
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ supply
    require!(
        params.bonding_curve_params.max_supply > 0,
        ErrorCode::InvalidMaxSupply
    );
    require!(
        params.bonding_curve_params.max_supply <= platform_config.max_initial_supply,
        ErrorCode::MaxSupplyExceeded
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    if params.initial_liquidity > 0 {
        require!(
            params.initial_liquidity >= platform_config.min_initial_liquidity,
            ErrorCode::InsufficientInitialLiquidity
        );
    }

    Ok(())
}

/// –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
fn create_token_metadata(
    ctx: &Context<CreateToken>,
    name: &str,
    symbol: &str,
    uri: &str,
) -> Result<()> {
    let metadata_seeds = &[
        b"bonding_curve_vault",
        ctx.accounts.mint.key().as_ref(),
        &[ctx.bumps.bonding_curve_vault],
    ];
    
    let metadata_signer = &[&metadata_seeds[..]];

    let metadata_ctx = CpiContext::new_with_signer(
        ctx.accounts.metadata_program.to_account_info(),
        CreateMetadataAccountsV3 {
            metadata: ctx.accounts.metadata.to_account_info(),
            mint: ctx.accounts.mint.to_account_info(),
            mint_authority: ctx.accounts.bonding_curve_vault.to_account_info(),
            update_authority: ctx.accounts.bonding_curve_vault.to_account_info(),
            payer: ctx.accounts.creator.to_account_info(),
            system_program: ctx.accounts.system_program.to_account_info(),
            rent: ctx.accounts.rent.to_account_info(),
        },
        metadata_signer,
    );

    let metadata_data = DataV2 {
        name: name.to_string(),
        symbol: symbol.to_string(),
        uri: uri.to_string(),
        seller_fee_basis_points: 0,
        creators: None,
        collection: None,
        uses: None,
    };

    create_metadata_accounts_v3(
        metadata_ctx,
        metadata_data,
        true,  // is_mutable
        true,  // update_authority_is_signer
        None,  // collection_details
    )?;

    msg!("üìÑ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω—ã");
    Ok(())
}

/// Mint –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ supply –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π
fn mint_initial_supply(
    ctx: &Context<CreateToken>,
    initial_supply: u64,
) -> Result<()> {
    let seeds = &[
        b"bonding_curve_vault",
        ctx.accounts.mint.key().as_ref(),
        &[ctx.bumps.bonding_curve_vault],
    ];
    let signer = &[&seeds[..]];

    let cpi_ctx = CpiContext::new_with_signer(
        ctx.accounts.token_program.to_account_info(),
        MintTo {
            mint: ctx.accounts.mint.to_account_info(),
            to: ctx.accounts.bonding_curve_token_account.to_account_info(),
            authority: ctx.accounts.bonding_curve_vault.to_account_info(),
        },
        signer,
    );

    token::mint_to(cpi_ctx, initial_supply)?;

    msg!("ü™ô –°–æ–∑–¥–∞–Ω–æ {} —Ç–æ–∫–µ–Ω–æ–≤ –≤ –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π", initial_supply);
    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è
fn handle_initial_liquidity(
    ctx: &Context<CreateToken>,
    token_info: &mut TokenInfo,
    liquidity_amount: u64,
) -> Result<()> {
    // –ü–µ—Ä–µ–≤–æ–¥ SOL –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    let transfer_ctx = CpiContext::new(
        ctx.accounts.system_program.to_account_info(),
        system_program::Transfer {
            from: ctx.accounts.creator.to_account_info(),
            to: ctx.accounts.bonding_curve_vault.to_account_info(),
        },
    );

    system_program::transfer(transfer_ctx, liquidity_amount)?;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    token_info.total_volume_sol = token_info
        .total_volume_sol
        .checked_add(liquidity_amount)
        .ok_or(ErrorCode::MathOverflow)?;

    msg!("üíß –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {} SOL", liquidity_amount as f64 / 1_000_000_000.0);
    Ok(())
}

/// –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
#[event]
pub struct TokenCreatedEvent {
    /// –ê–¥—Ä–µ—Å mint —Ç–æ–∫–µ–Ω–∞
    pub mint: Pubkey,
    /// –°–æ–∑–¥–∞—Ç–µ–ª—å —Ç–æ–∫–µ–Ω–∞
    pub creator: Pubkey,
    /// –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    pub name: String,
    /// –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
    pub symbol: String,
    /// URI –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    pub uri: String,
    /// –¢–∏–ø –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π
    pub bonding_curve_type: BondingCurveType,
    /// –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
    pub initial_price: u64,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π supply
    pub max_supply: u64,
    /// –ù–∞—á–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
    pub initial_liquidity: u64,
    /// –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    pub timestamp: i64,
}