#!/usr/bin/env python3
"""
üîß Dependency functions –¥–ª—è FastAPI
Production-ready –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–∏ –≤ —Ä–æ—É—Ç–µ—Ä—ã
"""

import jwt
from typing import Optional, AsyncGenerator
from fastapi import Depends, HTTPException, status, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
import redis.asyncio as redis

from ..models.database import User, UserRole
from ..services.blockchain import SolanaService
from ..services.cache import CacheService
from ..core.config import settings


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è dependency injection
_db_session = None
_redis_client = None
_solana_service = None
_cache_service = None

def set_dependencies(db_session, redis_client, solana_service, cache_service):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ dependency –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–æ—É—Ç–µ—Ä–∞—Ö"""
    global _db_session, _redis_client, _solana_service, _cache_service
    _db_session = db_session
    _redis_client = redis_client
    _solana_service = solana_service
    _cache_service = cache_service


# === DATABASE DEPENDENCIES ===

async def get_db() -> AsyncGenerator[AsyncSession, None]:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not _db_session:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Database not initialized"
        )
    
    async with _db_session() as session:
        try:
            yield session
            await session.commit()
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()


# === REDIS DEPENDENCIES ===

async def get_redis() -> redis.Redis:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞"""
    if not _redis_client:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Redis not initialized"
        )
    return _redis_client


# === SERVICE DEPENDENCIES ===

async def get_solana_service() -> SolanaService:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Solana —Å–µ—Ä–≤–∏—Å–∞"""
    if not _solana_service:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Solana service not initialized"
        )
    return _solana_service


async def get_cache_service() -> CacheService:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Cache —Å–µ—Ä–≤–∏—Å–∞"""
    if not _cache_service:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Cache service not initialized"
        )
    return _cache_service


# === AUTHENTICATION DEPENDENCIES ===

security = HTTPBearer(auto_error=False)

async def get_current_user_optional(
    credentials: Optional[HTTPAuthorizationCredentials] = Depends(security),
    db: AsyncSession = Depends(get_db)
) -> Optional[User]:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    if not credentials:
        return None
    
    try:
        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
        payload = jwt.decode(
            credentials.credentials,
            settings.SECRET_KEY,
            algorithms=[settings.JWT_ALGORITHM]
        )
        
        user_id: str = payload.get("sub")
        if user_id is None:
            return None
            
    except jwt.PyJWTError:
        return None
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    result = await db.execute(
        select(User).where(User.id == user_id)
    )
    user = result.scalar_one_or_none()
    
    return user


async def get_current_user(
    current_user: Optional[User] = Depends(get_current_user_optional)
) -> User:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"""
    if current_user is None:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Not authenticated",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return current_user


async def get_active_user(
    current_user: User = Depends(get_current_user)
) -> User:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if current_user.status != "active":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="User account is not active"
        )
    return current_user


# === ROLE-BASED DEPENDENCIES ===

async def get_admin_user(
    current_user: User = Depends(get_active_user)
) -> User:
    """Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if current_user.role not in [UserRole.ADMIN, UserRole.SUPER_ADMIN]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Admin privileges required"
        )
    return current_user


async def get_super_admin_user(
    current_user: User = Depends(get_active_user)
) -> User:
    """Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if current_user.role != UserRole.SUPER_ADMIN:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Super admin privileges required"
        )
    return current_user


async def get_moderator_user(
    current_user: User = Depends(get_active_user)
) -> User:
    """Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    if current_user.role not in [UserRole.MODERATOR, UserRole.ADMIN, UserRole.SUPER_ADMIN]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Moderator privileges required"
        )
    return current_user


# === RATE LIMITING DEPENDENCIES ===

async def check_rate_limit(
    request: Request,
    redis: redis.Redis = Depends(get_redis)
) -> None:
    """Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limiting"""
    client_ip = request.client.host
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    key = f"rate_limit:{client_ip}"
    current_requests = await redis.get(key)
    
    if current_requests is None:
        await redis.setex(key, 3600, 1)  # 1 —á–∞—Å
    else:
        current_requests = int(current_requests)
        if current_requests >= settings.RATE_LIMIT_REQUESTS:
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail="Rate limit exceeded"
            )
        await redis.incr(key)


# === PAGINATION DEPENDENCIES ===

async def get_pagination_params(
    page: int = 1,
    limit: int = 20
) -> dict:
    """Dependency –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    if page < 1:
        page = 1
    if limit < 1 or limit > 100:
        limit = 20
        
    offset = (page - 1) * limit
    
    return {
        "page": page,
        "limit": limit,
        "offset": offset
    }


# === VALIDATION DEPENDENCIES ===

async def validate_wallet_signature(
    wallet_address: str,
    signature: str,
    message: str = None
) -> bool:
    """Dependency –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ –∫–æ—à–µ–ª—å–∫–∞"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        # –∏—Å–ø–æ–ª—å–∑—É—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Solana
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        return len(wallet_address) == 44 and len(signature) > 0
        
    except Exception:
        return False


# === SECURITY DEPENDENCIES ===

async def check_suspicious_activity(
    request: Request,
    redis: redis.Redis = Depends(get_redis)
) -> None:
    """Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    client_ip = request.client.host
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP
    blocked_key = f"blocked_ip:{client_ip}"
    if await redis.get(blocked_key):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="IP address is blocked"
        )


# === EXPORT ===

__all__ = [
    "get_db",
    "get_redis", 
    "get_solana_service",
    "get_cache_service",
    "get_current_user_optional",
    "get_current_user",
    "get_active_user",
    "get_admin_user",
    "get_super_admin_user",
    "get_moderator_user",
    "check_rate_limit",
    "get_pagination_params",
    "validate_wallet_signature",
    "check_suspicious_activity",
    "set_dependencies"
]