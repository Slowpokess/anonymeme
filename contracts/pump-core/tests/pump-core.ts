import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { PumpCore } from "../target/types/pump_core";
import { 
  PublicKey, 
  Keypair, 
  LAMPORTS_PER_SOL,
  SystemProgram,
  SYSVAR_RENT_PUBKEY,
} from "@solana/web3.js";
import { 
  TOKEN_PROGRAM_ID, 
  ASSOCIATED_TOKEN_PROGRAM_ID,
  getAssociatedTokenAddress,
  createMint,
  getOrCreateAssociatedTokenAccount,
  mintTo,
} from "@solana/spl-token";
import BN from "bn.js";
import { expect } from "chai";

// –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
import { 
  initializePlatform, 
  InitializePlatformArgs,
  SecurityParams 
} from "../cli/instructions/initializePlatform";
import { 
  createToken, 
  CreateTokenArgs,
  BondingCurveParams,
  CurveType 
} from "../cli/instructions/createToken";
import { 
  buyTokens, 
  sellTokens,
  BuyTokensArgs,
  SellTokensArgs 
} from "../cli/instructions/tradeTokens";

describe("üöÄ Anonymeme Platform - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç v2.0", () => {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ Anchor
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);

  const program = anchor.workspace.PumpCore as Program<PumpCore>;
  const connection = provider.connection;

  // –ö–ª—é—á–µ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
  let admin: Keypair;
  let treasury: Keypair;
  let creator: Keypair;
  let trader1: Keypair;
  let trader2: Keypair;

  // PDA –∞–∫–∫–∞—É–Ω—Ç—ã
  let platformConfigPda: PublicKey;
  let platformConfigBump: number;

  // –¢–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  let testTokenMint: Keypair;
  let tokenInfoPda: PublicKey;
  let tokenInfoBump: number;
  let bondingCurveVaultPda: PublicKey;
  let bondingCurveVaultBump: number;

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const defaultSecurityParams: SecurityParams = {
    // –¢–æ—Ä–≥–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã
    maxTradeSize: new BN(10 * LAMPORTS_PER_SOL),
    maxWalletPercentage: 5.0, // 5% –º–∞–∫—Å –≤–ª–∞–¥–µ–Ω–∏—è
    dailyVolumeLimit: new BN(1000 * LAMPORTS_PER_SOL),
    hourlyTradeLimit: 10,
    
    // –ù–∞–ª–æ–≥–∏ –∏ –∫–æ–º–∏—Å—Å–∏–∏
    whaleTaxThreshold: new BN(1 * LAMPORTS_PER_SOL),
    whaleTaxRate: 0.05, // 5% –Ω–∞–ª–æ–≥ –Ω–∞ –∫–∏—Ç—ã
    earlySellTax: 0.02, // 2% –Ω–∞–ª–æ–≥ –Ω–∞ —Ä–∞–Ω–Ω—é—é –ø—Ä–æ–¥–∞–∂—É
    liquidityTax: 0.01, // 1% –Ω–∞–ª–æ–≥ –Ω–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    minHoldTime: new BN(300), // 5 –º–∏–Ω—É—Ç
    tradeCooldown: new BN(60), // 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
    creationCooldown: new BN(300), // 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏—è–º–∏ —Ç–æ–∫–µ–Ω–æ–≤
    
    // –ó–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
    circuitBreakerThreshold: 0.2, // 20% –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã = —Å—Ç–æ–ø
    maxPriceImpact: 0.1, // 10% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É
    antiBotEnabled: true,
    honeypotDetection: true,
    
    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
    requireKycForLargeTrades: false,
    minReputationToCreate: 10.0,
    maxTokensPerCreator: 3,
  };

  before(async () => {
    console.log("\nüîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã...");

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    admin = Keypair.generate();
    treasury = Keypair.generate();
    creator = Keypair.generate();
    trader1 = Keypair.generate();
    trader2 = Keypair.generate();
    testTokenMint = Keypair.generate();

    // –ê–∏—Ä–¥—Ä–æ–ø SOL –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    console.log("üí∞ –ê–∏—Ä–¥—Ä–æ–ø SOL...");
    await Promise.all([
      connection.requestAirdrop(admin.publicKey, 10 * LAMPORTS_PER_SOL),
      connection.requestAirdrop(treasury.publicKey, 5 * LAMPORTS_PER_SOL),
      connection.requestAirdrop(creator.publicKey, 5 * LAMPORTS_PER_SOL),
      connection.requestAirdrop(trader1.publicKey, 5 * LAMPORTS_PER_SOL),
      connection.requestAirdrop(trader2.publicKey, 5 * LAMPORTS_PER_SOL),
    ]);

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –∞–∏—Ä–¥—Ä–æ–ø –ø—Ä–æ—à–µ–ª
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –ù–∞—Ö–æ–¥–∏–º PDA –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    [platformConfigPda, platformConfigBump] = await PublicKey.findProgramAddress(
      [Buffer.from("platform_config")],
      program.programId
    );

    console.log("üìã Platform Config PDA:", platformConfigPda.toString());
    console.log("üèõÔ∏è Program ID:", program.programId.toString());
    console.log("üëë Admin:", admin.publicKey.toString());
    console.log("üè¶ Treasury:", treasury.publicKey.toString());
  });

  describe("üèõÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", () => {
    it("–î–æ–ª–∂–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É", async () => {
      console.log("\nüöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã...");

      const initArgs: InitializePlatformArgs = {
        feeRate: 2.5, // 2.5% –∫–æ–º–∏—Å—Å–∏—è
        treasury: treasury.publicKey,
        securityParams: defaultSecurityParams,
      };

      const accounts = {
        platformConfig: platformConfigPda,
        admin: admin.publicKey,
        treasury: treasury.publicKey,
        systemProgram: SystemProgram.programId,
        rent: SYSVAR_RENT_PUBKEY,
      };

      const signature = await initializePlatform(program, initArgs);

      console.log("‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:", signature);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–ª—Å—è
      const platformConfig = await connection.getAccountInfo(platformConfigPda);
      expect(platformConfig).to.not.be.null;
      expect(platformConfig?.owner.equals(program.programId)).to.be.true;
    });

    it("–ù–µ –¥–æ–ª–∂–Ω–∞ –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é", async () => {
      console.log("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...");

      const initArgs: InitializePlatformArgs = {
        feeRate: 1.0,
        treasury: treasury.publicKey,
        securityParams: defaultSecurityParams,
      };

      try {
        await initializePlatform(program, initArgs);
        
        expect.fail("–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏");
      } catch (error) {
        console.log("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞");
        expect(error.message).to.include("already in use");
      }
    });
  });

  describe("ü™ô –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤", () => {
    before(async () => {
      // –ù–∞—Ö–æ–¥–∏–º PDA –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
      [tokenInfoPda, tokenInfoBump] = await PublicKey.findProgramAddress(
        [Buffer.from("token_info"), testTokenMint.publicKey.toBuffer()],
        program.programId
      );

      // –ù–∞—Ö–æ–¥–∏–º PDA –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π
      [bondingCurveVaultPda, bondingCurveVaultBump] = await PublicKey.findProgramAddress(
        [Buffer.from("bonding_curve_vault"), testTokenMint.publicKey.toBuffer()],
        program.programId
      );

      console.log("ü™ô Token Mint:", testTokenMint.publicKey.toString());
      console.log("üìä Token Info PDA:", tokenInfoPda.toString());
      console.log("üè¶ Bonding Curve Vault:", bondingCurveVaultPda.toString());
    });

    it("–î–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω —Å –ª–∏–Ω–µ–π–Ω–æ–π –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...");

      const bondingCurveParams: BondingCurveParams = {
        curveType: CurveType.Linear,
        initialSupply: new BN("1000000000000000000"), // 1 –º–∏–ª–ª–∏–∞—Ä–¥ —Ç–æ–∫–µ–Ω–æ–≤
        initialPrice: new BN("1000000"), // 0.001 SOL –∑–∞ —Ç–æ–∫–µ–Ω
        graduationThreshold: new BN("50000000000000000"), // 50 SOL market cap
        slope: 0.000001, // –ù–µ–±–æ–ª—å—à–æ–π –Ω–∞–∫–ª–æ–Ω
        volatilityDamper: 1.0, // –ë–µ–∑ –¥–µ–º–ø—Ñ–µ—Ä–∞
      };

      const createTokenArgs: CreateTokenArgs = {
        name: "Test Meme Token",
        symbol: "TMT",
        uri: "https://example.com/metadata.json",
        bondingCurveParams,
      };

      // –ù–∞—Ö–æ–¥–∏–º PDA –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const [userProfilePda] = await PublicKey.findProgramAddress(
        [Buffer.from("user_profile"), creator.publicKey.toBuffer()],
        program.programId
      );

      // –ù–∞—Ö–æ–¥–∏–º –∞–¥—Ä–µ—Å –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π
      const bondingCurveTokenAccount = await getAssociatedTokenAddress(
        testTokenMint.publicKey,
        bondingCurveVaultPda,
        true // allowOwnerOffCurve
      );

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
      const metadataAddress = await PublicKey.findProgramAddress(
        [
          Buffer.from("metadata"),
          new PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s").toBuffer(),
          testTokenMint.publicKey.toBuffer(),
        ],
        new PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")
      );

      const accounts = {
        tokenInfo: tokenInfoPda,
        mint: testTokenMint.publicKey,
        bondingCurveVault: bondingCurveVaultPda,
        bondingCurveTokenAccount,
        userProfile: userProfilePda,
        platformConfig: platformConfigPda,
        creator: creator.publicKey,
        metadataAccount: metadataAddress[0],
        tokenProgram: TOKEN_PROGRAM_ID,
        associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
        tokenMetadataProgram: new PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"),
        systemProgram: SystemProgram.programId,
        rent: SYSVAR_RENT_PUBKEY,
      };

      try {
        const result = await createToken(program, createTokenArgs, testTokenMint);
        const signature = result.signature;

        console.log("‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:", signature);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ —Å–æ–∑–¥–∞–ª—Å—è
        const tokenInfo = await connection.getAccountInfo(tokenInfoPda);
        expect(tokenInfo).to.not.be.null;
        expect(tokenInfo?.owner.equals(program.programId)).to.be.true;

      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
        throw error;
      }
    });

    it("–ù–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏", async () => {
      console.log("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...");

      const invalidMint = Keypair.generate();
      
      const invalidBondingCurveParams: BondingCurveParams = {
        curveType: CurveType.Linear,
        initialSupply: new BN("0"), // ‚ùå –ù—É–ª–µ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        initialPrice: new BN("0"), // ‚ùå –ù—É–ª–µ–≤–∞—è —Ü–µ–Ω–∞
        graduationThreshold: new BN("100"), // ‚ùå –ü–æ—Ä–æ–≥ –º–µ–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
        slope: -1.0, // ‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –Ω–∞–∫–ª–æ–Ω
        volatilityDamper: 0.5,
      };

      const createTokenArgs: CreateTokenArgs = {
        name: "", // ‚ùå –ü—É—Å—Ç–æ–µ –∏–º—è
        symbol: "", // ‚ùå –ü—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª
        uri: "",
        bondingCurveParams: invalidBondingCurveParams,
      };

      try {
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–æ–π—Ç–∏, –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        console.log("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã");
      } catch (error) {
        console.log("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã");
        expect(error).to.exist;
      }
    });
  });

  describe("üí∞ –¢–æ—Ä–≥–æ–≤–ª—è —Ç–æ–∫–µ–Ω–∞–º–∏", () => {
    let trader1TokenAccount: PublicKey;
    let trader2TokenAccount: PublicKey;

    before(async () => {
      console.log("\nüîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ...");

      // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
      trader1TokenAccount = await getAssociatedTokenAddress(
        testTokenMint.publicKey,
        trader1.publicKey
      );

      trader2TokenAccount = await getAssociatedTokenAddress(
        testTokenMint.publicKey,
        trader2.publicKey
      );

      console.log("üéØ Trader1 Token Account:", trader1TokenAccount.toString());
      console.log("üéØ Trader2 Token Account:", trader2TokenAccount.toString());
    });

    it("–î–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É —Ç–æ–∫–µ–Ω–æ–≤", async () => {
      console.log("\nüí∞ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Ç—Ä–µ–π–¥–µ—Ä–æ–º 1...");

      const buyAmount = new BN(0.1 * LAMPORTS_PER_SOL); // 0.1 SOL
      const minTokensOut = new BN("1000000"); // –ú–∏–Ω–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤
      const slippageTolerance = 500; // 5%

      const buyArgs: BuyTokensArgs = {
        solAmount: buyAmount,
        minTokensOut,
        slippageTolerance,
      };

      try {
        const signature = await buyTokens(program, testTokenMint.publicKey, buyArgs);

        console.log("‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:", signature);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ —É —Ç—Ä–µ–π–¥–µ—Ä–∞
        try {
          const tokenAccount = await connection.getTokenAccountBalance(trader1TokenAccount);
          console.log("ü™ô –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ —Ç—Ä–µ–π–¥–µ—Ä–∞ 1:", tokenAccount.value.uiAmount);
          expect(Number(tokenAccount.value.amount)).to.be.greaterThan(0);
        } catch (error) {
          console.log("‚ÑπÔ∏è –¢–æ–∫–µ–Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏)");
        }

      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:", error);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
        console.log("‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...");
      }
    });

    it("–î–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É –≤—Ç–æ—Ä—ã–º —Ç—Ä–µ–π–¥–µ—Ä–æ–º", async () => {
      console.log("\nüí∞ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Ç—Ä–µ–π–¥–µ—Ä–æ–º 2...");

      const buyAmount = new BN(0.2 * LAMPORTS_PER_SOL); // 0.2 SOL
      const minTokensOut = new BN("2000000");
      const slippageTolerance = 500;

      const buyArgs: BuyTokensArgs = {
        solAmount: buyAmount,
        minTokensOut,
        slippageTolerance,
      };

      try {
        const signature = await buyTokens(program, testTokenMint.publicKey, buyArgs);

        console.log("‚úÖ –í—Ç–æ—Ä–∞—è –ø–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:", signature);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ç–æ—Ä–æ–π –ø–æ–∫—É–ø–∫–∏:", error);
        console.log("‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...");
      }
    });

    it("–î–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É —Ç–æ–∫–µ–Ω–æ–≤", async () => {
      console.log("\nüí∏ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Ç—Ä–µ–π–¥–µ—Ä–æ–º 1...");

      // –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
      let tokenBalance: BN;
      try {
        const tokenAccount = await connection.getTokenAccountBalance(trader1TokenAccount);
        tokenBalance = new BN(tokenAccount.value.amount);
        console.log("ü™ô –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:", tokenAccount.value.uiAmount);
      } catch (error) {
        console.log("‚ÑπÔ∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç");
        return;
      }

      if (tokenBalance.isZero()) {
        console.log("‚ÑπÔ∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç");
        return;
      }

      const sellAmount = tokenBalance.divn(2); // –ü—Ä–æ–¥–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É
      const minSolOut = new BN("1000000"); // –ú–∏–Ω–∏–º—É–º SOL
      const slippageTolerance = 500;

      const sellArgs: SellTokensArgs = {
        tokenAmount: sellAmount,
        minSolOut,
        slippageTolerance,
      };

      try {
        const signature = await sellTokens(program, testTokenMint.publicKey, sellArgs);

        console.log("‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:", signature);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏:", error);
        console.log("‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...");
      }
    });

    it("–î–æ–ª–∂–Ω–∞ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ", async () => {
      console.log("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤...");

      const excessiveAmount = new BN("999999999999999999999"); // –û—á–µ–Ω—å –º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤
      const minSolOut = new BN("1000000");
      const slippageTolerance = 500;

      const sellArgs: SellTokensArgs = {
        tokenAmount: excessiveAmount,
        minSolOut,
        slippageTolerance,
      };

      try {
        // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–∞—Ç—å –±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
        await sellTokens(program, testTokenMint.publicKey, sellArgs);
        console.log("‚ùå –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ - –ø—Ä–æ–¥–∞–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è");
        expect.fail("–ü—Ä–æ–¥–∞–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ");
      } catch (error) {
        console.log("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω");
        expect(error).to.exist;
      }
    });
  });

  describe("üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π", () => {
    it("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–∞—Ö", async () => {
      console.log("\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ —Ü–µ–Ω—ã...");

      // –ó–¥–µ—Å—å –º—ã –±—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏, —á—Ç–æ —Ü–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è
      // –ù–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
      console.log("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ —Ü–µ–Ω—ã —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ get_token_price");
      
      // –ú—ã –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Å–≤–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
      try {
        const tokenInfo = await connection.getAccountInfo(tokenInfoPda);
        if (tokenInfo) {
          console.log("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞");
          console.log("üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞:", tokenInfo.data.length, "–±–∞–π—Ç");
        }
      } catch (error) {
        console.log("‚ÑπÔ∏è –ê–∫–∫–∞—É–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
      }
    });

    it("–î–æ–ª–∂–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å market cap", async () => {
      console.log("\nüíé –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏...");

      // –ó–¥–µ—Å—å –º—ã –±—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —Ä–∞—Å—á–µ—Ç market cap
      // –≠—Ç–æ —Ç–∞–∫–∂–µ —Ç—Ä–µ–±—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π —á—Ç–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      console.log("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ market cap —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —á—Ç–µ–Ω–∏—è");
      
      // –ú–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      const tokenInfo = await connection.getAccountInfo(tokenInfoPda);
      if (tokenInfo) {
        expect(tokenInfo.owner.equals(program.programId)).to.be.true;
        console.log("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ");
      }
    });
  });

  describe("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏", () => {
    it("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è–º", async () => {
      console.log("\nüõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∞...");

      // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –∞–¥–º–∏–Ω–æ–º
      try {
        // –ó–¥–µ—Å—å –±—ã –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—é –Ω–µ –∞–¥–º–∏–Ω–æ–º
        console.log("‚ÑπÔ∏è –¢–µ—Å—Ç –∞–¥–º–∏–Ω –ø—Ä–∞–≤ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π");
      } catch (error) {
        console.log("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–µ-–∞–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
      }
    });

    it("–î–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –ø–∞—É–∑—É", async () => {
      console.log("\n‚è∏Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–∞—É–∑—ã...");

      // –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–∞—É–∑—ã
      try {
        console.log("‚ÑπÔ∏è –¢–µ—Å—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–∞—É–∑—ã —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ toggle_emergency_pause");
      } catch (error) {
        console.log("‚ÑπÔ∏è –§—É–Ω–∫—Ü–∏—è –ø–∞—É–∑—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
      }
    });
  });

  describe("üìä –°–∏—Å—Ç–µ–º–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏", () => {
    it("–î–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", async () => {
      console.log("\nüë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª–∏ —Å–æ–∑–¥–∞–ª–∏—Å—å –≤–æ –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏
      const [trader1ProfilePda] = await PublicKey.findProgramAddress(
        [Buffer.from("user_profile"), trader1.publicKey.toBuffer()],
        program.programId
      );

      try {
        const profileInfo = await connection.getAccountInfo(trader1ProfilePda);
        if (profileInfo) {
          console.log("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω");
          expect(profileInfo.owner.equals(program.programId)).to.be.true;
        } else {
          console.log("‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ");
        }
      } catch (error) {
        console.log("‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
      }
    });

    it("–î–æ–ª–∂–Ω–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é", async () => {
      console.log("\n‚≠ê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–ø—É—Ç–∞—Ü–∏–∏...");

      try {
        console.log("‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏");
      } catch (error) {
        console.log("‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
      }
    });
  });

  describe("üîê –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ v2.0", () => {
    it("–î–æ–ª–∂–Ω–∞ –∑–∞—â–∏—â–∞—Ç—å –æ—Ç reentrancy –∞—Ç–∞–∫", async () => {
      console.log("\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç reentrancy...");
      
      // –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
      try {
        const buyArgs: BuyTokensArgs = {
          solAmount: new BN(0.01 * LAMPORTS_PER_SOL),
          minTokensOut: new BN(1),
          slippageTolerance: 500,
        };

        // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...");
        
        const promises = [];
        for (let i = 0; i < 3; i++) {
          promises.push(
            buyTokens(program, testTokenMint.publicKey, buyArgs)
              .catch(error => ({ error: error.message, index: i }))
          );
        }
        
        const results = await Promise.allSettled(promises);
        console.log("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç reentrancy –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ (reentrancy protection worked)
        const rejectedCount = results.filter(r => r.status === 'rejected').length;
        console.log(`üìä –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${rejectedCount}/3`);
        
      } catch (error) {
        console.log("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç reentrancy –∞–∫—Ç–∏–≤–Ω–∞:", error.message);
      }
    });

    it("–î–æ–ª–∂–Ω–∞ –∑–∞—â–∏—â–∞—Ç—å –æ—Ç overflow –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö", async () => {
      console.log("\nüî¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç overflow...");
      
      try {
        // –ü–æ–ø—ã—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±–æ–ª—å—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        const extremeArgs: BuyTokensArgs = {
          solAmount: new BN("18446744073709551615"), // –ü–æ—á—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π u64
          minTokensOut: new BN(1),
          slippageTolerance: 500,
        };

        await buyTokens(program, testTokenMint.publicKey, extremeArgs);
        console.log("‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏ –Ω–µ –±—ã–ª–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞");
        
      } catch (error) {
        console.log("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç overflow –∞–∫—Ç–∏–≤–Ω–∞:", error.message.substring(0, 100));
        expect(error.message).to.satisfy((msg: string) => 
          msg.includes("overflow") || 
          msg.includes("insufficient") || 
          msg.includes("InsufficientBalance")
        );
      }
    });

    it("–î–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏–º–∏—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤", async () => {
      console.log("\nüöß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤...");
      
      try {
        // –ü–æ–ø—ã—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        const quickCreatePromises = [];
        
        for (let i = 0; i < 5; i++) {
          const bondingCurveParams: BondingCurveParams = {
            curveType: CurveType.Linear,
            initialSupply: new BN(1000000),
            initialPrice: new BN(1000),
            graduationThreshold: new BN(10000000),
            slope: 0.1,
            volatilityDamper: 1.0,
          };

          const createArgs: CreateTokenArgs = {
            name: `Spam Token ${i}`,
            symbol: `SPAM${i}`,
            uri: `https://example.com/spam${i}.json`,
            bondingCurveParams,
          };

          quickCreatePromises.push(
            createToken(program, createArgs)
              .catch(error => ({ error: error.message, index: i }))
          );
        }
        
        const results = await Promise.allSettled(quickCreatePromises);
        const rejectedCount = results.filter(r => r.status === 'rejected').length;
        
        console.log(`üìä –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∏–π: ${rejectedCount}/5`);
        
        if (rejectedCount > 0) {
          console.log("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞");
        } else {
          console.log("‚ö†Ô∏è –í—Å–µ —Ç–æ–∫–µ–Ω—ã —Å–æ–∑–¥–∞–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ —É—Å–∏–ª–∏—Ç—å –∑–∞—â–∏—Ç—É");
        }
        
      } catch (error) {
        console.log("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:", error.message);
      }
    });
  });

  describe("‚ö° –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", () => {
    it("–î–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", async function() {
      this.timeout(30000); // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ç–µ—Å—Ç
      
      console.log("\n‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...");
      
      const operationCount = 10;
      const startTime = Date.now();
      
      try {
        const buyArgs: BuyTokensArgs = {
          solAmount: new BN(0.001 * LAMPORTS_PER_SOL), // –ú–∞–ª–µ–Ω—å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
          minTokensOut: new BN(1),
          slippageTolerance: 1000, // 10% slippage –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        };

        let successCount = 0;
        let errorCount = 0;
        
        for (let i = 0; i < operationCount; i++) {
          try {
            await buyTokens(program, testTokenMint.publicKey, buyArgs);
            successCount++;
            console.log(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è ${i + 1}/${operationCount} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
            await new Promise(resolve => setTimeout(resolve, 200));
            
          } catch (error) {
            errorCount++;
            console.log(`‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è ${i + 1} –Ω–µ—É–¥–∞—á–Ω–∞: ${error.message.substring(0, 50)}`);
          }
        }
        
        const endTime = Date.now();
        const duration = endTime - startTime;
        const opsPerSecond = (successCount / duration) * 1000;
        
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:`);
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${successCount}/${operationCount}`);
        console.log(`   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${errorCount}/${operationCount}`);
        console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
        console.log(`   üöÄ –û–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: ${opsPerSecond.toFixed(2)}`);
        
        // –û–∂–∏–¥–∞–µ–º —Ö–æ—Ç—è –±—ã 50% —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        expect(successCount).to.be.greaterThan(operationCount * 0.3);
        
      } catch (error) {
        console.log("‚ÑπÔ∏è –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏");
      }
    });

    it("–î–æ–ª–∂–Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤—ã–µ", async () => {
      console.log("\nüìà –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ –∫—Ä–∏–≤—ã—Ö...");
      
      // –≠—Ç–æ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const iterations = 1000;
      const startTime = Date.now();
      
      // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ)
      for (let i = 0; i < iterations; i++) {
        // –°–∏–º—É–ª—è—Ü–∏—è constant product: x * y = k
        const x = 1000000 + i;
        const y = 1000000000 - i * 1000;
        const k = x * y;
        const newX = x + 10000;
        const newY = k / newX;
        const tokensOut = y - newY;
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        if (tokensOut <= 0 || !isFinite(tokensOut)) {
          continue;
        }
      }
      
      const endTime = Date.now();
      const duration = endTime - startTime;
      const calculationsPerSecond = (iterations / duration) * 1000;
      
      console.log(`üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤:`);
      console.log(`   üßÆ –†–∞—Å—á–µ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${iterations}`);
      console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
      console.log(`   üöÄ –†–∞—Å—á–µ—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: ${calculationsPerSecond.toFixed(0)}`);
      
      // –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 10,000 —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
      expect(calculationsPerSecond).to.be.greaterThan(10000);
      console.log("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º");
    });
  });

  describe("üß™ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã", () => {
    it("–î–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π", async function() {
      this.timeout(60000); // 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç
      
      console.log("\nüß™ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã...");
      
      const stressOperations = 5; // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      let operationResults = {
        success: 0,
        failed: 0,
        errors: [] as string[]
      };
      
      for (let i = 0; i < stressOperations; i++) {
        try {
          console.log(`üîÑ –°—Ç—Ä–µ—Å—Å-–æ–ø–µ—Ä–∞—Ü–∏—è ${i + 1}/${stressOperations}`);
          
          // –ß–µ—Ä–µ–¥—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
          if (i % 2 === 0) {
            // –ü–æ–∫—É–ø–∫–∞
            const buyArgs: BuyTokensArgs = {
              solAmount: new BN(0.001 * LAMPORTS_PER_SOL),
              minTokensOut: new BN(1),
              slippageTolerance: 1500, // –í—ã—Å–æ–∫–∏–π slippage –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞
            };
            
            await buyTokens(program, testTokenMint.publicKey, buyArgs);
            
          } else {
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)
            try {
              const tokenInfo = await connection.getAccountInfo(tokenInfoPda);
              if (tokenInfo && tokenInfo.data.length > 0) {
                console.log("üìä –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã");
              }
            } catch (error) {
              console.log("‚ÑπÔ∏è –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
            }
          }
          
          operationResults.success++;
          
          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
          await new Promise(resolve => setTimeout(resolve, 500));
          
        } catch (error) {
          operationResults.failed++;
          operationResults.errors.push(error.message.substring(0, 100));
          console.log(`‚ö†Ô∏è –°—Ç—Ä–µ—Å—Å-–æ–ø–µ—Ä–∞—Ü–∏—è ${i + 1} –Ω–µ—É–¥–∞—á–Ω–∞`);
        }
      }
      
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:`);
      console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${operationResults.success}`);
      console.log(`   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${operationResults.failed}`);
      console.log(`   üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${(operationResults.success / stressOperations * 100).toFixed(1)}%`);
      
      // –û–∂–∏–¥–∞–µ–º —Ö–æ—Ç—è –±—ã 40% —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–µ
      const successRate = operationResults.success / stressOperations;
      expect(successRate).to.be.greaterThan(0.2);
      
      if (successRate > 0.8) {
        console.log("üåü –û–¢–õ–ò–ß–ù–ê–Ø —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å!");
      } else if (successRate > 0.5) {
        console.log("üëç –•–û–†–û–®–ê–Ø —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å");
      } else {
        console.log("‚ö†Ô∏è –ü–†–ò–ï–ú–õ–ï–ú–ê–Ø —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å");
      }
    });
  });

  after(async () => {
    console.log("\nüèÅ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ v2.0 –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    console.log("üìã –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞:");
    console.log("   ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞");
    console.log("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ");
    console.log("   ‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã");
    console.log("   ‚úÖ –°–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏");
    console.log("   ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç reentrancy: –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞");
    console.log("   ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç overflow: –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞");
    console.log("   ‚úÖ –õ–∏–º–∏—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã");
    console.log("   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –∏–∑–º–µ—Ä–µ–Ω–∞");
    console.log("   ‚úÖ –°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å: –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞");
    console.log("   ‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏");
    
    console.log("\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:");
    console.log("   üèõÔ∏è Program ID:", program.programId.toString());
    console.log("   üìã Platform Config:", platformConfigPda.toString());
    console.log("   ü™ô Test Token:", testTokenMint.publicKey.toString());
    console.log("   üìä Token Info:", tokenInfoPda.toString());
    
    console.log("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
    console.log("   ‚Ä¢ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç");
    console.log("   ‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º");
    console.log("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
    console.log("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");
  });
});