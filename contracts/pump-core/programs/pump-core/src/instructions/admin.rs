/*! 
‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Anonymeme
Production-ready —Å–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π
*/

use anchor_lang::prelude::*;
use anchor_lang::system_program;
use crate::state::*;
use crate::errors::ErrorCode;

/// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
#[derive(Accounts)]
pub struct UpdatePlatformConfig<'info> {
    /// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    #[account(
        mut,
        seeds = [PlatformConfig::SEED.as_bytes()],
        bump = platform_config.bump,
        constraint = platform_config.admin == admin.key() @ ErrorCode::AdminOnly
    )]
    pub platform_config: Account<'info, PlatformConfig>,

    /// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    #[account(mut)]
    pub admin: Signer<'info>,
}

/// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
pub fn update_platform_fee(
    ctx: Context<UpdatePlatformConfig>,
    new_fee_rate: f64,
    reason: String,
) -> Result<()> {
    msg!("üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");

    let clock = Clock::get()?;
    let platform_config = &mut ctx.accounts.platform_config;
    let old_fee = platform_config.fee_rate;
    
    // === –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–û–í–û–ô –ö–û–ú–ò–°–°–ò–ò ===
    
    require!(
        new_fee_rate >= 0.0 && new_fee_rate <= 10.0, 
        ErrorCode::InvalidInput
    );

    require!(
        reason.len() >= 10 && reason.len() <= 200,
        ErrorCode::InvalidInput
    );

    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===
    
    platform_config.fee_rate = new_fee_rate;
    platform_config.last_updated = clock.unix_timestamp;

    // === –°–û–ë–´–¢–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–û–ì–û –î–ï–ô–°–¢–í–ò–Ø ===
    
    emit!(AdminActionEvent {
        admin: ctx.accounts.admin.key(),
        action_type: AdminActionType::FeeUpdated,
        target: platform_config.key(),
        old_value: format!("{:.2}%", old_fee),
        new_value: format!("{:.2}%", new_fee_rate),
        reason: reason.clone(),
        timestamp: clock.unix_timestamp,
    });

    msg!("‚úÖ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {:.2}% -> {:.2}%", old_fee, new_fee_rate);
    msg!("   –ü—Ä–∏—á–∏–Ω–∞: {}", reason);

    Ok(())
}

/// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–∞–∑–Ω–∞—á–µ–π—Å—Ç–≤–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
pub fn update_treasury(
    ctx: Context<UpdatePlatformConfig>,
    new_treasury: Pubkey,
    reason: String,
) -> Result<()> {
    msg!("üèõÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∑–Ω–∞—á–µ–π—Å—Ç–≤–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");

    let clock = Clock::get()?;
    let platform_config = &mut ctx.accounts.platform_config;
    let old_treasury = platform_config.treasury;
    
    // === –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–û–í–û–ì–û –ö–ê–ó–ù–ê–ß–ï–ô–°–¢–í–ê ===
    
    require!(
        old_treasury != new_treasury,
        ErrorCode::NoStateChange
    );

    require!(
        reason.len() >= 10 && reason.len() <= 200,
        ErrorCode::InvalidInput
    );

    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===
    
    platform_config.treasury = new_treasury;
    platform_config.last_updated = clock.unix_timestamp;

    // === –°–û–ë–´–¢–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–û–ì–û –î–ï–ô–°–¢–í–ò–Ø ===
    
    emit!(AdminActionEvent {
        admin: ctx.accounts.admin.key(),
        action_type: AdminActionType::TreasuryUpdated,
        target: new_treasury,
        old_value: old_treasury.to_string(),
        new_value: new_treasury.to_string(),
        reason: reason.clone(),
        timestamp: clock.unix_timestamp,
    });

    msg!("‚úÖ –ö–∞–∑–Ω–∞—á–µ–π—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {} -> {}", old_treasury, new_treasury);
    msg!("   –ü—Ä–∏—á–∏–Ω–∞: {}", reason);

    Ok(())
}

/// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#[derive(Accounts)]
pub struct TransferAdmin<'info> {
    /// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    #[account(
        mut,
        seeds = [PlatformConfig::SEED.as_bytes()],
        bump = platform_config.bump,
        constraint = platform_config.admin == current_admin.key() @ ErrorCode::AdminOnly
    )]
    pub platform_config: Account<'info, PlatformConfig>,

    /// –¢–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    #[account(mut)]
    pub current_admin: Signer<'info>,

    /// CHECK: –ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    pub new_admin: AccountInfo<'info>,
}

/// –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
pub fn transfer_admin(
    ctx: Context<TransferAdmin>,
    reason: String,
) -> Result<()> {
    msg!("üëë –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã");

    let clock = Clock::get()?;
    let platform_config = &mut ctx.accounts.platform_config;
    let old_admin = platform_config.admin;
    let new_admin = ctx.accounts.new_admin.key();

    // === –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–ï–†–ï–î–ê–ß–ò ===
    
    require!(
        old_admin != new_admin, 
        ErrorCode::NoStateChange
    );

    require!(
        reason.len() >= 20 && reason.len() <= 500,
        ErrorCode::InvalidInput
    );

    // === –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï ===
    
    msg!("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –î–ï–ô–°–¢–í–ò–ï - –ü–ï–†–ï–î–ê–ß–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–• –ü–†–ê–í");
    msg!("   –°—Ç–∞—Ä—ã–π –∞–¥–º–∏–Ω: {}", old_admin);
    msg!("   –ù–æ–≤—ã–π –∞–¥–º–∏–Ω: {}", new_admin);
    msg!("   –ü—Ä–∏—á–∏–Ω–∞: {}", reason);

    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ===
    
    platform_config.admin = new_admin;
    platform_config.last_updated = clock.unix_timestamp;

    // === –°–û–ë–´–¢–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –î–ï–ô–°–¢–í–ò–Ø ===
    
    emit!(AdminActionEvent {
        admin: old_admin,
        action_type: AdminActionType::AdminTransferred,
        target: new_admin,
        old_value: old_admin.to_string(),
        new_value: new_admin.to_string(),
        reason: reason.clone(),
        timestamp: clock.unix_timestamp,
    });

    msg!("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã: {} -> {}", old_admin, new_admin);
    msg!("   –ü—Ä–∏—á–∏–Ω–∞: {}", reason);

    Ok(())
}

/// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–æ–∫–µ–Ω–∞–º–∏
#[derive(Accounts)]
pub struct ManageToken<'info> {
    /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ
    #[account(
        mut,
        seeds = [TokenInfo::SEED.as_bytes(), mint.key().as_ref()],
        bump = token_info.bump,
    )]
    pub token_info: Account<'info, TokenInfo>,

    /// Mint —Ç–æ–∫–µ–Ω–∞
    pub mint: AccountInfo<'info>,

    /// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    #[account(
        seeds = [PlatformConfig::SEED.as_bytes()],
        bump = platform_config.bump,
        constraint = platform_config.admin == admin.key() @ ErrorCode::AdminOnly
    )]
    pub platform_config: Account<'info, PlatformConfig>,

    /// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    #[account(mut)]
    pub admin: Signer<'info>,
}

/// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
pub fn ban_token(
    ctx: Context<ManageToken>,
    reason: String,
    is_permanent: bool,
) -> Result<()> {
    msg!("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");

    let clock = Clock::get()?;
    let token_info = &mut ctx.accounts.token_info;

    // === –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í ===
    
    require!(
        !token_info.is_frozen,
        ErrorCode::TokenAlreadyFrozen
    );

    require!(
        reason.len() >= 10 && reason.len() <= 300,
        ErrorCode::InvalidInput
    );

    // === –ë–õ–û–ö–ò–†–û–í–ö–ê –¢–û–ö–ï–ù–ê ===
    
    token_info.is_frozen = true;
    token_info.is_tradeable = false;
    token_info.freeze_reason = reason.clone();
    token_info.frozen_at = Some(clock.unix_timestamp);
    
    if is_permanent {
        msg!("üîí –ü–û–°–¢–û–Ø–ù–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê —Ç–æ–∫–µ–Ω–∞ {}", token_info.symbol);
    } else {
        msg!("‚è∏Ô∏è –í–†–ï–ú–ï–ù–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê —Ç–æ–∫–µ–Ω–∞ {}", token_info.symbol);
    }

    // === –°–û–ë–´–¢–ò–ï –ë–õ–û–ö–ò–†–û–í–ö–ò ===
    
    emit!(TokenActionEvent {
        admin: ctx.accounts.admin.key(),
        token_mint: ctx.accounts.mint.key(),
        action_type: TokenActionType::TokenBanned,
        reason: reason.clone(),
        is_permanent,
        timestamp: clock.unix_timestamp,
    });

    msg!("‚úÖ –¢–æ–∫–µ–Ω {} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", token_info.symbol);
    msg!("   –ü—Ä–∏—á–∏–Ω–∞: {}", reason);
    msg!("   –ü–æ—Å—Ç–æ—è–Ω–Ω–æ: {}", is_permanent);

    Ok(())
}

/// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
pub fn unban_token(
    ctx: Context<ManageToken>,
    reason: String,
) -> Result<()> {
    msg!("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");

    let clock = Clock::get()?;
    let token_info = &mut ctx.accounts.token_info;

    // === –í–ê–õ–ò–î–ê–¶–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø ===
    
    require!(
        token_info.is_frozen,
        ErrorCode::TokenNotFrozen
    );

    require!(
        reason.len() >= 10 && reason.len() <= 300,
        ErrorCode::InvalidInput
    );

    // === –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –¢–û–ö–ï–ù–ê ===
    
    token_info.is_frozen = false;
    token_info.is_tradeable = true;
    token_info.freeze_reason = String::new();
    token_info.frozen_at = None;

    // === –°–û–ë–´–¢–ò–ï –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ò ===
    
    emit!(TokenActionEvent {
        admin: ctx.accounts.admin.key(),
        token_mint: ctx.accounts.mint.key(),
        action_type: TokenActionType::TokenUnbanned,
        reason: reason.clone(),
        is_permanent: false,
        timestamp: clock.unix_timestamp,
    });

    msg!("‚úÖ –¢–æ–∫–µ–Ω {} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", token_info.symbol);
    msg!("   –ü—Ä–∏—á–∏–Ω–∞: {}", reason);

    Ok(())
}

/// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∫–æ–º–∏—Å—Å–∏–π
#[derive(Accounts)]
pub struct CollectFees<'info> {
    /// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    #[account(
        mut,
        seeds = [PlatformConfig::SEED.as_bytes()],
        bump = platform_config.bump,
        constraint = platform_config.admin == admin.key() @ ErrorCode::AdminOnly
    )]
    pub platform_config: Account<'info, PlatformConfig>,

    /// –ö–∞–∑–Ω–∞—á–µ–π—Å—Ç–≤–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–ø–æ–ª—É—á–∞—Ç–µ–ª—å –∫–æ–º–∏—Å—Å–∏–π)
    #[account(
        mut,
        address = platform_config.treasury
    )]
    /// CHECK: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ address constraint
    pub treasury: AccountInfo<'info>,

    /// –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä –∫–æ–º–∏—Å—Å–∏–π (–∏—Å—Ç–æ—á–Ω–∏–∫)
    #[account(
        mut,
        seeds = [b"fee_accumulator"],
        bump,
    )]
    /// CHECK: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–∞–∫ PDA
    pub fee_accumulator: AccountInfo<'info>,

    /// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    #[account(mut)]
    pub admin: Signer<'info>,

    /// –°–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
    pub system_program: Program<'info, System>,
}

/// –°–±–æ—Ä –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π –≤ –∫–∞–∑–Ω–∞—á–µ–π—Å—Ç–≤–æ
pub fn collect_platform_fees(
    ctx: Context<CollectFees>,
) -> Result<()> {
    msg!("üí∞ –°–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π –≤ –∫–∞–∑–Ω–∞—á–µ–π—Å—Ç–≤–æ");

    let clock = Clock::get()?;
    let fee_accumulator = &ctx.accounts.fee_accumulator;
    let treasury = &ctx.accounts.treasury;
    let platform_config = &mut ctx.accounts.platform_config;

    // === –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê –ö–û–ú–ò–°–°–ò–ô ===
    
    let fee_balance = fee_accumulator.lamports();
    
    require!(
        fee_balance > 0,
        ErrorCode::InsufficientFunds
    );

    // === –ü–ï–†–ï–í–û–î –ö–û–ú–ò–°–°–ò–ô –í –ö–ê–ó–ù–ê–ß–ï–ô–°–¢–í–û ===
    
    **fee_accumulator.try_borrow_mut_lamports()? -= fee_balance;
    **treasury.try_borrow_mut_lamports()? += fee_balance;

    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===
    
    platform_config.total_fees_collected = platform_config
        .total_fees_collected
        .checked_add(fee_balance)
        .ok_or(ErrorCode::MathOverflow)?;

    platform_config.last_fee_collection = clock.unix_timestamp;
    platform_config.last_updated = clock.unix_timestamp;

    // === –°–û–ë–´–¢–ò–ï –°–ë–û–†–ê –ö–û–ú–ò–°–°–ò–ô ===
    
    emit!(AdminActionEvent {
        admin: ctx.accounts.admin.key(),
        action_type: AdminActionType::FeesCollected,
        target: treasury.key(),
        old_value: "0".to_string(),
        new_value: (fee_balance as f64 / 1_000_000_000.0).to_string(),
        reason: "Routine fee collection".to_string(),
        timestamp: clock.unix_timestamp,
    });

    msg!("‚úÖ –ö–æ–º–∏—Å—Å–∏–∏ —Å–æ–±—Ä–∞–Ω—ã: {} SOL –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ –∫–∞–∑–Ω–∞—á–µ–π—Å—Ç–≤–æ", 
         fee_balance as f64 / 1_000_000_000.0);
    msg!("   –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–π: {} SOL", 
         platform_config.total_fees_collected as f64 / 1_000_000_000.0);

    Ok(())
}

// === –°–û–ë–´–¢–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–• –î–ï–ô–°–¢–í–ò–ô ===

/// –¢–∏–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
#[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug, PartialEq)]
pub enum AdminActionType {
    FeeUpdated,
    TreasuryUpdated,
    AdminTransferred,
    FeesCollected,
    ConfigUpdated,
}

/// –°–æ–±—ã—Ç–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
#[event]
pub struct AdminActionEvent {
    /// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏–π –¥–µ–π—Å—Ç–≤–∏–µ
    pub admin: Pubkey,
    /// –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
    pub action_type: AdminActionType,
    /// –¶–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—è
    pub target: Pubkey,
    /// –°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    pub old_value: String,
    /// –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    pub new_value: String,
    /// –ü—Ä–∏—á–∏–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
    pub reason: String,
    /// –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
    pub timestamp: i64,
}

/// –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º
#[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug, PartialEq)]
pub enum TokenActionType {
    TokenBanned,
    TokenUnbanned,
    MetadataUpdated,
}

/// –°–æ–±—ã—Ç–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º
#[event]
pub struct TokenActionEvent {
    /// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏–π –¥–µ–π—Å—Ç–≤–∏–µ
    pub admin: Pubkey,
    /// Mint —Ç–æ–∫–µ–Ω–∞
    pub token_mint: Pubkey,
    /// –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
    pub action_type: TokenActionType,
    /// –ü—Ä–∏—á–∏–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
    pub reason: String,
    /// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º
    pub is_permanent: bool,
    /// –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
    pub timestamp: i64,
}