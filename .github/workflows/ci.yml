name: 🚀 Continuous Integration

on:
  push:
    branches: ["main","master"]
  pull_request:
    branches: ["main","master"]

jobs:
  security-checks:
    runs-on: ubuntu-latest
    env:
      PYTHONUNBUFFERED: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: 💾 Cache Security Tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-security-tools-ci-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-security-tools-ci-

      - name: Install project dependencies
        run: |
          # Установить зависимости проекта (если есть requirements.txt)
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi

      - name: Install security tools (fix pydantic/typer compatibility)
        run: |
          # Обновляем pydantic и typer до версий совместимых с safety/semgrep
          python -m pip install "pydantic>=2.6.0" "typer>=0.16.0"
          # Установим bandit и safety определённых версий
          python -m pip install "bandit==1.8.6" "safety==3.6.2"
          # Не устанавливаем semgrep в это окружение, используем официальный action чтобы избежать конфликтов

      - name: Run Bandit
        id: bandit
        run: |
          set -e
          bandit -r backend -f json -o bandit-report.json || true
          jq -r '.results | length' bandit-report.json > bandit_count.txt
          echo "bandit_count=$(cat bandit_count.txt)" >> $GITHUB_OUTPUT

      - name: Run Safety
        id: safety
        run: |
          set -e
          # safety ожидает формат --output json (а не имя файла). Перенаправляем вывод в файл.
          safety check --output json > safety-report.json || true
          python - <<PY
import json,sys
try:
    j=json.load(open('safety-report.json'))
    vulns = j.get('vulnerabilities', [])
    print('vulnerability_count:', len(vulns))
except Exception:
    # safety версий/форматов может возвращать разную структуру, просто безопасно продолжим
    print('vulnerability_count: 0')
PY
          # Пробуем записать значение, если need
          echo "safety_done=true" >> $GITHUB_OUTPUT

      - name: Run Semgrep (official action to avoid pydantic conflicts)
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          output_path: semgrep-report.json
          # Вы можете настроить конфиги/пайплайны через input config если требуется:
          # config: p/ci
      - name: Aggregate results and fail on threshold
        run: |
          set -e
          BANDIT_COUNT=$(jq '.results | length' bandit-report.json 2>/dev/null || echo 0)
          SAFETY_COUNT=0
          if [ -f safety-report.json ]; then
            # Попытка определить число уязвимостей в safety-report.json
            SAFETY_COUNT=$(jq '.vulnerabilities | length' safety-report.json 2>/dev/null || echo 0)
          fi
          SEMGREP_COUNT=$(jq '.results | length' semgrep-report.json 2>/dev/null || echo 0)

          echo "Bandit issues: $BANDIT_COUNT"
          echo "Safety vulnerabilities: $SAFETY_COUNT"
          echo "Semgrep findings: $SEMGREP_COUNT"

          TOTAL_ISSUES=$((BANDIT_COUNT + SAFETY_COUNT + SEMGREP_COUNT))
          echo "Total issues: $TOTAL_ISSUES"

          # Порог можете настроить под проект. Здесь — требование 0 важных проблем.
          THRESHOLD=0
          if [ "$TOTAL_ISSUES" -le "$THRESHOLD" ]; then
            echo "✅ Security checks passed (under threshold)"
            echo "passed=true" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "❌ Security checks failed (too many issues: $TOTAL_ISSUES)"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
