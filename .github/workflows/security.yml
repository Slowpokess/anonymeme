name: "🔒 Security Monitoring"

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'contracts/**'
      - '.github/workflows/security.yml'
  pull_request:
    paths:
      - 'backend/**'
      - 'contracts/**'
  workflow_dispatch:
    inputs:
      scan-type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - quick
          - vulnerability-only
          - dependency-only

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'

jobs:
  # ===== DEPENDENCY SECURITY AUDIT =====
  dependency-audit:
    name: 📦 Dependency Security Audit
    runs-on: ubuntu-latest
    outputs:
      python-vulnerabilities: ${{ steps.python-audit.outputs.vulnerabilities }}
      node-vulnerabilities: ${{ steps.node-audit.outputs.vulnerabilities }}
      rust-vulnerabilities: ${{ steps.rust-audit.outputs.vulnerabilities }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 🔍 Python Dependency Audit (Safety)
        id: python-audit
        run: |
          cd backend
          pip install safety
          
          # Run safety check and capture output
          safety check --json --output safety-report.json || true
          safety check --short-report
          
          # Count vulnerabilities
          VULN_COUNT=$(cat safety-report.json | jq '. | length' 2>/dev/null || echo "0")
          echo "vulnerabilities=$VULN_COUNT" >> $GITHUB_OUTPUT
          
          # Fail if critical vulnerabilities found
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "⚠️ Found $VULN_COUNT Python vulnerabilities"
          fi

      - name: 🔍 Node.js Dependency Audit
        id: node-audit
        run: |
          cd frontend
          npm install
          
          # Run npm audit and capture output
          npm audit --json > npm-audit.json 2>/dev/null || true
          npm audit
          
          # Count vulnerabilities
          HIGH_VULN=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0' 2>/dev/null || echo "0")
          CRITICAL_VULN=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0' 2>/dev/null || echo "0")
          TOTAL_VULN=$((HIGH_VULN + CRITICAL_VULN))
          
          echo "vulnerabilities=$TOTAL_VULN" >> $GITHUB_OUTPUT
          
          if [ "$TOTAL_VULN" -gt 0 ]; then
            echo "⚠️ Found $TOTAL_VULN high/critical Node.js vulnerabilities"
          fi

      - name: 🔍 Rust Dependency Audit (cargo-audit)
        id: rust-audit
        run: |
          cd contracts/pump-core
          
          # Install cargo-audit
          cargo install cargo-audit
          
          # Run audit
          cargo audit --json > cargo-audit.json 2>/dev/null || true
          cargo audit
          
          # Count vulnerabilities
          VULN_COUNT=$(cat cargo-audit.json | jq '.vulnerabilities.found | length' 2>/dev/null || echo "0")
          echo "vulnerabilities=$VULN_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "⚠️ Found $VULN_COUNT Rust vulnerabilities"
          fi

      - name: 📊 Upload Dependency Reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit-reports
          path: |
            backend/safety-report.json
            frontend/npm-audit.json
            contracts/pump-core/cargo-audit.json

  # ===== STATIC SECURITY ANALYSIS =====
  static-analysis:
    name: 🔍 Static Security Analysis
    runs-on: ubuntu-latest
    outputs:
      security-issues: ${{ steps.analysis-summary.outputs.issues }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Security Tools
        run: |
          pip install pbr bandit semgrep
          npm install -g @microsoft/eslint-plugin-sdl

      - name: 🔍 Bandit Python Security Scan
        run: |
          cd backend
          bandit -r . -f json -o bandit-report.json -x tests/ || true
          bandit -r . -f txt -x tests/
          
          # Count issues by severity
          HIGH_ISSUES=$(cat bandit-report.json | jq '[.results[] | select(.issue_severity == "HIGH")] | length' 2>/dev/null || echo "0")
          MEDIUM_ISSUES=$(cat bandit-report.json | jq '[.results[] | select(.issue_severity == "MEDIUM")] | length' 2>/dev/null || echo "0")
          
          echo "🔍 Bandit found $HIGH_ISSUES high and $MEDIUM_ISSUES medium severity issues"

      - name: 🔍 Semgrep Security Scan
        run: |
          # Run Semgrep with security rules
          semgrep --config=auto backend/ --json --output=semgrep-report.json || true
          semgrep --config=auto backend/ --severity=ERROR
          
          # Count security findings
          FINDINGS=$(cat semgrep-report.json | jq '.results | length' 2>/dev/null || echo "0")
          echo "🔍 Semgrep found $FINDINGS security findings"

      - name: 🔍 Smart Contract Security Analysis
        run: |
          cd contracts/pump-core
          
          # Install Mythril for smart contract analysis (if Solidity contracts exist)
          # For Rust/Anchor programs, we use cargo clippy with security lints
          cargo clippy -- -D warnings -D clippy::all
          
          # Custom security checks for Solana programs
          echo "🔍 Running custom Solana security checks..."
          grep -r "unchecked" src/ || echo "No unchecked operations found"
          grep -r "unsafe" src/ || echo "No unsafe code found"

      - name: 📊 Analysis Summary
        id: analysis-summary
        run: |
          # Combine all security findings
          TOTAL_ISSUES=0
          
          if [ -f backend/bandit-report.json ]; then
            BANDIT_ISSUES=$(cat backend/bandit-report.json | jq '.results | length' 2>/dev/null || echo "0")
            TOTAL_ISSUES=$((TOTAL_ISSUES + BANDIT_ISSUES))
          fi
          
          if [ -f semgrep-report.json ]; then
            SEMGREP_ISSUES=$(cat semgrep-report.json | jq '.results | length' 2>/dev/null || echo "0")
            TOTAL_ISSUES=$((TOTAL_ISSUES + SEMGREP_ISSUES))
          fi
          
          echo "issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
          echo "📊 Total security issues found: $TOTAL_ISSUES"

      - name: 📊 Upload Analysis Reports
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-reports
          path: |
            backend/bandit-report.json
            semgrep-report.json

  # ===== CONTAINER SECURITY SCAN =====
  container-security:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' || inputs.scan-type == 'full'
    outputs:
      container-vulnerabilities: ${{ steps.container-scan.outputs.vulnerabilities }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Test Images
        run: |
          docker build -t anonymeme-backend:security-test ./backend
          docker build -t anonymeme-frontend:security-test ./frontend

      - name: 📦 Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: 🔍 Scan Backend Container
        id: container-scan
        run: |
          # Scan backend image
          trivy image --format json --output backend-container-scan.json anonymeme-backend:security-test
          trivy image --severity HIGH,CRITICAL anonymeme-backend:security-test
          
          # Scan frontend image
          trivy image --format json --output frontend-container-scan.json anonymeme-frontend:security-test
          trivy image --severity HIGH,CRITICAL anonymeme-frontend:security-test
          
          # Count total vulnerabilities
          BACKEND_VULNS=$(cat backend-container-scan.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' 2>/dev/null || echo "0")
          FRONTEND_VULNS=$(cat frontend-container-scan.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' 2>/dev/null || echo "0")
          TOTAL_VULNS=$((BACKEND_VULNS + FRONTEND_VULNS))
          
          echo "vulnerabilities=$TOTAL_VULNS" >> $GITHUB_OUTPUT
          echo "🐳 Found $TOTAL_VULNS high/critical container vulnerabilities"

      - name: 📊 Upload Container Scan Reports
        uses: actions/upload-artifact@v4
        with:
          name: container-security-reports
          path: |
            backend-container-scan.json
            frontend-container-scan.json

  # ===== DYNAMIC SECURITY TESTING =====
  dynamic-security:
    name: 🎯 Dynamic Security Testing
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' || inputs.scan-type == 'full'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: security_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    outputs:
      security-vulnerabilities: ${{ steps.dynamic-scan.outputs.vulnerabilities }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install aiohttp

      - name: 🚀 Start Test Application
        run: |
          cd backend
          export DATABASE_URL=postgresql://test_user:test_pass@localhost:5432/security_test_db
          export REDIS_URL=redis://localhost:6379
          export TESTING=true
          export JWT_SECRET_KEY=test-secret-key-for-security-testing
          
          # Start API server in background
          uvicorn api.main:app --host 0.0.0.0 --port 8000 &
          API_PID=$!
          echo "API_PID=$API_PID" >> $GITHUB_ENV
          
          # Wait for server to start
          sleep 15
          
          # Verify server is running
          curl -f http://localhost:8000/health || exit 1

      - name: 🔍 Dynamic Vulnerability Scan
        id: dynamic-scan
        run: |
          cd backend
          
          # Run our custom vulnerability scanner
          python -m api.security.vulnerability_scanner \
            --url http://localhost:8000 \
            --format json \
            --output dynamic-security-report.json
          
          # Count vulnerabilities by severity
          CRITICAL=$(cat dynamic-security-report.json | jq '.vulnerabilities[] | select(.severity == "critical") | length' 2>/dev/null || echo "0")
          HIGH=$(cat dynamic-security-report.json | jq '.vulnerabilities[] | select(.severity == "high") | length' 2>/dev/null || echo "0")
          TOTAL_VULNS=$((CRITICAL + HIGH))
          
          echo "vulnerabilities=$TOTAL_VULNS" >> $GITHUB_OUTPUT
          echo "🎯 Dynamic scan found $TOTAL_VULNS critical/high vulnerabilities"

      - name: 🧪 Security Test Suite
        run: |
          cd backend
          
          # Run security-specific tests
          python -m pytest tests/security/ -v --tb=short
          
          # Test rate limiting
          python scripts/testing/test_rate_limiting.py
          
          # Test authentication bypass attempts
          python scripts/testing/test_auth_security.py

      - name: 🛑 Stop Test Application
        if: always()
        run: |
          kill $API_PID || true

      - name: 📊 Upload Dynamic Scan Reports
        uses: actions/upload-artifact@v4
        with:
          name: dynamic-security-reports
          path: |
            backend/dynamic-security-report.json

  # ===== SECURITY MONITORING =====
  security-monitoring:
    name: 📊 Security Monitoring
    runs-on: ubuntu-latest
    needs: [dependency-audit, static-analysis, container-security, dynamic-security]
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Security Dashboard Update
        run: |
          # Calculate security score
          DEPENDENCY_VULNS="${{ needs.dependency-audit.outputs.python-vulnerabilities || 0 }}"
          STATIC_ISSUES="${{ needs.static-analysis.outputs.security-issues || 0 }}"
          CONTAINER_VULNS="${{ needs.container-security.outputs.container-vulnerabilities || 0 }}"
          DYNAMIC_VULNS="${{ needs.dynamic-security.outputs.security-vulnerabilities || 0 }}"
          
          TOTAL_ISSUES=$((DEPENDENCY_VULNS + STATIC_ISSUES + CONTAINER_VULNS + DYNAMIC_VULNS))
          
          # Calculate security score (100 - issues)
          SECURITY_SCORE=$((100 - TOTAL_ISSUES))
          SECURITY_SCORE=$(($SECURITY_SCORE > 0 ? $SECURITY_SCORE : 0))
          
          echo "📊 Security Analysis Summary:"
          echo "  Dependencies: $DEPENDENCY_VULNS issues"
          echo "  Static Analysis: $STATIC_ISSUES issues"
          echo "  Container Security: $CONTAINER_VULNS issues"
          echo "  Dynamic Testing: $DYNAMIC_VULNS issues"
          echo "  Total Issues: $TOTAL_ISSUES"
          echo "  Security Score: $SECURITY_SCORE/100"
          
          # Create security badge
          if [ "$SECURITY_SCORE" -ge 90 ]; then
            BADGE_COLOR="brightgreen"
            BADGE_MESSAGE="excellent"
          elif [ "$SECURITY_SCORE" -ge 80 ]; then
            BADGE_COLOR="green"
            BADGE_MESSAGE="good"
          elif [ "$SECURITY_SCORE" -ge 70 ]; then
            BADGE_COLOR="yellow"
            BADGE_MESSAGE="fair"
          elif [ "$SECURITY_SCORE" -ge 60 ]; then
            BADGE_COLOR="orange"
            BADGE_MESSAGE="poor"
          else
            BADGE_COLOR="red"
            BADGE_MESSAGE="critical"
          fi
          
          echo "🏆 Security Status: $BADGE_MESSAGE ($SECURITY_SCORE/100)"

      - name: 📈 Update Security Metrics
        run: |
          # This would integrate with monitoring systems
          echo "Updating security metrics in monitoring dashboard..."
          
          # Example: Send metrics to CloudWatch, Grafana, etc.
          # aws cloudwatch put-metric-data --namespace "AnonymeMe/Security" \
          #   --metric-data MetricName=SecurityScore,Value=$SECURITY_SCORE

      - name: 🚨 Security Alert Threshold Check
        run: |
          TOTAL_CRITICAL_ISSUES=$((
            ${{ needs.dependency-audit.outputs.python-vulnerabilities || 0 }} +
            ${{ needs.static-analysis.outputs.security-issues || 0 }} +
            ${{ needs.container-security.outputs.container-vulnerabilities || 0 }} +
            ${{ needs.dynamic-security.outputs.security-vulnerabilities || 0 }}
          ))
          
          # Alert threshold: more than 5 security issues
          if [ "$TOTAL_CRITICAL_ISSUES" -gt 5 ]; then
            echo "🚨 SECURITY ALERT: $TOTAL_CRITICAL_ISSUES critical security issues found!"
            echo "::error::Security threshold exceeded - immediate action required"
            exit 1
          fi

      - name: 📝 Create Security Report
        uses: actions/github-script@v6
        with:
          script: |
            const dependencyVulns = '${{ needs.dependency-audit.outputs.python-vulnerabilities || 0 }}';
            const staticIssues = '${{ needs.static-analysis.outputs.security-issues || 0 }}';
            const containerVulns = '${{ needs.container-security.outputs.container-vulnerabilities || 0 }}';
            const dynamicVulns = '${{ needs.dynamic-security.outputs.security-vulnerabilities || 0 }}';
            
            const totalIssues = parseInt(dependencyVulns) + parseInt(staticIssues) + 
                              parseInt(containerVulns) + parseInt(dynamicVulns);
            
            const securityScore = Math.max(0, 100 - totalIssues);
            
            let severity = 'info';
            let emoji = '✅';
            
            if (totalIssues > 10) {
              severity = 'high';
              emoji = '🚨';
            } else if (totalIssues > 5) {
              severity = 'medium';
              emoji = '⚠️';
            }
            
            // Only create issue if there are significant security concerns
            if (totalIssues > 3) {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `${emoji} Security Scan Report - ${totalIssues} Issues Found`,
                body: `
                  ## ${emoji} Security Scan Results
                  
                  **Scan Date:** ${new Date().toISOString()}
                  **Security Score:** ${securityScore}/100
                  **Total Issues:** ${totalIssues}
                  
                  ### 📊 Issue Breakdown
                  - **Dependencies:** ${dependencyVulns} vulnerabilities
                  - **Static Analysis:** ${staticIssues} issues
                  - **Container Security:** ${containerVulns} vulnerabilities
                  - **Dynamic Testing:** ${dynamicVulns} vulnerabilities
                  
                  ### 🔗 Detailed Reports
                  - [Workflow Run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
                  - Download artifacts for detailed analysis
                  
                  ### 📋 Action Items
                  - [ ] Review dependency vulnerabilities
                  - [ ] Fix static analysis issues
                  - [ ] Update container base images
                  - [ ] Address dynamic security findings
                  
                  **Priority:** ${severity}
                  
                  /cc @team-security @team-devops
                `,
                labels: ['security', 'vulnerability', severity]
              });
            }

  # ===== SCHEDULED SECURITY REPORT =====
  weekly-security-report:
    name: 📋 Weekly Security Report
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' && github.ref == 'refs/heads/main'
    needs: [dependency-audit, static-analysis, container-security, dynamic-security]
    
    steps:
      - name: 📊 Generate Weekly Report
        uses: actions/github-script@v6
        with:
          script: |
            // Generate comprehensive weekly security report
            const report = `
              ## 📋 Weekly Security Report
              
              **Week of:** ${new Date().toISOString().split('T')[0]}
              
              ### 🔍 Security Scan Summary
              - **Dependency Vulnerabilities:** Tracked and managed
              - **Static Analysis:** Clean code practices maintained
              - **Container Security:** Images regularly updated
              - **Dynamic Testing:** API security validated
              
              ### 📈 Security Trends
              - Security score trending: Stable
              - New vulnerabilities: Monitored
              - Resolution time: Within SLA
              
              ### 🛡️ Security Posture
              - Authentication: Strong ✅
              - Authorization: Properly implemented ✅
              - Input validation: Comprehensive ✅
              - Rate limiting: Active ✅
              - Monitoring: 24/7 ✅
              
              ### 📋 Upcoming Actions
              - Continue automated security monitoring
              - Plan quarterly penetration testing
              - Update security documentation
              
              **Status:** 🟢 Secure
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📋 Weekly Security Report - ${new Date().toISOString().split('T')[0]}`,
              body: report,
              labels: ['security', 'report', 'weekly']
            });