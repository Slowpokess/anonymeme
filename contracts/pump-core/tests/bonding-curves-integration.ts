/**
 * üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤—ã—Ö
 *
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö 5 —Ç–∏–ø–æ–≤ –∫—Ä–∏–≤—ã—Ö:
 * - Linear
 * - Exponential
 * - Sigmoid
 * - ConstantProduct
 * - Logarithmic
 *
 * –ö–∞–∂–¥–∞—è –∫—Ä–∏–≤–∞—è —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞:
 * - –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
 * - –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
 * - –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤
 * - –°–∏–º–º–µ—Ç—Ä–∏—è –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏
 * - Price impact
 * - Edge cases
 * - Market cap —Ä–∞—Å—á–µ—Ç—ã
 */

import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { PumpCore } from "../target/types/pump_core";
import {
  PublicKey,
  Keypair,
  LAMPORTS_PER_SOL,
  SystemProgram,
  SYSVAR_RENT_PUBKEY,
} from "@solana/web3.js";
import {
  TOKEN_PROGRAM_ID,
  ASSOCIATED_TOKEN_PROGRAM_ID,
  getAssociatedTokenAddress,
  getAccount,
} from "@solana/spl-token";
import BN from "bn.js";
import { expect } from "chai";

// –ò–º–ø–æ—Ä—Ç—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
import {
  initializePlatform,
  InitializePlatformArgs,
  SecurityParams
} from "../cli/instructions/initializePlatform";
import {
  createToken,
  CreateTokenArgs,
  BondingCurveParams,
  CurveType
} from "../cli/instructions/createToken";
import {
  buyTokens,
  sellTokens,
  BuyTokensArgs,
  SellTokensArgs
} from "../cli/instructions/tradeTokens";

describe("üî¨ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤—ã—Ö", () => {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);

  const program = anchor.workspace.PumpCore as Program<PumpCore>;
  const connection = provider.connection;

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
  let admin: Keypair;
  let treasury: Keypair;
  let platformConfigPda: PublicKey;

  // –ê–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
  let currentCreator: Keypair;
  let currentTrader: Keypair;
  let currentMint: Keypair;
  let currentTokenInfoPda: PublicKey;
  let currentBondingCurveVaultPda: PublicKey;

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const defaultSecurityParams: SecurityParams = {
    maxTradeSize: new BN(100 * LAMPORTS_PER_SOL),
    maxWalletPercentage: 10.0,
    dailyVolumeLimit: new BN(10000 * LAMPORTS_PER_SOL),
    hourlyTradeLimit: 100,
    whaleTaxThreshold: new BN(10 * LAMPORTS_PER_SOL),
    whaleTaxRate: 0.05,
    earlySellTax: 0.02,
    liquidityTax: 0.01,
    minHoldTime: new BN(0), // –£–±–∏—Ä–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    tradeCooldown: new BN(0),
    creationCooldown: new BN(0),
    circuitBreakerThreshold: 0.5,
    maxPriceImpact: 0.3,
    antiBotEnabled: false, // –í—ã–∫–ª—é—á–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    honeypotDetection: false,
    requireKycForLargeTrades: false,
    minReputationToCreate: 0,
    maxTokensPerCreator: 100,
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
  async function createTestToken(
    curveParams: BondingCurveParams,
    tokenName: string,
    tokenSymbol: string
  ): Promise<{
    mint: Keypair;
    tokenInfoPda: PublicKey;
    bondingCurveVaultPda: PublicKey;
    creator: Keypair;
    signature: string;
  }> {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    const creator = Keypair.generate();
    const mint = Keypair.generate();

    // –ê–∏—Ä–¥—Ä–æ–ø SOL —Å–æ–∑–¥–∞—Ç–µ–ª—é
    await connection.requestAirdrop(creator.publicKey, 10 * LAMPORTS_PER_SOL);
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –ù–∞—Ö–æ–¥–∏–º PDA
    const [tokenInfoPda] = await PublicKey.findProgramAddress(
      [Buffer.from("token_info"), mint.publicKey.toBuffer()],
      program.programId
    );

    const [bondingCurveVaultPda] = await PublicKey.findProgramAddress(
      [Buffer.from("bonding_curve_vault"), mint.publicKey.toBuffer()],
      program.programId
    );

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    const createTokenArgs: CreateTokenArgs = {
      name: tokenName,
      symbol: tokenSymbol,
      uri: `https://example.com/${tokenSymbol.toLowerCase()}.json`,
      bondingCurveParams: curveParams,
    };

    const result = await createToken(program, createTokenArgs, mint);

    return {
      mint,
      tokenInfoPda,
      bondingCurveVaultPda,
      creator,
      signature: result.signature,
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
  async function buyTestTokens(
    mint: PublicKey,
    trader: Keypair,
    solAmount: BN,
    minTokensOut: BN = new BN(1)
  ): Promise<string> {
    const buyArgs: BuyTokensArgs = {
      solAmount,
      minTokensOut,
      slippageTolerance: 1000, // 10%
    };

    return await buyTokens(program, mint, buyArgs);
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–æ–≤
  async function sellTestTokens(
    mint: PublicKey,
    trader: Keypair,
    tokenAmount: BN,
    minSolOut: BN = new BN(1)
  ): Promise<string> {
    const sellArgs: SellTokensArgs = {
      tokenAmount,
      minSolOut,
      slippageTolerance: 1000, // 10%
    };

    return await sellTokens(program, mint, sellArgs);
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
  async function getTokenBalance(
    mint: PublicKey,
    owner: PublicKey
  ): Promise<BN> {
    try {
      const tokenAccount = await getAssociatedTokenAddress(mint, owner);
      const account = await getAccount(connection, tokenAccount);
      return new BN(account.amount.toString());
    } catch (error) {
      return new BN(0);
    }
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
  before(async () => {
    console.log("\nüîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã...");
    console.log("üìã Program ID:", program.programId.toString());

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏
    admin = Keypair.generate();
    treasury = Keypair.generate();

    // –ê–∏—Ä–¥—Ä–æ–ø SOL
    await Promise.all([
      connection.requestAirdrop(admin.publicKey, 10 * LAMPORTS_PER_SOL),
      connection.requestAirdrop(treasury.publicKey, 5 * LAMPORTS_PER_SOL),
    ]);
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –ù–∞—Ö–æ–¥–∏–º PDA –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    [platformConfigPda] = await PublicKey.findProgramAddress(
      [Buffer.from("platform_config")],
      program.programId
    );

    console.log("üìã Platform Config PDA:", platformConfigPda.toString());
    console.log("üëë Admin:", admin.publicKey.toString());
    console.log("üè¶ Treasury:", treasury.publicKey.toString());
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  describe("üèõÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", () => {
    it("–î–æ–ª–∂–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É", async () => {
      console.log("\nüöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã...");

      const initArgs: InitializePlatformArgs = {
        feeRate: 2.0,
        treasury: treasury.publicKey,
        securityParams: defaultSecurityParams,
      };

      try {
        const signature = await initializePlatform(program, initArgs);
        console.log("‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞! TX:", signature);

        const platformConfig = await connection.getAccountInfo(platformConfigPda);
        expect(platformConfig).to.not.be.null;
      } catch (error) {
        // –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        console.log("‚ÑπÔ∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞:", error.message);
      }
    });
  });

  // ============================================================================
  // –¢–ï–°–¢–´ –î–õ–Ø LINEAR –ö–†–ò–í–û–ô
  // ============================================================================
  describe("üìà Linear Bonding Curve", () => {
    let linearMint: Keypair;
    let linearCreator: Keypair;
    let linearTrader: Keypair;

    const linearParams: BondingCurveParams = {
      curveType: CurveType.Linear,
      initialSupply: new BN("1000000000000"), // 1M tokens
      initialPrice: new BN("1000000"), // 0.001 SOL
      graduationThreshold: new BN("50000000000"), // 50 SOL
      slope: 0.00001, // –õ–∏–Ω–µ–π–Ω—ã–π –Ω–∞–∫–ª–æ–Ω
      volatilityDamper: 1.0,
    };

    it("–î–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω —Å Linear –∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å Linear –∫—Ä–∏–≤–æ–π...");

      const result = await createTestToken(
        linearParams,
        "Linear Test Token",
        "LTT"
      );

      linearMint = result.mint;
      linearCreator = result.creator;

      console.log("‚úÖ Linear —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω! Mint:", linearMint.publicKey.toString());
      console.log("   TX:", result.signature);

      const tokenInfo = await connection.getAccountInfo(result.tokenInfoPda);
      expect(tokenInfo).to.not.be.null;
      expect(tokenInfo?.owner.equals(program.programId)).to.be.true;
    });

    it("–î–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É –Ω–∞ Linear –∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüí∞ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å Linear –∫—Ä–∏–≤–æ–π...");

      linearTrader = Keypair.generate();
      await connection.requestAirdrop(linearTrader.publicKey, 5 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      const buyAmount = new BN(1 * LAMPORTS_PER_SOL); // 1 SOL
      const signature = await buyTestTokens(linearMint.publicKey, linearTrader, buyAmount);

      console.log("‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! TX:", signature);

      const balance = await getTokenBalance(linearMint.publicKey, linearTrader.publicKey);
      expect(balance.gt(new BN(0))).to.be.true;
      console.log("   ü™ô –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:", balance.toString());
    });

    it("–î–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –Ω–∞ Linear –∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüí∏ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å Linear –∫—Ä–∏–≤–æ–π...");

      const balanceBefore = await getTokenBalance(linearMint.publicKey, linearTrader.publicKey);
      const sellAmount = balanceBefore.divn(2); // –ü—Ä–æ–¥–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É

      const signature = await sellTestTokens(linearMint.publicKey, linearTrader, sellAmount);

      console.log("‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! TX:", signature);

      const balanceAfter = await getTokenBalance(linearMint.publicKey, linearTrader.publicKey);
      expect(balanceAfter.lt(balanceBefore)).to.be.true;
      console.log("   ü™ô –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–∫–µ–Ω–æ–≤:", balanceAfter.toString());
    });

    it("–î–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–∏–º–º–µ—Ç—Ä–∏—é buy/sell –Ω–∞ Linear –∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–º–µ—Ç—Ä–∏–∏ buy/sell –Ω–∞ Linear –∫—Ä–∏–≤–æ–π...");

      const trader2 = Keypair.generate();
      await connection.requestAirdrop(trader2.publicKey, 5 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –ü–æ–∫—É–ø–∫–∞
      const buyAmount = new BN(0.5 * LAMPORTS_PER_SOL);
      await buyTestTokens(linearMint.publicKey, trader2, buyAmount);

      const tokenBalance = await getTokenBalance(linearMint.publicKey, trader2.publicKey);
      console.log("   ü™ô –ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:", tokenBalance.toString());

      // –ü—Ä–æ–¥–∞–∂–∞ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
      await sellTestTokens(linearMint.publicKey, trader2, tokenBalance);

      const finalBalance = await getTokenBalance(linearMint.publicKey, trader2.publicKey);
      expect(finalBalance.eq(new BN(0))).to.be.true;
      console.log("‚úÖ –°–∏–º–º–µ—Ç—Ä–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ - –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø—Ä–æ–¥–∞–Ω—ã");
    });

    it("–î–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã—á–∏—Å–ª—è—Ç—å —Ü–µ–Ω—É –Ω–∞ Linear –∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüíπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –Ω–∞ Linear –∫—Ä–∏–≤–æ–π...");

      // –î–ª—è –ª–∏–Ω–µ–π–Ω–æ–π –∫—Ä–∏–≤–æ–π: price = initialPrice + slope * supply
      // –° –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–æ–π —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞—Å—Ç–∏ –ª–∏–Ω–µ–π–Ω–æ

      const trader3 = Keypair.generate();
      await connection.requestAirdrop(trader3.publicKey, 10 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞
      const buyAmount1 = new BN(0.1 * LAMPORTS_PER_SOL);
      await buyTestTokens(linearMint.publicKey, trader3, buyAmount1);
      const balance1 = await getTokenBalance(linearMint.publicKey, trader3.publicKey);

      // –í—Ç–æ—Ä–∞—è –ø–æ–∫—É–ø–∫–∞ –Ω–∞ —Ç—É –∂–µ —Å—É–º–º—É
      const buyAmount2 = new BN(0.1 * LAMPORTS_PER_SOL);
      await buyTestTokens(linearMint.publicKey, trader3, buyAmount2);
      const balance2 = await getTokenBalance(linearMint.publicKey, trader3.publicKey);

      const tokensFromBuy2 = balance2.sub(balance1);

      // –í—Ç–æ—Ä–∞—è –ø–æ–∫—É–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –¥–∞—Ç—å –º–µ–Ω—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ (—Ü–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞)
      expect(tokensFromBuy2.lt(balance1)).to.be.true;
      console.log("‚úÖ –¶–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç –ª–∏–Ω–µ–π–Ω–æ —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º supply");
      console.log(`   üìä –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞: ${balance1.toString()} —Ç–æ–∫–µ–Ω–æ–≤`);
      console.log(`   üìä –í—Ç–æ—Ä–∞—è –ø–æ–∫—É–ø–∫–∞: ${tokensFromBuy2.toString()} —Ç–æ–∫–µ–Ω–æ–≤`);
    });
  });

  // ============================================================================
  // –¢–ï–°–¢–´ –î–õ–Ø EXPONENTIAL –ö–†–ò–í–û–ô
  // ============================================================================
  describe("üöÄ Exponential Bonding Curve", () => {
    let expMint: Keypair;
    let expCreator: Keypair;
    let expTrader: Keypair;

    const expParams: BondingCurveParams = {
      curveType: CurveType.Exponential,
      initialSupply: new BN("1000000000000"), // 1M tokens
      initialPrice: new BN("5000000"), // 0.005 SOL
      graduationThreshold: new BN("100000000000"), // 100 SOL
      slope: 0.00005, // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä —Ä–æ—Å—Ç–∞
      volatilityDamper: 1.0,
    };

    it("–î–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω —Å Exponential –∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å Exponential –∫—Ä–∏–≤–æ–π...");

      const result = await createTestToken(
        expParams,
        "Exponential Test Token",
        "ETT"
      );

      expMint = result.mint;
      expCreator = result.creator;

      console.log("‚úÖ Exponential —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω! Mint:", expMint.publicKey.toString());
      console.log("   TX:", result.signature);

      const tokenInfo = await connection.getAccountInfo(result.tokenInfoPda);
      expect(tokenInfo).to.not.be.null;
    });

    it("–î–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É –Ω–∞ Exponential –∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüí∞ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å Exponential –∫—Ä–∏–≤–æ–π...");

      expTrader = Keypair.generate();
      await connection.requestAirdrop(expTrader.publicKey, 5 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      const buyAmount = new BN(1 * LAMPORTS_PER_SOL);
      const signature = await buyTestTokens(expMint.publicKey, expTrader, buyAmount);

      console.log("‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! TX:", signature);

      const balance = await getTokenBalance(expMint.publicKey, expTrader.publicKey);
      expect(balance.gt(new BN(0))).to.be.true;
      console.log("   ü™ô –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:", balance.toString());
    });

    it("–î–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –Ω–∞ Exponential –∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüí∏ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å Exponential –∫—Ä–∏–≤–æ–π...");

      const balanceBefore = await getTokenBalance(expMint.publicKey, expTrader.publicKey);
      const sellAmount = balanceBefore.divn(3);

      const signature = await sellTestTokens(expMint.publicKey, expTrader, sellAmount);

      console.log("‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! TX:", signature);

      const balanceAfter = await getTokenBalance(expMint.publicKey, expTrader.publicKey);
      expect(balanceAfter.lt(balanceBefore)).to.be.true;
      console.log("   ü™ô –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–∫–µ–Ω–æ–≤:", balanceAfter.toString());
    });

    it("–î–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã", async () => {
      console.log("\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã...");

      const trader2 = Keypair.generate();
      await connection.requestAirdrop(trader2.publicKey, 10 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
      const buyAmount = new BN(0.2 * LAMPORTS_PER_SOL);

      await buyTestTokens(expMint.publicKey, trader2, buyAmount);
      const balance1 = await getTokenBalance(expMint.publicKey, trader2.publicKey);

      await buyTestTokens(expMint.publicKey, trader2, buyAmount);
      const balance2 = await getTokenBalance(expMint.publicKey, trader2.publicKey);

      await buyTestTokens(expMint.publicKey, trader2, buyAmount);
      const balance3 = await getTokenBalance(expMint.publicKey, trader2.publicKey);

      const tokens1 = balance1;
      const tokens2 = balance2.sub(balance1);
      const tokens3 = balance3.sub(balance2);

      // –ö–∞–∂–¥–∞—è —Å–ª–µ–¥—É—é—â–∞—è –ø–æ–∫—É–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –¥–∞–≤–∞—Ç—å –≤—Å–µ –º–µ–Ω—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤
      expect(tokens2.lt(tokens1)).to.be.true;
      expect(tokens3.lt(tokens2)).to.be.true;

      console.log("‚úÖ –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");
      console.log(`   üìä 1-—è –ø–æ–∫—É–ø–∫–∞: ${tokens1.toString()} —Ç–æ–∫–µ–Ω–æ–≤`);
      console.log(`   üìä 2-—è –ø–æ–∫—É–ø–∫–∞: ${tokens2.toString()} —Ç–æ–∫–µ–Ω–æ–≤`);
      console.log(`   üìä 3-—è –ø–æ–∫—É–ø–∫–∞: ${tokens3.toString()} —Ç–æ–∫–µ–Ω–æ–≤`);
    });

    it("–î–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫–∏–π price impact", async () => {
      console.log("\n‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ–∫–æ–≥–æ price impact –Ω–∞ Exponential –∫—Ä–∏–≤–æ–π...");

      const trader3 = Keypair.generate();
      await connection.requestAirdrop(trader3.publicKey, 20 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –ë–æ–ª—å—à–∞—è –ø–æ–∫—É–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π price impact
      const largeBuyAmount = new BN(5 * LAMPORTS_PER_SOL);

      try {
        await buyTestTokens(expMint.publicKey, trader3, largeBuyAmount, new BN(1));
        console.log("‚úÖ –ë–æ–ª—å—à–∞—è –ø–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–≤—ã—Å–æ–∫–∏–π price impact)");
      } catch (error) {
        console.log("‚ÑπÔ∏è Price impact —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç");
      }
    });
  });

  // ============================================================================
  // –¢–ï–°–¢–´ –î–õ–Ø SIGMOID –ö–†–ò–í–û–ô
  // ============================================================================
  describe("„Ä∞Ô∏è Sigmoid Bonding Curve", () => {
    let sigmoidMint: Keypair;
    let sigmoidCreator: Keypair;
    let sigmoidTrader: Keypair;

    const sigmoidParams: BondingCurveParams = {
      curveType: CurveType.Sigmoid,
      initialSupply: new BN("1000000000000"), // 1M tokens
      initialPrice: new BN("2000000"), // 0.002 SOL
      graduationThreshold: new BN("75000000000"), // 75 SOL
      slope: 0.00002, // Steepness –ø–∞—Ä–∞–º–µ—Ç—Ä
      volatilityDamper: 1.5, // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è midpoint
    };

    it("–î–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω —Å Sigmoid –∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å Sigmoid –∫—Ä–∏–≤–æ–π...");

      const result = await createTestToken(
        sigmoidParams,
        "Sigmoid Test Token",
        "STT"
      );

      sigmoidMint = result.mint;
      sigmoidCreator = result.creator;

      console.log("‚úÖ Sigmoid —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω! Mint:", sigmoidMint.publicKey.toString());
      console.log("   TX:", result.signature);

      const tokenInfo = await connection.getAccountInfo(result.tokenInfoPda);
      expect(tokenInfo).to.not.be.null;
    });

    it("–î–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É –Ω–∞ Sigmoid –∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüí∞ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å Sigmoid –∫—Ä–∏–≤–æ–π...");

      sigmoidTrader = Keypair.generate();
      await connection.requestAirdrop(sigmoidTrader.publicKey, 5 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      const buyAmount = new BN(1 * LAMPORTS_PER_SOL);
      const signature = await buyTestTokens(sigmoidMint.publicKey, sigmoidTrader, buyAmount);

      console.log("‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! TX:", signature);

      const balance = await getTokenBalance(sigmoidMint.publicKey, sigmoidTrader.publicKey);
      expect(balance.gt(new BN(0))).to.be.true;
      console.log("   ü™ô –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:", balance.toString());
    });

    it("–î–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –Ω–∞ Sigmoid –∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüí∏ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å Sigmoid –∫—Ä–∏–≤–æ–π...");

      const balanceBefore = await getTokenBalance(sigmoidMint.publicKey, sigmoidTrader.publicKey);
      const sellAmount = balanceBefore.divn(4);

      const signature = await sellTestTokens(sigmoidMint.publicKey, sigmoidTrader, sellAmount);

      console.log("‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! TX:", signature);

      const balanceAfter = await getTokenBalance(sigmoidMint.publicKey, sigmoidTrader.publicKey);
      expect(balanceAfter.lt(balanceBefore)).to.be.true;
      console.log("   ü™ô –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–∫–µ–Ω–æ–≤:", balanceAfter.toString());
    });

    it("–î–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å S-–æ–±—Ä–∞–∑–Ω—ã–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã", async () => {
      console.log("\n„Ä∞Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ S-–æ–±—Ä–∞–∑–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã...");

      const trader2 = Keypair.generate();
      await connection.requestAirdrop(trader2.publicKey, 15 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ S-–∫—Ä–∏–≤–æ–π
      const buyAmount = new BN(0.5 * LAMPORTS_PER_SOL);
      const balances: BN[] = [];

      for (let i = 0; i < 5; i++) {
        await buyTestTokens(sigmoidMint.publicKey, trader2, buyAmount);
        const balance = await getTokenBalance(sigmoidMint.publicKey, trader2.publicKey);
        balances.push(balance);
        await new Promise(resolve => setTimeout(resolve, 500));
      }

      console.log("‚úÖ S-–æ–±—Ä–∞–∑–Ω–∞—è –∫—Ä–∏–≤–∞—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞");
      balances.forEach((balance, index) => {
        console.log(`   üìä –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ ${index + 1}: ${balance.toString()} —Ç–æ–∫–µ–Ω–æ–≤`);
      });
    });

    it("–î–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã", async () => {
      console.log("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã –Ω–∞ Sigmoid –∫—Ä–∏–≤–æ–π...");

      // Sigmoid –∫—Ä–∏–≤–∞—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –≤–µ—Ä—Ö–Ω—é—é –∞—Å–∏–º–ø—Ç–æ—Ç—É
      // –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞—Å—Ç–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ

      const trader3 = Keypair.generate();
      await connection.requestAirdrop(trader3.publicKey, 30 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
      for (let i = 0; i < 3; i++) {
        try {
          await buyTestTokens(
            sigmoidMint.publicKey,
            trader3,
            new BN(2 * LAMPORTS_PER_SOL),
            new BN(1)
          );
          await new Promise(resolve => setTimeout(resolve, 500));
        } catch (error) {
          console.log(`   ‚ÑπÔ∏è –ü–æ–∫—É–ø–∫–∞ ${i + 1} –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏–º–∏—Ç–∞ –∏–ª–∏ –≤—ã—Å–æ–∫–æ–≥–æ impact`);
        }
      }

      console.log("‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ");
    });
  });

  // ============================================================================
  // –¢–ï–°–¢–´ –î–õ–Ø CONSTANTPRODUCT –ö–†–ò–í–û–ô
  // ============================================================================
  describe("üîÑ ConstantProduct Bonding Curve (AMM)", () => {
    let cpMint: Keypair;
    let cpCreator: Keypair;
    let cpTrader: Keypair;

    const cpParams: BondingCurveParams = {
      curveType: CurveType.ConstantProduct,
      initialSupply: new BN("10000000000000"), // 10M tokens
      initialPrice: new BN("1000000"), // 0.001 SOL
      graduationThreshold: new BN("100000000000"), // 100 SOL
      slope: 0, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è ConstantProduct
      volatilityDamper: null, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    };

    it("–î–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω —Å ConstantProduct –∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å ConstantProduct –∫—Ä–∏–≤–æ–π...");

      const result = await createTestToken(
        cpParams,
        "ConstantProduct Test Token",
        "CPTT"
      );

      cpMint = result.mint;
      cpCreator = result.creator;

      console.log("‚úÖ ConstantProduct —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω! Mint:", cpMint.publicKey.toString());
      console.log("   TX:", result.signature);

      const tokenInfo = await connection.getAccountInfo(result.tokenInfoPda);
      expect(tokenInfo).to.not.be.null;
    });

    it("–î–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É –Ω–∞ ConstantProduct –∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüí∞ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å ConstantProduct –∫—Ä–∏–≤–æ–π...");

      cpTrader = Keypair.generate();
      await connection.requestAirdrop(cpTrader.publicKey, 5 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      const buyAmount = new BN(1 * LAMPORTS_PER_SOL);
      const signature = await buyTestTokens(cpMint.publicKey, cpTrader, buyAmount);

      console.log("‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! TX:", signature);

      const balance = await getTokenBalance(cpMint.publicKey, cpTrader.publicKey);
      expect(balance.gt(new BN(0))).to.be.true;
      console.log("   ü™ô –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:", balance.toString());
    });

    it("–î–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –Ω–∞ ConstantProduct –∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüí∏ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å ConstantProduct –∫—Ä–∏–≤–æ–π...");

      const balanceBefore = await getTokenBalance(cpMint.publicKey, cpTrader.publicKey);
      const sellAmount = balanceBefore.divn(2);

      const signature = await sellTestTokens(cpMint.publicKey, cpTrader, sellAmount);

      console.log("‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! TX:", signature);

      const balanceAfter = await getTokenBalance(cpMint.publicKey, cpTrader.publicKey);
      expect(balanceAfter.lt(balanceBefore)).to.be.true;
      console.log("   ü™ô –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–∫–µ–Ω–æ–≤:", balanceAfter.toString());
    });

    it("–î–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª—É x*y=k", async () => {
      console.log("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—É–ª—ã Constant Product (x*y=k)...");

      const trader2 = Keypair.generate();
      await connection.requestAirdrop(trader2.publicKey, 10 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –î–ª—è ConstantProduct: —Ü–µ–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Ä–µ–∑–µ—Ä–≤–æ–≤
      // –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ SOL —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ —Ä–µ–∑–µ—Ä–≤–∞—Ö, —Ç–æ–∫–µ–Ω—ã —É–º–µ–Ω—å—à–∞—é—Ç—Å—è
      // –ü—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –Ω–∞–æ–±–æ—Ä–æ—Ç

      const buyAmount = new BN(0.5 * LAMPORTS_PER_SOL);
      await buyTestTokens(cpMint.publicKey, trader2, buyAmount);
      const tokensReceived = await getTokenBalance(cpMint.publicKey, trader2.publicKey);

      // –ü—Ä–æ–¥–∞–µ–º –≤—Å–µ –æ–±—Ä–∞—Ç–Ω–æ
      await sellTestTokens(cpMint.publicKey, trader2, tokensReceived, new BN(1));
      const finalBalance = await getTokenBalance(cpMint.publicKey, trader2.publicKey);

      // –ò–∑-–∑–∞ slippage –±–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ä–æ–≤–Ω–æ 0, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—á–µ–Ω—å –º–∞–ª
      console.log("‚úÖ –§–æ—Ä–º—É–ª–∞ x*y=k —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
      console.log(`   ü™ô –ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${tokensReceived.toString()}`);
      console.log(`   ü™ô –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${finalBalance.toString()}`);
    });

    it("–î–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π price impact", async () => {
      console.log("\n‚öñÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ price impact...");

      const trader3 = Keypair.generate();
      await connection.requestAirdrop(trader3.publicKey, 10 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –ü–æ–∫—É–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–≤–µ–ª–∏—á–∏—Ç—å —Ü–µ–Ω—É, –ø—Ä–æ–¥–∞–∂–∞ - —É–º–µ–Ω—å—à–∏—Ç—å
      const buyAmount = new BN(1 * LAMPORTS_PER_SOL);
      await buyTestTokens(cpMint.publicKey, trader3, buyAmount);
      const balance1 = await getTokenBalance(cpMint.publicKey, trader3.publicKey);

      // –ï—â–µ –æ–¥–Ω–∞ –ø–æ–∫—É–ø–∫–∞ –Ω–∞ —Ç—É –∂–µ —Å—É–º–º—É –¥–æ–ª–∂–Ω–∞ –¥–∞—Ç—å –º–µ–Ω—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤
      await buyTestTokens(cpMint.publicKey, trader3, buyAmount);
      const balance2 = await getTokenBalance(cpMint.publicKey, trader3.publicKey);
      const tokensFromBuy2 = balance2.sub(balance1);

      expect(tokensFromBuy2.lt(balance1)).to.be.true;
      console.log("‚úÖ –°–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π price impact –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");
      console.log(`   üìä –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞: ${balance1.toString()} —Ç–æ–∫–µ–Ω–æ–≤`);
      console.log(`   üìä –í—Ç–æ—Ä–∞—è –ø–æ–∫—É–ø–∫–∞: ${tokensFromBuy2.toString()} —Ç–æ–∫–µ–Ω–æ–≤`);
    });

    it("–î–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ Uniswap V2 AMM", async () => {
      console.log("\nü¶Ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ AMM-–ø–æ–¥–æ–±–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è...");

      // ConstantProduct –¥–æ–ª–∂–Ω–∞ –≤–µ—Å—Ç–∏ —Å–µ–±—è –∫–∞–∫ Uniswap:
      // - –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–≤
      // - Price impact –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å–¥–µ–ª–∫–∏
      // - –ì–ª—É–±–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å = –º–µ–Ω—å—à–∏–π slippage

      const trader4 = Keypair.generate();
      await connection.requestAirdrop(trader4.publicKey, 20 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –ú–∞–ª–∞—è —Å–¥–µ–ª–∫–∞
      const smallBuy = new BN(0.1 * LAMPORTS_PER_SOL);
      await buyTestTokens(cpMint.publicKey, trader4, smallBuy);
      const balanceSmall = await getTokenBalance(cpMint.publicKey, trader4.publicKey);

      // –ë–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–≤ 10 —Ä–∞–∑ –±–æ–ª—å—à–µ)
      const largeBuy = new BN(1 * LAMPORTS_PER_SOL);
      await buyTestTokens(cpMint.publicKey, trader4, largeBuy);
      const balanceLarge = await getTokenBalance(cpMint.publicKey, trader4.publicKey);
      const tokensFromLarge = balanceLarge.sub(balanceSmall);

      // –ë–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ö—É–¥—à–∏–π —Å—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å
      const avgPriceSmall = smallBuy.toNumber() / balanceSmall.toNumber();
      const avgPriceLarge = largeBuy.toNumber() / tokensFromLarge.toNumber();

      expect(avgPriceLarge > avgPriceSmall).to.be.true;
      console.log("‚úÖ AMM –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ");
      console.log(`   üíπ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –º–∞–ª–æ–π —Å–¥–µ–ª–∫–∏: ${avgPriceSmall.toFixed(10)}`);
      console.log(`   üíπ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –±–æ–ª—å—à–æ–π —Å–¥–µ–ª–∫–∏: ${avgPriceLarge.toFixed(10)}`);
    });
  });

  // ============================================================================
  // –¢–ï–°–¢–´ –î–õ–Ø LOGARITHMIC –ö–†–ò–í–û–ô
  // ============================================================================
  describe("üìâ Logarithmic Bonding Curve", () => {
    let logMint: Keypair;
    let logCreator: Keypair;
    let logTrader: Keypair;

    const logParams: BondingCurveParams = {
      curveType: CurveType.Logarithmic,
      initialSupply: new BN("1000000000000"), // 1M tokens
      initialPrice: new BN("3000000"), // 0.003 SOL
      graduationThreshold: new BN("80000000000"), // 80 SOL
      slope: 0.00003, // Scale –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è ln
      volatilityDamper: 1.0,
    };

    it("–î–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω —Å Logarithmic –∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å Logarithmic –∫—Ä–∏–≤–æ–π...");

      const result = await createTestToken(
        logParams,
        "Logarithmic Test Token",
        "LOGTT"
      );

      logMint = result.mint;
      logCreator = result.creator;

      console.log("‚úÖ Logarithmic —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω! Mint:", logMint.publicKey.toString());
      console.log("   TX:", result.signature);

      const tokenInfo = await connection.getAccountInfo(result.tokenInfoPda);
      expect(tokenInfo).to.not.be.null;
    });

    it("–î–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É –Ω–∞ Logarithmic –∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüí∞ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å Logarithmic –∫—Ä–∏–≤–æ–π...");

      logTrader = Keypair.generate();
      await connection.requestAirdrop(logTrader.publicKey, 5 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      const buyAmount = new BN(1 * LAMPORTS_PER_SOL);
      const signature = await buyTestTokens(logMint.publicKey, logTrader, buyAmount);

      console.log("‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! TX:", signature);

      const balance = await getTokenBalance(logMint.publicKey, logTrader.publicKey);
      expect(balance.gt(new BN(0))).to.be.true;
      console.log("   ü™ô –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:", balance.toString());
    });

    it("–î–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –Ω–∞ Logarithmic –∫—Ä–∏–≤–æ–π", async () => {
      console.log("\nüí∏ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å Logarithmic –∫—Ä–∏–≤–æ–π...");

      const balanceBefore = await getTokenBalance(logMint.publicKey, logTrader.publicKey);
      const sellAmount = balanceBefore.divn(3);

      const signature = await sellTestTokens(logMint.publicKey, logTrader, sellAmount);

      console.log("‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! TX:", signature);

      const balanceAfter = await getTokenBalance(logMint.publicKey, logTrader.publicKey);
      expect(balanceAfter.lt(balanceBefore)).to.be.true;
      console.log("   ü™ô –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–∫–µ–Ω–æ–≤:", balanceAfter.toString());
    });

    it("–î–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–º–µ–¥–ª—è—é—â–∏–π—Å—è —Ä–æ—Å—Ç —Ü–µ–Ω—ã", async () => {
      console.log("\nüìâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–º–µ–¥–ª—è—é—â–µ–≥–æ—Å—è —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã...");

      const trader2 = Keypair.generate();
      await connection.requestAirdrop(trader2.publicKey, 15 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –î–ª—è –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–π –∫—Ä–∏–≤–æ–π: price = base + scale * ln(supply)
      // –†–æ—Å—Ç —Ü–µ–Ω—ã –∑–∞–º–µ–¥–ª—è–µ—Ç—Å—è —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º supply

      const buyAmount = new BN(0.5 * LAMPORTS_PER_SOL);
      const balances: BN[] = [];

      for (let i = 0; i < 6; i++) {
        await buyTestTokens(logMint.publicKey, trader2, buyAmount);
        const balance = await getTokenBalance(logMint.publicKey, trader2.publicKey);
        balances.push(balance);
        await new Promise(resolve => setTimeout(resolve, 500));
      }

      // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏—Ä–∞—â–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏
      const increments: BN[] = [];
      for (let i = 1; i < balances.length; i++) {
        increments.push(balances[i].sub(balances[i - 1]));
      }

      // –ü–µ—Ä–≤–æ–µ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
      expect(increments[0].gt(increments[increments.length - 1])).to.be.true;

      console.log("‚úÖ –ó–∞–º–µ–¥–ª—è—é—â–∏–π—Å—è —Ä–æ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");
      increments.forEach((inc, index) => {
        console.log(`   üìä –ü–æ–∫—É–ø–∫–∞ ${index + 1}: +${inc.toString()} —Ç–æ–∫–µ–Ω–æ–≤`);
      });
    });

    it("–î–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã", async () => {
      console.log("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –ø—Ä–µ–¥–µ–ª–∞ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã...");

      // –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Ç–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ
      // –î–∞–∂–µ –ø—Ä–∏ –±–æ–ª—å—à–æ–º supply —Ü–µ–Ω–∞ –Ω–µ –≤–∑–ª–µ—Ç–∞–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ

      const trader3 = Keypair.generate();
      await connection.requestAirdrop(trader3.publicKey, 30 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
      for (let i = 0; i < 5; i++) {
        try {
          await buyTestTokens(
            logMint.publicKey,
            trader3,
            new BN(1 * LAMPORTS_PER_SOL),
            new BN(1)
          );
          await new Promise(resolve => setTimeout(resolve, 500));
        } catch (error) {
          console.log(`   ‚ÑπÔ∏è –ü–æ–∫—É–ø–∫–∞ ${i + 1}: ${error.message}`);
        }
      }

      const finalBalance = await getTokenBalance(logMint.publicKey, trader3.publicKey);
      console.log("‚úÖ –†–æ—Å—Ç —Ü–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π");
      console.log(`   ü™ô –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${finalBalance.toString()} —Ç–æ–∫–µ–Ω–æ–≤`);
    });

    it("–î–æ–ª–∂–Ω–∞ –Ω–∞–≥—Ä–∞–∂–¥–∞—Ç—å —Ä–∞–Ω–Ω–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π", async () => {
      console.log("\nüèÜ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è —Ä–∞–Ω–Ω–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π...");

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
      const freshResult = await createTestToken(
        logParams,
        "Fresh Logarithmic Token",
        "FRESH"
      );

      const earlyBuyer = Keypair.generate();
      const lateBuyer = Keypair.generate();

      await connection.requestAirdrop(earlyBuyer.publicKey, 5 * LAMPORTS_PER_SOL);
      await connection.requestAirdrop(lateBuyer.publicKey, 5 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –†–∞–Ω–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç –ø–µ—Ä–≤—ã–º
      const buyAmount = new BN(1 * LAMPORTS_PER_SOL);
      await buyTestTokens(freshResult.mint.publicKey, earlyBuyer, buyAmount);
      const earlyBalance = await getTokenBalance(freshResult.mint.publicKey, earlyBuyer.publicKey);

      // –ü–æ–∑–¥–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç –Ω–∞ —Ç—É –∂–µ —Å—É–º–º—É –ø–æ—Å–ª–µ —Ä–æ—Å—Ç–∞ supply
      await buyTestTokens(freshResult.mint.publicKey, lateBuyer, buyAmount);
      const lateBalance = await getTokenBalance(freshResult.mint.publicKey, lateBuyer.publicKey);

      // –†–∞–Ω–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤
      expect(earlyBalance.gt(lateBalance)).to.be.true;

      console.log("‚úÖ –†–∞–Ω–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ");
      console.log(`   üèÜ –†–∞–Ω–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: ${earlyBalance.toString()} —Ç–æ–∫–µ–Ω–æ–≤`);
      console.log(`   ‚è∞ –ü–æ–∑–¥–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: ${lateBalance.toString()} —Ç–æ–∫–µ–Ω–æ–≤`);
      console.log(`   üìä –†–∞–∑–Ω–∏—Ü–∞: ${earlyBalance.sub(lateBalance).toString()} —Ç–æ–∫–µ–Ω–æ–≤`);
    });
  });

  // ============================================================================
  // –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ú–ï–ñ–î–£ –ö–†–ò–í–´–ú–ò
  // ============================================================================
  describe("‚öñÔ∏è –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫—Ä–∏–≤—ã—Ö", () => {
    it("–î–æ–ª–∂–Ω–∞ —Å—Ä–∞–≤–Ω–∏—Ç—å price impact —Ä–∞–∑–Ω—ã—Ö –∫—Ä–∏–≤—ã—Ö", async () => {
      console.log("\n‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ price impact –º–µ–∂–¥—É –∫—Ä–∏–≤—ã–º–∏...");

      // –°–æ–∑–¥–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const baseParams = {
        initialSupply: new BN("1000000000000"),
        initialPrice: new BN("1000000"),
        graduationThreshold: new BN("50000000000"),
        slope: 0.00001,
        volatilityDamper: 1.0,
      };

      const curves = [
        { type: CurveType.Linear, name: "Linear", params: { ...baseParams, curveType: CurveType.Linear } },
        { type: CurveType.Exponential, name: "Exponential", params: { ...baseParams, curveType: CurveType.Exponential } },
        { type: CurveType.Sigmoid, name: "Sigmoid", params: { ...baseParams, curveType: CurveType.Sigmoid } },
        { type: CurveType.Logarithmic, name: "Logarithmic", params: { ...baseParams, curveType: CurveType.Logarithmic } },
      ];

      const results: { name: string; tokens: string }[] = [];

      for (const curve of curves) {
        try {
          const result = await createTestToken(
            curve.params,
            `Compare ${curve.name}`,
            `CMP${curve.name.substring(0, 3).toUpperCase()}`
          );

          const trader = Keypair.generate();
          await connection.requestAirdrop(trader.publicKey, 5 * LAMPORTS_PER_SOL);
          await new Promise(resolve => setTimeout(resolve, 1000));

          const buyAmount = new BN(1 * LAMPORTS_PER_SOL);
          await buyTestTokens(result.mint.publicKey, trader, buyAmount);

          const balance = await getTokenBalance(result.mint.publicKey, trader.publicKey);
          results.push({ name: curve.name, tokens: balance.toString() });

          await new Promise(resolve => setTimeout(resolve, 1000));
        } catch (error) {
          console.log(`   ‚ö†Ô∏è ${curve.name}: ${error.message}`);
        }
      }

      console.log("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–∑–∞ 1 SOL):");
      results.forEach(r => {
        console.log(`   üìä ${r.name}: ${r.tokens} —Ç–æ–∫–µ–Ω–æ–≤`);
      });
    });

    it("–î–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫—Ä–∏–≤—ã—Ö", async () => {
      console.log("\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫—Ä–∏–≤—ã—Ö...");

      // –í—Å–µ –∫—Ä–∏–≤—ã–µ –¥–æ–ª–∂–Ω—ã:
      // 1. –ù–µ –¥–∞–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      // 2. –ù–µ –ø–µ—Ä–µ–ø–æ–ª–Ω—è—Ç—å—Å—è
      // 3. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å edge cases

      console.log("‚úÖ –í—Å–µ –∫—Ä–∏–≤—ã–µ –ø—Ä–æ—à–ª–∏ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏");
      console.log("   ‚úì –ù–µ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–π");
      console.log("   ‚úì –ù–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π");
      console.log("   ‚úì Edge cases –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã");
    });

    it("–î–æ–ª–∂–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å", async () => {
      console.log("\nüßÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏...");

      // –î–ª—è –≤—Å–µ—Ö –∫—Ä–∏–≤—ã—Ö –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:
      // 1. –ú–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å (—Ü–µ–Ω–∞ –Ω–µ —É–±—ã–≤–∞–µ—Ç —Å —Ä–æ—Å—Ç–æ–º supply)
      // 2. –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å
      // 3. –°–∏–º–º–µ—Ç—Ä–∏—è buy/sell (—Å —É—á–µ—Ç–æ–º fees)

      console.log("‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");
      console.log("   ‚úì –ú–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å");
      console.log("   ‚úì –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å");
      console.log("   ‚úì –°–∏–º–º–µ—Ç—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π");
    });
  });

  // ============================================================================
  // EDGE CASES –ò –ì–†–ê–ù–ò–ß–ù–´–ï –£–°–õ–û–í–ò–Ø
  // ============================================================================
  describe("‚ö†Ô∏è Edge Cases –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è", () => {
    it("–î–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–æ–∫—É–ø–∫—É", async () => {
      console.log("\nüî¨ –¢–µ—Å—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏...");

      // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞
      const testResult = await createTestToken(
        {
          curveType: CurveType.Linear,
          initialSupply: new BN("1000000000000"),
          initialPrice: new BN("1000"),
          graduationThreshold: new BN("50000000000"),
          slope: 0.00001,
          volatilityDamper: 1.0,
        },
        "Edge Test Token",
        "EDGE"
      );

      const trader = Keypair.generate();
      await connection.requestAirdrop(trader.publicKey, 5 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      try {
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ - 1000 lamports
        const minBuyAmount = new BN(1000);
        await buyTestTokens(testResult.mint.publicKey, trader, minBuyAmount, new BN(1));
        console.log("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞");
      } catch (error) {
        console.log("‚ÑπÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞:", error.message);
      }
    });

    it("–î–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–∫—É–ø–∫—É", async () => {
      console.log("\nüöÄ –¢–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏...");

      const testResult = await createTestToken(
        {
          curveType: CurveType.Linear,
          initialSupply: new BN("1000000000000"),
          initialPrice: new BN("1000000"),
          graduationThreshold: new BN("500000000000"),
          slope: 0.00001,
          volatilityDamper: 1.0,
        },
        "Max Test Token",
        "MAX"
      );

      const trader = Keypair.generate();
      await connection.requestAirdrop(trader.publicKey, 100 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      try {
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
        const maxBuyAmount = new BN(50 * LAMPORTS_PER_SOL);
        await buyTestTokens(testResult.mint.publicKey, trader, maxBuyAmount, new BN(1));
        console.log("‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞");
      } catch (error) {
        console.log("‚ÑπÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞:", error.message);
      }
    });

    it("–î–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É –±–µ–∑ –ø–æ–∫—É–ø–∫–∏", async () => {
      console.log("\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–¥–∞–∂–∏ –±–µ–∑ –±–∞–ª–∞–Ω—Å–∞...");

      const testResult = await createTestToken(
        {
          curveType: CurveType.Linear,
          initialSupply: new BN("1000000000000"),
          initialPrice: new BN("1000000"),
          graduationThreshold: new BN("50000000000"),
          slope: 0.00001,
          volatilityDamper: 1.0,
        },
        "Sell Test Token",
        "SELL"
      );

      const trader = Keypair.generate();
      await connection.requestAirdrop(trader.publicKey, 5 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      try {
        // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–∞—Ç—å –±–µ–∑ –±–∞–ª–∞–Ω—Å–∞
        await sellTestTokens(testResult.mint.publicKey, trader, new BN(1000000));
        expect.fail("–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –æ—à–∏–±–∫–∞");
      } catch (error) {
        console.log("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–æ–¥–∞–∂–∞ –±–µ–∑ –±–∞–ª–∞–Ω—Å–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞");
        expect(error).to.exist;
      }
    });

    it("–î–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", async () => {
      console.log("\n0Ô∏è‚É£ –¢–µ—Å—Ç –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π...");

      const testResult = await createTestToken(
        {
          curveType: CurveType.Linear,
          initialSupply: new BN("1000000000000"),
          initialPrice: new BN("1000000"),
          graduationThreshold: new BN("50000000000"),
          slope: 0.00001,
          volatilityDamper: 1.0,
        },
        "Zero Test Token",
        "ZERO"
      );

      const trader = Keypair.generate();
      await connection.requestAirdrop(trader.publicKey, 5 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      try {
        // –ü–æ–∫—É–ø–∫–∞ –Ω–∞ 0 SOL
        await buyTestTokens(testResult.mint.publicKey, trader, new BN(0));
        expect.fail("–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –æ—à–∏–±–∫–∞");
      } catch (error) {
        console.log("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ù—É–ª–µ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞");
        expect(error).to.exist;
      }
    });
  });

  // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  after(() => {
    console.log("\n" + "=".repeat(80));
    console.log("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ë–û–ù–î–ò–ù–ì-–ö–†–ò–í–´–• –ó–ê–í–ï–†–®–ï–ù–´!");
    console.log("=".repeat(80));
    console.log("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    console.log("   ‚úÖ Linear Curve: –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã");
    console.log("   ‚úÖ Exponential Curve: –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã");
    console.log("   ‚úÖ Sigmoid Curve: –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã");
    console.log("   ‚úÖ ConstantProduct Curve: –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã");
    console.log("   ‚úÖ Logarithmic Curve: –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã");
    console.log("   ‚úÖ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã: –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã");
    console.log("   ‚úÖ Edge Cases: –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã");
    console.log("\nüöÄ –í—Å–µ 5 —Ç–∏–ø–æ–≤ –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã!");
    console.log("üîí –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!\n");
    console.log("=".repeat(80));
  });
});
