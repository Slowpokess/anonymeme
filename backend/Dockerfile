# üê≥ Backend Dockerfile –¥–ª—è Anonymeme Platform
# Multi-stage build –¥–ª—è optimized production image=

# === STAGE 1: Base image with Python ===
FROM python:3.11-slim as base

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
LABEL maintainer="Anonymeme Team"
LABEL version="1.0.0"
LABEL description="Anonymeme Backend API"

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    POETRY_VERSION=1.6.1

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
RUN groupadd -r anonymeme && useradd -r -g anonymeme anonymeme

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    libffi-dev \
    libssl-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# === STAGE 2: Development dependencies ===
FROM base as dev-deps

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Poetry –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
RUN pip install poetry==$POETRY_VERSION

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
WORKDIR /app
COPY requirements.txt ./

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN pip install --no-cache-dir -r requirements.txt

# === STAGE 3: Production image ===
FROM base as production

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ runtime –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
WORKDIR /app
RUN chown anonymeme:anonymeme /app

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ dev-deps stage
COPY --from=dev-deps /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=dev-deps /usr/local/bin /usr/local/bin

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
COPY --chown=anonymeme:anonymeme . .

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –ª–æ–≥–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
RUN mkdir -p /app/logs /app/tmp && \
    chown -R anonymeme:anonymeme /app/logs /app/tmp

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–µ–ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER anonymeme

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV PYTHONPATH=/app \
    PORT=8000 \
    HOST=0.0.0.0 \
    WORKERS=4

# –ó–¥–æ—Ä–æ–≤—å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:$PORT/health || exit 1

# –≠–∫—Å–ø–æ—Ä—Ç –ø–æ—Ä—Ç–æ–≤
EXPOSE $PORT

# === STAGE 4: Development image ===
FROM dev-deps as development

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN pip install --no-cache-dir \
    jupyter \
    ipython \
    pytest-watch \
    debugpy

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
COPY --chown=anonymeme:anonymeme . .

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER anonymeme

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å hot-reload
CMD ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--log-level", "debug"]

# === STAGE 5: Testing image ===
FROM dev-deps as testing

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ —Ç–µ—Å—Ç–æ–≤
COPY --chown=anonymeme:anonymeme . .

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER anonymeme

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
CMD ["python", "-m", "pytest", "-v", "--cov=.", "--cov-report=html", "--cov-report=term"]

# === DEFAULT: Production stage ===
FROM production as final

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
CMD ["gunicorn", "api.main:app", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--workers", "4", \
     "--bind", "0.0.0.0:8000", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--timeout", "30", \
     "--keep-alive", "2", \
     "--log-level", "info", \
     "--access-logfile", "-", \
     "--error-logfile", "-"]

# ===================================================================
# BUILD INSTRUCTIONS
# ===================================================================

# Development build:
# docker build --target development -t anonymeme-backend:dev .
# docker run -p 8000:8000 -v $(pwd):/app anonymeme-backend:dev

# Production build:
# docker build --target production -t anonymeme-backend:prod .
# docker run -p 8000:8000 anonymeme-backend:prod

# Testing build:
# docker build --target testing -t anonymeme-backend:test .
# docker run anonymeme-backend:test

# Multi-platform build:
# docker buildx build --platform linux/amd64,linux/arm64 -t anonymeme-backend:latest .

# ===================================================================
# ENVIRONMENT VARIABLES
# ===================================================================

# Required environment variables:
# - DATABASE_URL: PostgreSQL connection string
# - REDIS_URL: Redis connection string
# - SECRET_KEY: JWT secret key
# - SOLANA_RPC_URL: Solana RPC endpoint

# Optional environment variables:
# - DEBUG: Enable debug mode (default: false)
# - LOG_LEVEL: Logging level (default: info)
# - WORKERS: Number of worker processes (default: 4)
# - MAX_REQUESTS: Max requests per worker (default: 1000)

# Example docker-compose.yml:
# version: '3.8'
# services:
#   backend:
#     build: .
#     ports:
#       - "8000:8000"
#     environment:
#       - DATABASE_URL=postgresql://user:pass@db:5432/anonymeme
#       - REDIS_URL=redis://redis:6379
#       - SECRET_KEY=your-secret-key
#     depends_on:
#       - db
#       - redis