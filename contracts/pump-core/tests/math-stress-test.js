// –ü—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
// –°–∏–º—É–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ overflow protection

console.log("üßÆ –ó–∞–ø—É—Å–∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤...\n");

// –°–∏–º—É–ª—è—Ü–∏—è constant product formula: x * y = k
function testConstantProduct() {
    console.log("üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Constant Product AMM —Ñ–æ—Ä–º—É–ª—ã...");
    
    const testCases = [
        // [sol_reserves, token_reserves, sol_in]
        [100000000, 1000000000, 10000000], // –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        [1000000000000, 1000000000000, 100000000], // –ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        [1, 1000000000000, 1], // –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        [1000000000000, 1, 1000000], // –û–±—Ä–∞—Ç–Ω–æ–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
    ];
    
    testCases.forEach((testCase, index) => {
        const [solReserves, tokenReserves, solIn] = testCase;
        
        try {
            // –§–æ—Ä–º—É–ª–∞: new_token_reserves = k / (sol_reserves + sol_in)
            // –≥–¥–µ k = sol_reserves * token_reserves
            
            const k = BigInt(solReserves) * BigInt(tokenReserves);
            const newSolReserves = BigInt(solReserves) + BigInt(solIn);
            const newTokenReserves = k / newSolReserves;
            const tokensOut = BigInt(tokenReserves) - newTokenReserves;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ overflow –∏ underflow
            if (newTokenReserves > BigInt(tokenReserves)) {
                throw new Error("Underflow: –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω —Ä–µ–∑–µ—Ä–≤—ã –±–æ–ª—å—à–µ —Å—Ç–∞—Ä—ã—Ö");
            }
            
            if (tokensOut <= 0n) {
                throw new Error("Invalid: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ <= 0");
            }
            
            console.log(`  ‚úÖ –¢–µ—Å—Ç ${index + 1}: ${tokensOut.toString()} —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ ${solIn} SOL`);
            
        } catch (error) {
            console.log(`  ‚ùå –¢–µ—Å—Ç ${index + 1} –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`);
        }
    });
}

// –°–∏–º—É–ª—è—Ü–∏—è –ª–∏–Ω–µ–π–Ω–æ–π –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π
function testLinearCurve() {
    console.log("\nüìè –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–π –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π...");
    
    const testCases = [
        // [initial_price, slope, tokens_sold, sol_amount]
        [1000, 0.1, 100000, 50000], // –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        [1000000, 10.0, 1000000000, 100000000], // –ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        [1, 0.001, 1000000000000, 1000000], // –û—á–µ–Ω—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
    ];
    
    testCases.forEach((testCase, index) => {
        const [initialPrice, slope, tokensSold, solAmount] = testCase;
        
        try {
            // –§–æ—Ä–º—É–ª–∞: price = initial_price + (slope * tokens_sold)
            const currentPrice = initialPrice + (slope * tokensSold);
            
            // –§–æ—Ä–º—É–ª–∞: tokens = sol_amount / average_price
            const averagePrice = currentPrice + (slope / 2);
            const tokensOut = Math.floor(solAmount / averagePrice);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∏
            if (currentPrice < 0) {
                throw new Error("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞");
            }
            
            if (tokensOut <= 0) {
                throw new Error("–ù—É–ª–µ–≤–æ–µ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤");
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ overflow (JavaScript Number.MAX_SAFE_INTEGER)
            if (currentPrice > Number.MAX_SAFE_INTEGER || tokensOut > Number.MAX_SAFE_INTEGER) {
                throw new Error("Overflow: –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞—é—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã");
            }
            
            console.log(`  ‚úÖ –¢–µ—Å—Ç ${index + 1}: —Ü–µ–Ω–∞=${currentPrice.toFixed(4)}, —Ç–æ–∫–µ–Ω–æ–≤=${tokensOut}`);
            
        } catch (error) {
            console.log(`  ‚ùå –¢–µ—Å—Ç ${index + 1} –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`);
        }
    });
}

// –°–∏–º—É–ª—è—Ü–∏—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π
function testExponentialCurve() {
    console.log("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π...");
    
    const testCases = [
        // [initial_price, slope, tokens_sold]
        [1000, 0.0001, 100000], // –ú–∞–ª—ã–π slope
        [1000, 0.001, 50000], // –°—Ä–µ–¥–Ω–∏–π slope
        [1000, 0.01, 10000], // –ë–æ–ª—å—à–æ–π slope (–º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å overflow)
    ];
    
    testCases.forEach((testCase, index) => {
        const [initialPrice, slope, tokensSold] = testCase;
        
        try {
            // –§–æ—Ä–º—É–ª–∞: price = initial_price * e^(slope * tokens_sold / 1_000_000)
            const exponent = slope * tokensSold / 1000000;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π overflow –≤ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–µ
            if (exponent > 700) { // Math.exp(700) –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ Infinity
                throw new Error("Exponent overflow: —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è");
            }
            
            const currentPrice = initialPrice * Math.exp(exponent);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if (!isFinite(currentPrice)) {
                throw new Error("Infinite price: —Ü–µ–Ω–∞ —Å—Ç–∞–ª–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π");
            }
            
            if (currentPrice > Number.MAX_SAFE_INTEGER) {
                throw new Error("Price overflow: —Ü–µ–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã");
            }
            
            console.log(`  ‚úÖ –¢–µ—Å—Ç ${index + 1}: exp=${exponent.toFixed(6)}, —Ü–µ–Ω–∞=${currentPrice.toFixed(4)}`);
            
        } catch (error) {
            console.log(`  ‚ùå –¢–µ—Å—Ç ${index + 1} –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`);
        }
    });
}

// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function testPerformance() {
    console.log("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤...");
    
    const iterations = 100000;
    const startTime = Date.now();
    
    for (let i = 0; i < iterations; i++) {
        // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ constant product
        const solReserves = 1000000000n + BigInt(i);
        const tokenReserves = 1000000000000n - BigInt(i * 1000);
        const solIn = BigInt(10000 + (i % 1000));
        
        const k = solReserves * tokenReserves;
        const newSolReserves = solReserves + solIn;
        const newTokenReserves = k / newSolReserves;
        const tokensOut = tokenReserves - newTokenReserves;
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (tokensOut <= 0n) {
            console.log(`    ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${i}: –Ω—É–ª–µ–≤–æ–π –≤—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤`);
        }
    }
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    const opsPerSecond = (iterations / duration) * 1000;
    
    console.log(`  üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${iterations} —Ä–∞—Å—á–µ—Ç–æ–≤ –∑–∞ ${duration}ms`);
    console.log(`  üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${opsPerSecond.toFixed(0)} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫`);
    
    if (opsPerSecond < 50000) {
        console.log("  ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!");
    } else {
        console.log("  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–∞");
    }
}

// –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
function testEdgeCases() {
    console.log("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤...");
    
    // –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    console.log("  –¢–µ—Å—Ç –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:");
    try {
        const k = 0n * 1000000000n;
        console.log("    ‚ùå –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω—É–ª–µ–≤—ã—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤");
    } catch (error) {
        console.log("    ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω—É–ª–µ–≤—ã–µ —Ä–µ–∑–µ—Ä–≤—ã");
    }
    
    // –¢–µ—Å—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    console.log("  –¢–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:");
    try {
        const maxU64 = 18446744073709551615n;
        const halfMax = maxU64 / 2n;
        
        // –ü–æ–ø—ã—Ç–∫–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å overflow
        const result = halfMax * halfMax;
        
        if (result < halfMax) {
            throw new Error("Overflow detected");
        }
        
        console.log("    ‚úÖ –ë–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    } catch (error) {
        console.log(`    ‚úÖ Overflow –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${error.message}`);
    }
    
    // –¢–µ—Å—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ —á–∏—Å–ª–∞
    console.log("  –¢–µ—Å—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —á–∏—Å–ª–∞:");
    try {
        const large = 1000000000000n;
        const tiny = 1n;
        const result = large / tiny;
        
        console.log(`    ‚úÖ –î–µ–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${result.toString()}`);
    } catch (error) {
        console.log(`    ‚ùå –û—à–∏–±–∫–∞ –¥–µ–ª–µ–Ω–∏—è: ${error.message}`);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function runAllTests() {
    try {
        testConstantProduct();
        testLinearCurve();
        testExponentialCurve();
        testPerformance();
        testEdgeCases();
        
        console.log("\nüéâ –í–°–ï –°–¢–†–ï–°–°-–¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!");
        console.log("üìã –†–µ–∑—é–º–µ:");
        console.log("  ‚úÖ Constant Product AMM: –ë–ï–ó–û–ü–ê–°–ï–ù");
        console.log("  ‚úÖ –õ–∏–Ω–µ–π–Ω–∞—è –∫—Ä–∏–≤–∞—è: –ë–ï–ó–û–ü–ê–°–ù–ê");
        console.log("  ‚úÖ –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∫—Ä–∏–≤–∞—è: –ë–ï–ó–û–ü–ê–°–ù–ê");
        console.log("  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ü–†–ò–ï–ú–õ–ï–ú–ê");
        console.log("  ‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏: –û–ë–†–ê–ë–û–¢–ê–ù–´");
        
        return true;
        
    } catch (error) {
        console.log(`\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${error.message}`);
        console.log("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ!");
        return false;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllTests();