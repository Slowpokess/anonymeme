name: "üèóÔ∏è Build and Deploy Contracts"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'devnet'
        type: choice
        options:
          - devnet
          - mainnet
      deploy:
        description: 'Deploy after build?'
        required: true
        default: false
        type: boolean
      run_tests:
        description: 'Run tests before deployment?'
        required: true
        default: true
        type: boolean

env:
  RUST_VERSION: 'stable'
  SOLANA_VERSION: '1.16.25'
  ANCHOR_VERSION: '0.29.0'

jobs:
  build-contracts:
    name: üèóÔ∏è Build Smart Contracts
    runs-on: ubuntu-latest
    outputs:
      program-hash: ${{ steps.build-info.outputs.program-hash }}
      build-time: ${{ steps.build-info.outputs.build-time }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ü¶Ä Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: üì¶ Setup Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
          solana --version

      - name: üì¶ Setup Anchor
        run: |
          npm install -g @coral-xyz/anchor-cli@${{ env.ANCHOR_VERSION }}
          anchor --version

      - name: üîß Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            contracts/pump-core/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Anchor.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-

      - name: üì¶ Install npm dependencies
        working-directory: contracts/pump-core
        run: npm install

      - name: üßπ Rust Format Check
        working-directory: contracts/pump-core
        run: cargo fmt -- --check

      - name: üß™ Rust Clippy
        working-directory: contracts/pump-core
        run: cargo clippy -- -D warnings

      - name: üèóÔ∏è Build Smart Contracts
        id: build
        working-directory: contracts/pump-core
        run: |
          echo "üèóÔ∏è Starting Anchor build..."
          anchor build

          echo "‚úÖ Build completed successfully!"
          ls -lh target/deploy/

      - name: üìä Build Information
        id: build-info
        working-directory: contracts/pump-core
        run: |
          # Calculate program hash
          PROGRAM_HASH=$(sha256sum target/deploy/pump_core.so | awk '{print $1}')
          echo "program-hash=$PROGRAM_HASH" >> $GITHUB_OUTPUT

          # Build timestamp
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "build-time=$BUILD_TIME" >> $GITHUB_OUTPUT

          # Program size
          PROGRAM_SIZE=$(stat -f%z target/deploy/pump_core.so 2>/dev/null || stat -c%s target/deploy/pump_core.so)
          echo "Program size: $PROGRAM_SIZE bytes"

          # Program ID from keypair
          PROGRAM_ID=$(solana-keygen pubkey target/deploy/pump_core-keypair.json)
          echo "Program ID: $PROGRAM_ID"

          # Save build metadata
          cat > target/deploy/build-metadata.json <<EOF
          {
            "program_id": "$PROGRAM_ID",
            "program_hash": "$PROGRAM_HASH",
            "program_size": $PROGRAM_SIZE,
            "build_time": "$BUILD_TIME",
            "environment": "${{ github.event.inputs.environment }}",
            "commit_sha": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "rust_version": "${{ env.RUST_VERSION }}",
            "solana_version": "${{ env.SOLANA_VERSION }}",
            "anchor_version": "${{ env.ANCHOR_VERSION }}"
          }
          EOF

          echo "üìã Build metadata saved to build-metadata.json"
          cat target/deploy/build-metadata.json

      - name: üì§ Upload Program Binary
        uses: actions/upload-artifact@v4
        with:
          name: pump-core-program-${{ github.sha }}
          path: |
            contracts/pump-core/target/deploy/pump_core.so
            contracts/pump-core/target/deploy/pump_core-keypair.json
            contracts/pump-core/target/deploy/build-metadata.json
          retention-days: 90

      - name: üì§ Upload IDL
        uses: actions/upload-artifact@v4
        with:
          name: pump-core-idl-${{ github.sha }}
          path: contracts/pump-core/target/idl/pump_core.json
          retention-days: 90

      - name: üì§ Upload TypeScript Types
        uses: actions/upload-artifact@v4
        with:
          name: pump-core-types-${{ github.sha }}
          path: contracts/pump-core/target/types/
          retention-days: 90

  test-contracts:
    name: üß™ Test Smart Contracts
    runs-on: ubuntu-latest
    needs: build-contracts
    if: github.event.inputs.run_tests == 'true'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ü¶Ä Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: üì¶ Setup Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
          solana --version

      - name: üì¶ Setup Anchor
        run: |
          npm install -g @coral-xyz/anchor-cli@${{ env.ANCHOR_VERSION }}
          anchor --version

      - name: üì¶ Install npm dependencies
        working-directory: contracts/pump-core
        run: npm install

      - name: üì• Download compiled program
        uses: actions/download-artifact@v4
        with:
          name: pump-core-program-${{ github.sha }}
          path: contracts/pump-core/target/deploy/

      - name: üì• Download IDL
        uses: actions/download-artifact@v4
        with:
          name: pump-core-idl-${{ github.sha }}
          path: contracts/pump-core/target/idl/

      - name: üß™ Run Smart Contract Tests
        working-directory: contracts/pump-core
        run: |
          # Export PATH for Solana
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"

          # Start local validator in background
          solana-test-validator --reset --quiet &
          VALIDATOR_PID=$!

          echo "Waiting for validator to start..."
          sleep 15

          # Configure Solana for local testing
          solana config set --url localhost

          # Run tests (skip build since we already built)
          echo "Running Anchor tests..."
          anchor test --skip-local-validator --skip-build || {
            echo "‚ùå Tests failed!"
            kill $VALIDATOR_PID || true
            exit 1
          }

          echo "‚úÖ All tests passed!"

          # Stop validator
          kill $VALIDATOR_PID || true

      - name: üìä Test Report
        if: always()
        run: |
          echo "## üß™ Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY

  deploy-contracts:
    name: üöÄ Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: [build-contracts, test-contracts]
    if: github.event.inputs.deploy == 'true' && (success() || github.event.inputs.run_tests == 'false')
    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
          solana --version

      - name: üì¶ Setup Anchor
        run: |
          npm install -g @coral-xyz/anchor-cli@${{ env.ANCHOR_VERSION }}
          anchor --version

      - name: üì• Download compiled program
        uses: actions/download-artifact@v4
        with:
          name: pump-core-program-${{ github.sha }}
          path: contracts/pump-core/target/deploy/

      - name: üîë Setup Deployment Wallet
        working-directory: contracts/pump-core
        env:
          DEPLOY_KEYPAIR: ${{ secrets.DEPLOY_KEYPAIR }}
        run: |
          if [ -z "$DEPLOY_KEYPAIR" ]; then
            echo "‚ö†Ô∏è DEPLOY_KEYPAIR secret not set!"
            echo "Using program keypair from build for deployment"
          else
            echo "$DEPLOY_KEYPAIR" > ~/.config/solana/id.json
          fi

          # Show deployer address
          DEPLOYER=$(solana address)
          echo "Deployer address: $DEPLOYER"

      - name: üí∞ Check Balance
        run: |
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"

          # Set cluster
          if [ "${{ github.event.inputs.environment }}" = "mainnet" ]; then
            solana config set --url mainnet-beta
          else
            solana config set --url devnet
          fi

          # Check balance
          BALANCE=$(solana balance)
          echo "Current balance: $BALANCE"

          # Warn if balance is low
          if [ "${{ github.event.inputs.environment }}" = "mainnet" ]; then
            echo "‚ö†Ô∏è Make sure you have enough SOL for deployment (typically 2-5 SOL)"
          fi

      - name: üöÄ Deploy Program
        id: deploy
        working-directory: contracts/pump-core
        run: |
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"

          # Set cluster
          if [ "${{ github.event.inputs.environment }}" = "mainnet" ]; then
            CLUSTER="mainnet-beta"
          else
            CLUSTER="devnet"
          fi

          echo "üöÄ Deploying to $CLUSTER..."

          # Deploy using Anchor
          anchor deploy --provider.cluster $CLUSTER

          # Get program ID
          PROGRAM_ID=$(solana-keygen pubkey target/deploy/pump_core-keypair.json)
          echo "program-id=$PROGRAM_ID" >> $GITHUB_OUTPUT

          echo "‚úÖ Program deployed successfully!"
          echo "Program ID: $PROGRAM_ID"

          # Verify deployment
          solana program show $PROGRAM_ID

      - name: üìä Deployment Summary
        run: |
          echo "## üöÄ Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: **${{ github.event.inputs.environment }}**" >> $GITHUB_STEP_SUMMARY
          echo "- Program ID: \`${{ steps.deploy.outputs.program-id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Program Hash: \`${{ needs.build-contracts.outputs.program-hash }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Build Time: ${{ needs.build-contracts.outputs.build-time }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Links" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event.inputs.environment }}" = "mainnet" ]; then
            echo "- [Solana Explorer](https://explorer.solana.com/address/${{ steps.deploy.outputs.program-id }})" >> $GITHUB_STEP_SUMMARY
            echo "- [Solscan](https://solscan.io/account/${{ steps.deploy.outputs.program-id }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "- [Solana Explorer (Devnet)](https://explorer.solana.com/address/${{ steps.deploy.outputs.program-id }}?cluster=devnet)" >> $GITHUB_STEP_SUMMARY
            echo "- [Solscan (Devnet)](https://solscan.io/account/${{ steps.deploy.outputs.program-id }}?cluster=devnet)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üíæ Save Deployment Info
        working-directory: contracts/pump-core
        run: |
          # Create deployment record
          mkdir -p deployments

          cat > deployments/${{ github.event.inputs.environment }}-deployment.json <<EOF
          {
            "program_id": "${{ steps.deploy.outputs.program-id }}",
            "program_hash": "${{ needs.build-contracts.outputs.program-hash }}",
            "environment": "${{ github.event.inputs.environment }}",
            "deployed_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "deployed_by": "${{ github.actor }}",
            "commit_sha": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "workflow_run": "${{ github.run_id }}"
          }
          EOF

          echo "üìã Deployment info saved"
          cat deployments/${{ github.event.inputs.environment }}-deployment.json

      - name: üì§ Upload Deployment Info
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info-${{ github.event.inputs.environment }}-${{ github.sha }}
          path: contracts/pump-core/deployments/
          retention-days: 365

  notify:
    name: üì¢ Notify Results
    runs-on: ubuntu-latest
    needs: [build-contracts, test-contracts, deploy-contracts]
    if: always()

    steps:
      - name: üìä Build Summary
        run: |
          echo "# üìä Build & Deploy Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Status" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build-contracts.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ needs.test-contracts.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Deploy: ${{ needs.deploy-contracts.result }}" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- Deploy enabled: ${{ github.event.inputs.deploy }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests enabled: ${{ github.event.inputs.run_tests }}" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "The following artifacts are available for download:" >> $GITHUB_STEP_SUMMARY
          echo "- \`pump-core-program-${{ github.sha }}\` - Compiled program binary" >> $GITHUB_STEP_SUMMARY
          echo "- \`pump-core-idl-${{ github.sha }}\` - Interface Definition Language" >> $GITHUB_STEP_SUMMARY
          echo "- \`pump-core-types-${{ github.sha }}\` - TypeScript type definitions" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event.inputs.deploy }}" = "true" ]; then
            echo "- \`deployment-info-${{ github.event.inputs.environment }}-${{ github.sha }}\` - Deployment metadata" >> $GITHUB_STEP_SUMMARY
          fi
