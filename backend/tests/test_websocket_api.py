"""
üîÑ Integration —Ç–µ—Å—Ç—ã –¥–ª—è WebSocket API
Comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ real-time —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ —Å–æ–±—ã—Ç–∏—è
"""

import pytest
import json
import asyncio
from unittest.mock import AsyncMock, patch, Mock
from httpx import AsyncClient

from .conftest import DatabaseTestHelper, WebSocketTestHelper, sample_token_data, sample_user_data


@pytest.mark.integration
@pytest.mark.requires_db
class TestWebSocketAPI:
    """–¢–µ—Å—Ç—ã WebSocket API –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""

    async def test_websocket_connection_success(
        self,
        ws_helper: WebSocketTestHelper
    ):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket"""
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
        ws = await ws_helper.connect("ws://localhost:8000/ws")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        assert ws is not None
        assert len(ws_helper.connections) == 1

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping —Å–æ–æ–±—â–µ–Ω–∏–µ
        ping_message = {
            "type": "ping",
            "timestamp": "2024-01-01T00:00:00Z"
        }
        
        await ws_helper.send_message(ws, ping_message)
        
        # –û–∂–∏–¥–∞–µ–º pong –æ—Ç–≤–µ—Ç
        response = await ws_helper.wait_for_message(ws)
        assert response["type"] == "test_message"  # Mock response

        await ws.close()

    async def test_websocket_authentication(
        self,
        ws_helper: WebSocketTestHelper,
        sample_user_data: dict
    ):
        """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ WebSocket"""
        ws = await ws_helper.connect("ws://localhost:8000/ws")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        auth_message = {
            "type": "auth",
            "token": "test_jwt_token",
            "wallet_address": sample_user_data["wallet_address"]
        }
        
        await ws_helper.send_message(ws, auth_message)
        
        # –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        response = await ws_helper.wait_for_message(ws)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ auth response
        assert response is not None
        
        await ws.close()

    async def test_subscribe_to_token_updates(
        self,
        ws_helper: WebSocketTestHelper,
        db_helper: DatabaseTestHelper,
        sample_token_data: dict
    ):
        """–¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        user_data = {
            "wallet_address": "WSTokenUser123456789",
            "username": "wstokenuser",
            "email": "wstoken@test.com",
            "reputation_score": 70.0
        }
        user_id = await db_helper.create_test_user(user_data)
        mint_address = await db_helper.create_test_token(sample_token_data, user_id)

        ws = await ws_helper.connect("ws://localhost:8000/ws")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        subscribe_message = {
            "type": "subscribe",
            "channel": "token_updates",
            "token_mint": mint_address
        }
        
        await ws_helper.send_message(ws, subscribe_message)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
        trade_data = {
            "token_mint": mint_address,
            "trader_address": "WSTrader123456789",
            "trade_type": "buy",
            "sol_amount": 1000000000,
            "token_amount": 1000000
        }
        await db_helper.create_test_trade(trade_data)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–ª–µ
        await ws.close()

    async def test_subscribe_to_user_notifications(
        self,
        ws_helper: WebSocketTestHelper,
        sample_user_data: dict
    ):
        """–¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        ws = await ws_helper.connect("ws://localhost:8000/ws")
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        auth_message = {
            "type": "auth",
            "token": "test_jwt_token",
            "wallet_address": sample_user_data["wallet_address"]
        }
        await ws_helper.send_message(ws, auth_message)
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        subscribe_message = {
            "type": "subscribe",
            "channel": "user_notifications",
            "user_wallet": sample_user_data["wallet_address"]
        }
        
        await ws_helper.send_message(ws, subscribe_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
        assert len(ws_helper.messages) >= 2  # auth + subscribe
        
        await ws.close()

    async def test_trading_updates_broadcast(
        self,
        ws_helper: WebSocketTestHelper,
        db_helper: DatabaseTestHelper
    ):
        """–¢–µ—Å—Ç broadcast —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        traders = []
        for i in range(3):
            ws = await ws_helper.connect("ws://localhost:8000/ws")
            traders.append(ws)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            subscribe_message = {
                "type": "subscribe",
                "channel": "trading_updates"
            }
            await ws_helper.send_message(ws, subscribe_message)

        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∏ —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        user_data = {
            "wallet_address": "TradingUpdatesUser123456789",
            "username": "tradingupdatesuser",
            "email": "trading@test.com",
            "reputation_score": 65.0
        }
        user_id = await db_helper.create_test_user(user_data)
        
        token_data = {
            "name": "Trading Updates Token",
            "symbol": "TUT",
            "description": "Token for trading updates",
            "initial_supply": 1000000000000000000,
            "initial_price": 1000000
        }
        mint_address = await db_helper.create_test_token(token_data, user_id)

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫—Ä—É–ø–Ω—É—é —Å–¥–µ–ª–∫—É
        large_trade_data = {
            "token_mint": mint_address,
            "trader_address": "LargeTrader123456789",
            "trade_type": "buy",
            "sol_amount": 10000000000,  # 10 SOL
            "token_amount": 10000000
        }
        await db_helper.create_test_trade(large_trade_data)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for ws in traders:
            await ws.close()

    async def test_price_alerts_system(
        self,
        ws_helper: WebSocketTestHelper,
        db_helper: DatabaseTestHelper,
        sample_token_data: dict
    ):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã price alerts"""
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        user_data = {
            "wallet_address": "PriceAlertUser123456789",
            "username": "pricealertuser",
            "email": "pricealert@test.com",
            "reputation_score": 70.0
        }
        user_id = await db_helper.create_test_user(user_data)
        mint_address = await db_helper.create_test_token(sample_token_data, user_id)

        ws = await ws_helper.connect("ws://localhost:8000/ws")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º price alert
        alert_message = {
            "type": "set_price_alert",
            "token_mint": mint_address,
            "target_price": 2000000,  # 0.002 SOL
            "condition": "above",
            "notification_type": "websocket"
        }
        
        await ws_helper.send_message(ws, alert_message)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        
        await ws.close()

    async def test_market_data_streaming(
        self,
        ws_helper: WebSocketTestHelper,
        db_helper: DatabaseTestHelper
    ):
        """–¢–µ—Å—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        ws = await ws_helper.connect("ws://localhost:8000/ws")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        subscribe_message = {
            "type": "subscribe",
            "channel": "market_data",
            "data_types": ["prices", "volume", "trades"],
            "update_frequency": "1s"
        }
        
        await ws_helper.send_message(ws, subscribe_message)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        user_data = {
            "wallet_address": "MarketDataUser123456789",
            "username": "marketdatauser",
            "email": "marketdata@test.com",
            "reputation_score": 60.0
        }
        user_id = await db_helper.create_test_user(user_data)
        
        token_data = {
            "name": "Market Data Token",
            "symbol": "MDT",
            "description": "Token for market data streaming",
            "initial_supply": 1000000000000000000,
            "initial_price": 1000000
        }
        mint_address = await db_helper.create_test_token(token_data, user_id)

        # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        for i in range(5):
            trade_data = {
                "token_mint": mint_address,
                "trader_address": f"MarketTrader{i}",
                "trade_type": "buy" if i % 2 == 0 else "sell",
                "sol_amount": (i + 1) * 500000000,
                "token_amount": (i + 1) * 500000
            }
            await db_helper.create_test_trade(trade_data)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
        await ws.close()

    async def test_websocket_error_handling(
        self,
        ws_helper: WebSocketTestHelper
    ):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ WebSocket"""
        ws = await ws_helper.connect("ws://localhost:8000/ws")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        invalid_message = {
            "type": "invalid_type",
            "malformed": True
        }
        
        await ws_helper.send_message(ws, invalid_message)
        
        # –û–∂–∏–¥–∞–µ–º error response
        response = await ws_helper.wait_for_message(ws)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç error response
        assert response is not None
        
        await ws.close()

    async def test_websocket_rate_limiting(
        self,
        ws_helper: WebSocketTestHelper
    ):
        """–¢–µ—Å—Ç rate limiting –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        ws = await ws_helper.connect("ws://localhost:8000/ws")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã—Å—Ç—Ä–æ
        for i in range(100):
            message = {
                "type": "ping",
                "sequence": i
            }
            await ws_helper.send_message(ws, message)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã due to rate limiting
        
        await ws.close()

    async def test_websocket_connection_limits(
        self,
        ws_helper: WebSocketTestHelper
    ):
        """–¢–µ—Å—Ç –ª–∏–º–∏—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π WebSocket"""
        connections = []
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        for i in range(10):
            try:
                ws = await ws_helper.connect("ws://localhost:8000/ws")
                connections.append(ws)
            except Exception:
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–º–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã
        assert len(connections) > 0
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        for ws in connections:
            await ws.close()

    async def test_websocket_message_queuing(
        self,
        ws_helper: WebSocketTestHelper,
        db_helper: DatabaseTestHelper
    ):
        """–¢–µ—Å—Ç –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket"""
        ws = await ws_helper.connect("ws://localhost:8000/ws")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        subscribe_message = {
            "type": "subscribe",
            "channel": "all_updates"
        }
        await ws_helper.send_message(ws, subscribe_message)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        await ws.close()
        
        # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω
        user_data = {
            "wallet_address": "QueueTestUser123456789",
            "username": "queueuser",
            "email": "queue@test.com",
            "reputation_score": 60.0
        }
        user_id = await db_helper.create_test_user(user_data)
        
        # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        ws = await ws_helper.connect("ws://localhost:8000/ws")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–≥—É—Ç –±—ã—Ç—å queued —Å–æ–æ–±—â–µ–Ω–∏—è
        
        await ws.close()

    async def test_websocket_heartbeat(
        self,
        ws_helper: WebSocketTestHelper
    ):
        """–¢–µ—Å—Ç heartbeat –º–µ—Ö–∞–Ω–∏–∑–º–∞ WebSocket"""
        ws = await ws_helper.connect("ws://localhost:8000/ws")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat
        heartbeat_message = {
            "type": "heartbeat",
            "timestamp": "2024-01-01T00:00:00Z"
        }
        
        await ws_helper.send_message(ws, heartbeat_message)
        
        # –û–∂–∏–¥–∞–µ–º heartbeat response
        response = await ws_helper.wait_for_message(ws)
        assert response is not None
        
        await ws.close()

    async def test_websocket_channel_management(
        self,
        ws_helper: WebSocketTestHelper
    ):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏ WebSocket"""
        ws = await ws_helper.connect("ws://localhost:8000/ws")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤
        channels = ["trading_updates", "price_alerts", "user_notifications"]
        
        for channel in channels:
            subscribe_message = {
                "type": "subscribe",
                "channel": channel
            }
            await ws_helper.send_message(ws, subscribe_message)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        list_message = {
            "type": "list_subscriptions"
        }
        await ws_helper.send_message(ws, list_message)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
        response = await ws_helper.wait_for_message(ws)
        assert response is not None
        
        # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞
        unsubscribe_message = {
            "type": "unsubscribe",
            "channel": "price_alerts"
        }
        await ws_helper.send_message(ws, unsubscribe_message)
        
        await ws.close()

    async def test_websocket_admin_broadcasts(
        self,
        ws_helper: WebSocketTestHelper
    ):
        """–¢–µ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö broadcast —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        user_connections = []
        for i in range(3):
            ws = await ws_helper.connect("ws://localhost:8000/ws")
            user_connections.append(ws)
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        admin_ws = await ws_helper.connect("ws://localhost:8000/admin-ws")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ
        broadcast_message = {
            "type": "admin_broadcast",
            "message_type": "maintenance_notice",
            "title": "Scheduled Maintenance",
            "content": "Platform will undergo maintenance in 30 minutes",
            "priority": "high",
            "target_users": "all"
        }
        
        await ws_helper.send_message(admin_ws, broadcast_message)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        for ws in user_connections:
            await ws.close()
        await admin_ws.close()

    @pytest.mark.slow
    async def test_websocket_performance_under_load(
        self,
        ws_helper: WebSocketTestHelper,
        db_helper: DatabaseTestHelper
    ):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ WebSocket –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connections = []
        for i in range(20):
            ws = await ws_helper.connect("ws://localhost:8000/ws")
            connections.append(ws)
            
            # –ö–∞–∂–¥–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ updates
            subscribe_message = {
                "type": "subscribe",
                "channel": "trading_updates"
            }
            await ws_helper.send_message(ws, subscribe_message)

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        user_data = {
            "wallet_address": "LoadTestUser123456789",
            "username": "loadtestuser",
            "email": "loadtest@test.com",
            "reputation_score": 75.0
        }
        user_id = await db_helper.create_test_user(user_data)
        
        token_data = {
            "name": "Load Test Token",
            "symbol": "LOAD",
            "description": "Token for load testing",
            "initial_supply": 1000000000000000000,
            "initial_price": 1000000
        }
        mint_address = await db_helper.create_test_token(token_data, user_id)

        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        for i in range(50):
            trade_data = {
                "token_mint": mint_address,
                "trader_address": f"LoadTrader{i}",
                "trade_type": "buy" if i % 2 == 0 else "sell",
                "sol_amount": (i + 1) * 100000000,
                "token_amount": (i + 1) * 100000
            }
            await db_helper.create_test_trade(trade_data)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–∞—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        # –±–µ–∑ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        for ws in connections:
            await ws.close()

    async def test_websocket_security_validation(
        self,
        ws_helper: WebSocketTestHelper
    ):
        """–¢–µ—Å—Ç security –≤–∞–ª–∏–¥–∞—Ü–∏–∏ WebSocket"""
        ws = await ws_helper.connect("ws://localhost:8000/ws")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        unauthorized_subscribe = {
            "type": "subscribe",
            "channel": "admin_updates"
        }
        
        await ws_helper.send_message(ws, unauthorized_subscribe)
        
        # –û–∂–∏–¥–∞–µ–º error response
        response = await ws_helper.wait_for_message(ws)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–∏–º –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        assert response is not None
        
        # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        admin_action = {
            "type": "admin_action",
            "action": "pause_trading",
            "token_mint": "SomeTokenMint"
        }
        
        await ws_helper.send_message(ws, admin_action)
        
        # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        response = await ws_helper.wait_for_message(ws)
        assert response is not None
        
        await ws.close()

    async def test_websocket_data_consistency(
        self,
        ws_helper: WebSocketTestHelper,
        db_helper: DatabaseTestHelper,
        sample_token_data: dict
    ):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ WebSocket"""
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        user_data = {
            "wallet_address": "ConsistencyUser123456789",
            "username": "consistencyuser",
            "email": "consistency@test.com",
            "reputation_score": 70.0
        }
        user_id = await db_helper.create_test_user(user_data)
        mint_address = await db_helper.create_test_token(sample_token_data, user_id)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ updates
        ws = await ws_helper.connect("ws://localhost:8000/ws")
        
        subscribe_message = {
            "type": "subscribe",
            "channel": "token_updates",
            "token_mint": mint_address
        }
        await ws_helper.send_message(ws, subscribe_message)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        trades = [
            {"type": "buy", "sol": 1000000000, "tokens": 1000000},
            {"type": "sell", "sol": 500000000, "tokens": 500000},
            {"type": "buy", "sol": 2000000000, "tokens": 1800000},
        ]
        
        for i, trade in enumerate(trades):
            trade_data = {
                "token_mint": mint_address,
                "trader_address": f"ConsistencyTrader{i}",
                "trade_type": trade["type"],
                "sol_amount": trade["sol"],
                "token_amount": trade["tokens"]
            }
            await db_helper.create_test_trade(trade_data)
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥–∞—è —Å–¥–µ–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
            # WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        await ws.close()