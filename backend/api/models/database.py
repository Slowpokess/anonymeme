#!/usr/bin/env python3
"""
üóÑÔ∏è –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Anonymeme
Production-ready SQLAlchemy –º–æ–¥–µ–ª–∏ —Å –ø–æ–ª–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
"""

import uuid
from datetime import datetime, timezone
from typing import Optional, List, Dict, Any
from decimal import Decimal

from sqlalchemy import (
    Column, String, Integer, BigInteger, Float, Boolean, DateTime, 
    Text, JSON, ForeignKey, Index, UniqueConstraint, CheckConstraint,
    Enum as SQLEnum, DECIMAL, func
)
from sqlalchemy.dialects.postgresql import UUID, JSONB
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import relationship, validates
from sqlalchemy.ext.hybrid import hybrid_property
import enum


# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
Base = declarative_base()


class TimestampMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫"""
    created_at = Column(
        DateTime(timezone=True), 
        server_default=func.now(), 
        nullable=False,
        comment="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"
    )
    updated_at = Column(
        DateTime(timezone=True), 
        server_default=func.now(), 
        onupdate=func.now(),
        nullable=False,
        comment="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    )


class UUIDMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è UUID –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞"""
    id = Column(
        UUID(as_uuid=True), 
        primary_key=True, 
        default=uuid.uuid4,
        comment="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"
    )


# === ENUMS ===

class CurveType(enum.Enum):
    """–¢–∏–ø—ã –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤—ã—Ö"""
    LINEAR = "Linear"
    EXPONENTIAL = "Exponential"
    LOGARITHMIC = "Logarithmic"
    SIGMOID = "Sigmoid"
    CONSTANT_PRODUCT = "ConstantProduct"


class DexType(enum.Enum):
    """–¢–∏–ø—ã DEX –¥–ª—è –ª–∏—Å—Ç–∏–Ω–≥–∞"""
    RAYDIUM = "Raydium"
    JUPITER = "Jupiter"
    ORCA = "Orca"
    SERUM = "Serum"
    METEORA = "Meteora"


class TokenStatus(enum.Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Ç–æ–∫–µ–Ω–∞"""
    ACTIVE = "active"
    GRADUATED = "graduated"
    PAUSED = "paused"
    FLAGGED = "flagged"
    BURNED = "burned"


class TradeType(enum.Enum):
    """–¢–∏–ø—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    BUY = "buy"
    SELL = "sell"


class UserRole(enum.Enum):
    """–†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    USER = "user"
    MODERATOR = "moderator"
    ADMIN = "admin"
    SUPER_ADMIN = "super_admin"


class UserStatus(enum.Enum):
    """–°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    ACTIVE = "active"
    SUSPENDED = "suspended"
    BANNED = "banned"
    PENDING = "pending"
    DELETED = "deleted"


# === –û–°–ù–û–í–ù–´–ï –ú–û–î–ï–õ–ò ===

class User(Base, UUIDMixin, TimestampMixin):
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    __tablename__ = "users"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    wallet_address = Column(
        String(44), 
        unique=True, 
        nullable=False, 
        index=True,
        comment="–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ Solana"
    )
    username = Column(
        String(50), 
        unique=True, 
        nullable=True,
        comment="–ù–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    email = Column(
        String(255), 
        unique=True, 
        nullable=True,
        comment="Email –∞–¥—Ä–µ—Å"
    )
    
    # –°—Ç–∞—Ç—É—Å –∏ —Ä–æ–ª—å
    role = Column(
        SQLEnum(UserRole), 
        default=UserRole.USER,
        nullable=False,
        comment="–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    status = Column(
        SQLEnum(UserStatus), 
        default=UserStatus.ACTIVE,
        nullable=False,
        comment="–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    
    # –ü—Ä–æ—Ñ–∏–ª—å
    profile_image_url = Column(String(500), comment="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
    bio = Column(Text, comment="–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    website = Column(String(255), comment="–õ–∏—á–Ω—ã–π —Å–∞–π—Ç")
    twitter_handle = Column(String(50), comment="Twitter handle")
    telegram_handle = Column(String(50), comment="Telegram handle")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    tokens_created = Column(Integer, default=0, comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
    total_volume_traded = Column(DECIMAL(20, 9), default=0, comment="–û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –≤ SOL")
    total_trades = Column(Integer, default=0, comment="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫")
    profitable_trades = Column(Integer, default=0, comment="–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏")
    
    # –†–µ–ø—É—Ç–∞—Ü–∏—è –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏
    reputation_score = Column(Float, default=50.0, comment="–†–µ–ø—É—Ç–∞—Ü–∏—è (0-100)")
    creator_rating = Column(Float, default=0.0, comment="–†–µ–π—Ç–∏–Ω–≥ –∫–∞–∫ —Å–æ–∑–¥–∞—Ç–µ–ª—è (0-5)")
    trader_rating = Column(Float, default=0.0, comment="–†–µ–π—Ç–∏–Ω–≥ –∫–∞–∫ —Ç—Ä–µ–π–¥–µ—Ä–∞ (0-5)")
    
    # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
    is_verified = Column(Boolean, default=False, comment="–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏")
    kyc_completed = Column(Boolean, default=False, comment="–ü—Ä–æ—à–µ–ª –ª–∏ KYC")
    kyc_completed_at = Column(DateTime(timezone=True), comment="–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è KYC")
    
    # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
    warning_count = Column(Integer, default=0, comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    ban_reason = Column(Text, comment="–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
    banned_until = Column(DateTime(timezone=True), comment="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ")
    banned_by_id = Column(UUID(as_uuid=True), ForeignKey("users.id"), comment="–ö–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    last_login_at = Column(DateTime(timezone=True), comment="–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥")
    last_trade_at = Column(DateTime(timezone=True), comment="–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞")
    last_token_creation_at = Column(DateTime(timezone=True), comment="–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
    
    # JSON –ø–æ–ª—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    preferences = Column(JSONB, default=dict, comment="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    meta_data = Column(JSONB, default=dict, comment="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
    
    # –°–≤—è–∑–∏
    tokens = relationship("Token", back_populates="creator", foreign_keys="Token.creator_id")
    trades = relationship("Trade", back_populates="user")
    banned_by = relationship("User", remote_side=[id])
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index("idx_users_wallet_address", "wallet_address"),
        Index("idx_users_username", "username"),
        Index("idx_users_status", "status"),
        Index("idx_users_role", "role"),
        Index("idx_users_reputation", "reputation_score"),
        CheckConstraint("reputation_score >= 0 AND reputation_score <= 100", name="check_reputation_range"),
        CheckConstraint("creator_rating >= 0 AND creator_rating <= 5", name="check_creator_rating_range"),
        CheckConstraint("trader_rating >= 0 AND trader_rating <= 5", name="check_trader_rating_range"),
    )
    
    @validates('wallet_address')
    def validate_wallet_address(self, key, address):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ Solana"""
        if len(address) != 44:
            raise ValueError("Wallet address must be 44 characters long")
        return address
    
    @validates('email')
    def validate_email(self, key, email):
        """–ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email"""
        if email and '@' not in email:
            raise ValueError("Invalid email format")
        return email
    
    @hybrid_property
    def is_banned(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        if self.status == UserStatus.BANNED:
            if self.banned_until is None:
                return True
            return datetime.now(timezone.utc) < self.banned_until
        return False
    
    @hybrid_property
    def win_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        if self.total_trades == 0:
            return 0.0
        return (self.profitable_trades / self.total_trades) * 100


class Token(Base, UUIDMixin, TimestampMixin):
    """–ú–æ–¥–µ–ª—å —Ç–æ–∫–µ–Ω–∞"""
    __tablename__ = "tokens"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    mint_address = Column(
        String(44), 
        unique=True, 
        nullable=False, 
        index=True,
        comment="Mint –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –≤ Solana"
    )
    name = Column(String(50), nullable=False, comment="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
    symbol = Column(String(10), nullable=False, comment="–°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞")
    description = Column(Text, comment="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
    image_url = Column(String(500), comment="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    metadata_uri = Column(String(500), comment="URI –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    
    # –°–æ–∑–¥–∞—Ç–µ–ª—å
    creator_id = Column(
        UUID(as_uuid=True), 
        ForeignKey("users.id"), 
        nullable=False,
        comment="ID —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ç–æ–∫–µ–Ω–∞"
    )
    
    # –ë–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–∞—è
    curve_type = Column(
        SQLEnum(CurveType), 
        nullable=False,
        comment="–¢–∏–ø –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π"
    )
    initial_supply = Column(DECIMAL(20, 9), nullable=False, comment="–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    current_supply = Column(DECIMAL(20, 9), nullable=False, comment="–¢–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    initial_price = Column(DECIMAL(20, 9), nullable=False, comment="–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ lamports")
    current_price = Column(DECIMAL(20, 9), nullable=False, comment="–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≤ lamports")
    
    # –†–µ–∑–µ—Ä–≤—ã
    sol_reserves = Column(DECIMAL(20, 9), default=0, comment="–†–µ–∑–µ—Ä–≤—ã SOL –≤ lamports")
    token_reserves = Column(DECIMAL(20, 9), nullable=False, comment="–†–µ–∑–µ—Ä–≤—ã —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    market_cap = Column(DECIMAL(20, 9), default=0, comment="–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è")
    all_time_high_price = Column(DECIMAL(20, 9), comment="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")
    all_time_high_mc = Column(DECIMAL(20, 9), comment="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è")
    
    # –ì—Ä–∞–¥–∞—Ü–∏—è
    graduation_threshold = Column(DECIMAL(20, 9), nullable=False, comment="–ü–æ—Ä–æ–≥ –¥–ª—è –ª–∏—Å—Ç–∏–Ω–≥–∞ –Ω–∞ DEX")
    is_graduated = Column(Boolean, default=False, comment="–õ–∏—Å—Ç–∏–Ω–≥–æ–≤–∞–Ω –ª–∏ –Ω–∞ DEX")
    graduated_at = Column(DateTime(timezone=True), comment="–í—Ä–µ–º—è –ª–∏—Å—Ç–∏–Ω–≥–∞")
    graduation_dex = Column(SQLEnum(DexType), comment="DEX –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ª–∏—Å—Ç–∏–Ω–≥–æ–≤–∞–Ω")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
    trade_count = Column(Integer, default=0, comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫")
    unique_traders = Column(Integer, default=0, comment="–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤")
    holder_count = Column(Integer, default=0, comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π")
    volume_24h = Column(DECIMAL(20, 9), default=0, comment="–û–±—ä–µ–º –∑–∞ 24 —á–∞—Å–∞")
    volume_total = Column(DECIMAL(20, 9), default=0, comment="–û–±—â–∏–π –æ–±—ä–µ–º")
    trades_24h = Column(Integer, default=0, comment="–°–¥–µ–ª–∫–∏ –∑–∞ 24 —á–∞—Å–∞")
    
    # –°—Ç–∞—Ç—É—Å –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è
    status = Column(
        SQLEnum(TokenStatus), 
        default=TokenStatus.ACTIVE,
        nullable=False,
        comment="–°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞"
    )
    is_verified = Column(Boolean, default=False, comment="–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏")
    is_flagged = Column(Boolean, default=False, comment="–ü–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π")
    flag_reason = Column(Text, comment="–ü—Ä–∏—á–∏–Ω–∞ –ø–æ–º–µ—Ç–∫–∏")
    
    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    telegram_url = Column(String(255), comment="–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram")
    twitter_url = Column(String(255), comment="–°—Å—ã–ª–∫–∞ –Ω–∞ Twitter")
    website_url = Column(String(255), comment="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç")
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    security_score = Column(Float, default=50.0, comment="–û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (0-100)")
    rug_pull_risk = Column(Float, default=0.0, comment="–†–∏—Å–∫ rug pull (0-100)")
    liquidity_locked = Column(Boolean, default=False, comment="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    tags = Column(JSONB, default=list, comment="–¢–µ–≥–∏ —Ç–æ–∫–µ–Ω–∞")
    bonding_curve_params = Column(JSONB, comment="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π")
    metadata = Column(JSONB, default=dict, comment="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
    
    # –°–≤—è–∑–∏
    creator = relationship("User", back_populates="tokens", foreign_keys=[creator_id])
    trades = relationship("Trade", back_populates="token")
    price_history = relationship("PriceHistory", back_populates="token")
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index("idx_tokens_mint_address", "mint_address"),
        Index("idx_tokens_creator_id", "creator_id"),
        Index("idx_tokens_symbol", "symbol"),
        Index("idx_tokens_status", "status"),
        Index("idx_tokens_market_cap", "market_cap"),
        Index("idx_tokens_volume_24h", "volume_24h"),
        Index("idx_tokens_created_at", "created_at"),
        Index("idx_tokens_curve_type", "curve_type"),
        CheckConstraint("security_score >= 0 AND security_score <= 100", name="check_security_score_range"),
        CheckConstraint("rug_pull_risk >= 0 AND rug_pull_risk <= 100", name="check_rug_pull_risk_range"),
        CheckConstraint("initial_supply > 0", name="check_positive_supply"),
        CheckConstraint("initial_price > 0", name="check_positive_price"),
    )
    
    @hybrid_property
    def progress_to_graduation(self) -> float:
        """–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ –ª–∏—Å—Ç–∏–Ω–≥–∞ –Ω–∞ DEX (0-1)"""
        if self.graduation_threshold <= 0:
            return 0.0
        return min(float(self.market_cap) / float(self.graduation_threshold), 1.0)
    
    @hybrid_property
    def is_graduation_eligible(self) -> bool:
        """–ì–æ—Ç–æ–≤ –ª–∏ –∫ –ª–∏—Å—Ç–∏–Ω–≥—É –Ω–∞ DEX"""
        return self.market_cap >= self.graduation_threshold and not self.is_graduated


class Trade(Base, UUIDMixin, TimestampMixin):
    """–ú–æ–¥–µ–ª—å —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    __tablename__ = "trades"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    transaction_signature = Column(
        String(88), 
        unique=True, 
        nullable=False, 
        index=True,
        comment="–ü–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Solana"
    )
    
    # –£—á–∞—Å—Ç–Ω–∏–∫–∏
    user_id = Column(
        UUID(as_uuid=True), 
        ForeignKey("users.id"), 
        nullable=False,
        comment="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    token_id = Column(
        UUID(as_uuid=True), 
        ForeignKey("tokens.id"), 
        nullable=False,
        comment="ID —Ç–æ–∫–µ–Ω–∞"
    )
    
    # –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏
    trade_type = Column(
        SQLEnum(TradeType), 
        nullable=False,
        comment="–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞)"
    )
    sol_amount = Column(DECIMAL(20, 9), nullable=False, comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL")
    token_amount = Column(DECIMAL(20, 9), nullable=False, comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤")
    price_per_token = Column(DECIMAL(20, 9), nullable=False, comment="–¶–µ–Ω–∞ –∑–∞ —Ç–æ–∫–µ–Ω")
    
    # Slippage –∏ –∫–æ–º–∏—Å—Å–∏–∏
    expected_amount = Column(DECIMAL(20, 9), comment="–û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    actual_slippage = Column(Float, comment="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π slippage –≤ %")
    max_slippage = Column(Float, comment="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π slippage –≤ %")
    platform_fee = Column(DECIMAL(20, 9), comment="–ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏
    market_cap_before = Column(DECIMAL(20, 9), comment="–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ —Å–¥–µ–ª–∫–∏")
    market_cap_after = Column(DECIMAL(20, 9), comment="–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏")
    price_impact = Column(Float, comment="–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É –≤ %")
    
    # –°—Ç–∞—Ç—É—Å
    is_successful = Column(Boolean, default=True, comment="–£—Å–ø–µ—à–Ω–∞—è –ª–∏ —Å–¥–µ–ª–∫–∞")
    error_message = Column(Text, comment="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    metadata = Column(JSONB, default=dict, comment="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    # –°–≤—è–∑–∏
    user = relationship("User", back_populates="trades")
    token = relationship("Token", back_populates="trades")
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index("idx_trades_transaction_signature", "transaction_signature"),
        Index("idx_trades_user_id", "user_id"),
        Index("idx_trades_token_id", "token_id"),
        Index("idx_trades_trade_type", "trade_type"),
        Index("idx_trades_created_at", "created_at"),
        Index("idx_trades_sol_amount", "sol_amount"),
        Index("idx_trades_user_token", "user_id", "token_id"),
        CheckConstraint("sol_amount > 0", name="check_positive_sol_amount"),
        CheckConstraint("token_amount > 0", name="check_positive_token_amount"),
        CheckConstraint("price_per_token > 0", name="check_positive_price"),
    )


class PriceHistory(Base, UUIDMixin, TimestampMixin):
    """–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤"""
    __tablename__ = "price_history"
    
    token_id = Column(
        UUID(as_uuid=True), 
        ForeignKey("tokens.id"), 
        nullable=False,
        comment="ID —Ç–æ–∫–µ–Ω–∞"
    )
    
    # –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
    open_price = Column(DECIMAL(20, 9), nullable=False, comment="–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è")
    high_price = Column(DECIMAL(20, 9), nullable=False, comment="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
    low_price = Column(DECIMAL(20, 9), nullable=False, comment="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
    close_price = Column(DECIMAL(20, 9), nullable=False, comment="–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è")
    
    # –û–±—ä–µ–º—ã
    volume_sol = Column(DECIMAL(20, 9), default=0, comment="–û–±—ä–µ–º –≤ SOL")
    volume_tokens = Column(DECIMAL(20, 9), default=0, comment="–û–±—ä–µ–º –≤ —Ç–æ–∫–µ–Ω–∞—Ö")
    trade_count = Column(Integer, default=0, comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫")
    
    # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
    market_cap = Column(DECIMAL(20, 9), comment="–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–≤ –º–∏–Ω—É—Ç–∞—Ö: 1, 5, 15, 60, 240, 1440)
    interval_minutes = Column(Integer, nullable=False, comment="–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö")
    period_start = Column(DateTime(timezone=True), nullable=False, comment="–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞")
    period_end = Column(DateTime(timezone=True), nullable=False, comment="–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞")
    
    # –°–≤—è–∑–∏
    token = relationship("Token", back_populates="price_history")
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index("idx_price_history_token_id", "token_id"),
        Index("idx_price_history_period", "token_id", "interval_minutes", "period_start"),
        Index("idx_price_history_time", "period_start"),
        UniqueConstraint("token_id", "interval_minutes", "period_start", name="uq_price_history_period"),
        CheckConstraint("high_price >= low_price", name="check_high_low_price"),
        CheckConstraint("open_price > 0 AND close_price > 0", name="check_positive_prices"),
    )


class UserToken(Base, UUIDMixin, TimestampMixin):
    """–°–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ç–æ–∫–µ–Ω–æ–≤ (–±–∞–ª–∞–Ω—Å—ã)"""
    __tablename__ = "user_tokens"
    
    user_id = Column(
        UUID(as_uuid=True), 
        ForeignKey("users.id"), 
        nullable=False,
        comment="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    token_id = Column(
        UUID(as_uuid=True), 
        ForeignKey("tokens.id"), 
        nullable=False,
        comment="ID —Ç–æ–∫–µ–Ω–∞"
    )
    
    # –ë–∞–ª–∞–Ω—Å
    balance = Column(DECIMAL(20, 9), default=0, comment="–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_bought = Column(DECIMAL(20, 9), default=0, comment="–í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ")
    total_sold = Column(DECIMAL(20, 9), default=0, comment="–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ")
    avg_buy_price = Column(DECIMAL(20, 9), comment="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏")
    realized_pnl = Column(DECIMAL(20, 9), default=0, comment="–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫")
    
    # –ü–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è
    first_trade_at = Column(DateTime(timezone=True), comment="–ü–µ—Ä–≤–∞—è —Å–¥–µ–ª–∫–∞")
    last_trade_at = Column(DateTime(timezone=True), comment="–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞")
    
    # –°–≤—è–∑–∏
    user = relationship("User")
    token = relationship("Token")
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index("idx_user_tokens_user_id", "user_id"),
        Index("idx_user_tokens_token_id", "token_id"),
        Index("idx_user_tokens_balance", "balance"),
        UniqueConstraint("user_id", "token_id", name="uq_user_token"),
        CheckConstraint("balance >= 0", name="check_non_negative_balance"),
    )
    
    @hybrid_property
    def unrealized_pnl(self) -> Optional[Decimal]:
        """–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫"""
        if self.balance <= 0 or not self.avg_buy_price:
            return Decimal('0')
        
        # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
        # –≠—Ç–æ –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª—è—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å–Ω–æ–º —Å–ª–æ–µ
        return None


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –¢–ê–ë–õ–ò–¶–´ ===

class Analytics(Base, UUIDMixin, TimestampMixin):
    """–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
    __tablename__ = "analytics"
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥
    date = Column(DateTime(timezone=True), nullable=False, comment="–î–∞—Ç–∞")
    period_type = Column(String(10), nullable=False, comment="–¢–∏–ø –ø–µ—Ä–∏–æ–¥–∞ (day, hour)")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_users = Column(Integer, default=0, comment="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    active_users = Column(Integer, default=0, comment="–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    new_users = Column(Integer, default=0, comment="–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    
    total_tokens = Column(Integer, default=0, comment="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤")
    new_tokens = Column(Integer, default=0, comment="–ù–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã")
    graduated_tokens = Column(Integer, default=0, comment="–¢–æ–∫–µ–Ω—ã –Ω–∞ DEX")
    
    total_trades = Column(Integer, default=0, comment="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫")
    total_volume = Column(DECIMAL(20, 9), default=0, comment="–û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤")
    platform_fees = Column(DECIMAL(20, 9), default=0, comment="–°–æ–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏")
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index("idx_analytics_date", "date"),
        Index("idx_analytics_period", "period_type", "date"),
        UniqueConstraint("date", "period_type", name="uq_analytics_period"),
    )


# === –§–£–ù–ö–¶–ò–ò-–•–ï–õ–ü–ï–†–´ ===

def get_current_utc_time() -> datetime:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ UTC"""
    return datetime.now(timezone.utc)