#!/usr/bin/env python3
"""
üë§ API —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
Production-ready user management —Å –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
"""

import logging
from typing import List, Optional, Dict, Any
from uuid import UUID
from datetime import datetime, timedelta

from fastapi import APIRouter, Depends, HTTPException, status, Query, Path
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, or_, desc, func, update
from sqlalchemy.orm import selectinload
import jwt
import hashlib

from ..models.database import User, Token, Trade, UserRole, UserStatus
from ..schemas.requests import (
    UserRegistrationRequest, UserProfileUpdateRequest, 
    UserPasswordChangeRequest, PaginationRequest
)
from ..schemas.responses import (
    UserProfileResponse, UserStatsResponse, UserTokensResponse,
    UserTradesResponse, SuccessResponse, AuthTokenResponse
)
from ..services.cache import CacheService
from ..core.exceptions import (
    RecordNotFoundException, ValidationException, AuthenticationException,
    AuthorizationException, DatabaseException
)
from ..core.config import settings

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = APIRouter()
security = HTTPBearer()


# === DEPENDENCY FUNCTIONS ===

async def get_db() -> AsyncSession:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î"""
    pass


async def get_current_user() -> User:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    pass


async def get_cache_service() -> CacheService:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Cache —Å–µ—Ä–≤–∏—Å–∞"""
    pass


async def verify_admin_role(current_user: User = Depends(get_current_user)) -> User:
    """Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    if current_user.role != UserRole.ADMIN:
        raise AuthorizationException("Admin role required")
    return current_user


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def _get_user_by_id(db: AsyncSession, user_id: UUID) -> User:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    stmt = select(User).where(User.id == user_id)
    result = await db.execute(stmt)
    user = result.scalar_one_or_none()
    
    if not user:
        raise RecordNotFoundException("User", str(user_id))
    
    return user


async def _get_user_by_wallet(db: AsyncSession, wallet_address: str) -> User:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ wallet –∞–¥—Ä–µ—Å—É"""
    stmt = select(User).where(User.wallet_address == wallet_address)
    result = await db.execute(stmt)
    user = result.scalar_one_or_none()
    
    if not user:
        raise RecordNotFoundException("User", wallet_address)
    
    return user


def _generate_jwt_token(user: User) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    payload = {
        "user_id": str(user.id),
        "wallet_address": user.wallet_address,
        "role": user.role.value,
        "exp": datetime.utcnow() + timedelta(days=7),
        "iat": datetime.utcnow()
    }
    
    return jwt.encode(payload, settings.SECRET_KEY, algorithm="HS256")


async def _calculate_user_stats(db: AsyncSession, user: User) -> Dict[str, Any]:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤
    trades_query = select(func.count(Trade.id)).where(Trade.user_id == user.id)
    trades_result = await db.execute(trades_query)
    total_trades = trades_result.scalar() or 0
    
    # –û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –≤ SOL
    volume_query = select(func.sum(Trade.sol_amount)).where(Trade.user_id == user.id)
    volume_result = await db.execute(volume_query)
    total_volume_sol = float(volume_result.scalar() or 0)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    tokens_query = select(func.count(Token.id)).where(Token.creator_id == user.id)
    tokens_result = await db.execute(tokens_query)
    tokens_created = tokens_result.scalar() or 0
    
    # P&L –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    thirty_days_ago = datetime.utcnow() - timedelta(days=30)
    pnl_query = select(func.sum(Trade.realized_pnl)).where(
        and_(
            Trade.user_id == user.id,
            Trade.created_at >= thirty_days_ago
        )
    )
    pnl_result = await db.execute(pnl_query)
    pnl_30d = float(pnl_result.scalar() or 0)
    
    return {
        "total_trades": total_trades,
        "total_volume_sol": total_volume_sol,
        "tokens_created": tokens_created,
        "pnl_30d": pnl_30d,
        "win_rate": user.win_rate,
        "reputation_score": user.reputation_score
    }


# === ENDPOINTS ===

@router.post("/register", response_model=AuthTokenResponse)
async def register_user(
    registration_data: UserRegistrationRequest,
    db: AsyncSession = Depends(get_db),
    cache: CacheService = Depends(get_cache_service)
):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å wallet –∞–¥—Ä–µ—Å–æ–º –∏ –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user = await db.execute(
            select(User).where(User.wallet_address == registration_data.wallet_address)
        )
        if existing_user.scalar_one_or_none():
            raise ValidationException("User with this wallet address already exists")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è wallet –∞–¥—Ä–µ—Å–∞ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã)
        if len(registration_data.wallet_address) != 44:
            raise ValidationException("Invalid Solana wallet address format")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = User(
            wallet_address=registration_data.wallet_address,
            username=registration_data.username,
            email=registration_data.email,
            profile_image_url=registration_data.profile_image_url,
            bio=registration_data.bio,
            role=UserRole.USER,
            status=UserStatus.ACTIVE,
            reputation_score=100.0  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è
        )
        
        db.add(new_user)
        await db.commit()
        await db.refresh(new_user)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
        access_token = _generate_jwt_token(new_user)
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await cache.cache_user_profile(str(new_user.id), {
            "id": str(new_user.id),
            "wallet_address": new_user.wallet_address,
            "username": new_user.username,
            "role": new_user.role.value,
            "reputation_score": new_user.reputation_score
        })
        
        logger.info(f"‚úÖ New user registered: {new_user.wallet_address}")
        
        return AuthTokenResponse(
            access_token=access_token,
            token_type="bearer",
            expires_in=7 * 24 * 3600,  # 7 –¥–Ω–µ–π
            user=UserProfileResponse.from_orm(new_user)
        )
        
    except ValidationException:
        raise
    except Exception as e:
        logger.error(f"Failed to register user: {e}")
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to register user"
        )


@router.post("/auth/wallet", response_model=AuthTokenResponse)
async def authenticate_wallet(
    wallet_address: str,
    signature: str,
    message: str,
    db: AsyncSession = Depends(get_db),
    cache: CacheService = Depends(get_cache_service)
):
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø–æ–¥–ø–∏—Å—å –∫–æ—à–µ–ª—å–∫–∞
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω.
    """
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Solana
        # –î–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        user = await _get_user_by_wallet(db, wallet_address)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        user.last_login_at = datetime.utcnow()
        await db.commit()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        access_token = _generate_jwt_token(user)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
        await cache.cache_user_profile(str(user.id), {
            "id": str(user.id),
            "wallet_address": user.wallet_address,
            "username": user.username,
            "role": user.role.value,
            "reputation_score": user.reputation_score
        })
        
        logger.info(f"User authenticated: {wallet_address}")
        
        return AuthTokenResponse(
            access_token=access_token,
            token_type="bearer",
            expires_in=7 * 24 * 3600,
            user=UserProfileResponse.from_orm(user)
        )
        
    except RecordNotFoundException:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found. Please register first."
        )
    except Exception as e:
        logger.error(f"Wallet authentication failed: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Authentication failed"
        )


@router.get("/profile", response_model=UserProfileResponse)
async def get_current_user_profile(
    current_user: User = Depends(get_current_user),
    cache: CacheService = Depends(get_cache_service)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
        cached_profile = await cache.get_user_profile(str(current_user.id))
        if cached_profile:
            return UserProfileResponse(**cached_profile)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = UserProfileResponse.from_orm(current_user)
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        await cache.cache_user_profile(str(current_user.id), response.dict())
        
        return response
        
    except Exception as e:
        logger.error(f"Failed to get user profile: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to retrieve profile"
        )


@router.put("/profile", response_model=UserProfileResponse)
async def update_user_profile(
    update_data: UserProfileUpdateRequest,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user),
    cache: CacheService = Depends(get_cache_service)
):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
        update_fields = update_data.dict(exclude_unset=True)
        
        for field, value in update_fields.items():
            if hasattr(current_user, field):
                setattr(current_user, field, value)
        
        current_user.updated_at = datetime.utcnow()
        
        await db.commit()
        await db.refresh(current_user)
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        await cache.delete(str(current_user.id), 'user')
        
        response = UserProfileResponse.from_orm(current_user)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
        await cache.cache_user_profile(str(current_user.id), response.dict())
        
        logger.info(f"User profile updated: {current_user.id}")
        
        return response
        
    except Exception as e:
        logger.error(f"Failed to update profile: {e}")
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to update profile"
        )


@router.get("/stats", response_model=UserStatsResponse)
async def get_user_stats(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db),
    cache: CacheService = Depends(get_cache_service)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
        cache_key = f"user_stats:{current_user.id}"
        cached_stats = await cache.get(cache_key, 'analytics')
        
        if cached_stats:
            return UserStatsResponse(**cached_stats)
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = await _calculate_user_stats(db, current_user)
        
        response = UserStatsResponse(
            user_id=current_user.id,
            **stats
        )
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 10 –º–∏–Ω—É—Ç
        await cache.set(cache_key, response.dict(), 'analytics', ttl=600)
        
        return response
        
    except Exception as e:
        logger.error(f"Failed to get user stats: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to retrieve statistics"
        )


@router.get("/tokens", response_model=UserTokensResponse)
async def get_user_tokens(
    pagination: PaginationRequest = Depends(),
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    try:
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = select(Token).where(Token.creator_id == current_user.id)
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        count_query = select(func.count()).select_from(
            query.subquery()
        )
        result = await db.execute(count_query)
        total_count = result.scalar()
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
        query = query.order_by(desc(Token.created_at))
        offset = (pagination.page - 1) * pagination.limit
        query = query.offset(offset).limit(pagination.limit)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        result = await db.execute(query)
        tokens = result.scalars().all()
        
        return UserTokensResponse(
            tokens=[TokenResponse.from_orm(token) for token in tokens],
            pagination=PaginationResponse(
                page=pagination.page,
                limit=pagination.limit,
                total=total_count,
                pages=(total_count + pagination.limit - 1) // pagination.limit,
                has_next=pagination.page * pagination.limit < total_count,
                has_prev=pagination.page > 1
            )
        )
        
    except Exception as e:
        logger.error(f"Failed to get user tokens: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to retrieve tokens"
        )


@router.get("/trades", response_model=UserTradesResponse)
async def get_user_trades(
    pagination: PaginationRequest = Depends(),
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å join –Ω–∞ —Ç–æ–∫–µ–Ω—ã
        query = select(Trade).where(Trade.user_id == current_user.id)
        query = query.options(selectinload(Trade.token))
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        count_query = select(func.count()).select_from(
            query.subquery()
        )
        result = await db.execute(count_query)
        total_count = result.scalar()
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
        query = query.order_by(desc(Trade.created_at))
        offset = (pagination.page - 1) * pagination.limit
        query = query.offset(offset).limit(pagination.limit)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        result = await db.execute(query)
        trades = result.scalars().all()
        
        return UserTradesResponse(
            trades=[TradeResponse.from_orm(trade) for trade in trades],
            pagination=PaginationResponse(
                page=pagination.page,
                limit=pagination.limit,
                total=total_count,
                pages=(total_count + pagination.limit - 1) // pagination.limit,
                has_next=pagination.page * pagination.limit < total_count,
                has_prev=pagination.page > 1
            )
        )
        
    except Exception as e:
        logger.error(f"Failed to get user trades: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to retrieve trades"
        )


@router.get("/{user_id}", response_model=UserProfileResponse)
async def get_user_by_id(
    user_id: UUID = Path(..., description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    db: AsyncSession = Depends(get_db),
    cache: CacheService = Depends(get_cache_service)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    """
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
        cache_key = f"public_profile:{user_id}"
        cached_profile = await cache.get(cache_key, 'user')
        
        if cached_profile:
            return UserProfileResponse(**cached_profile)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î
        user = await _get_user_by_id(db, user_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
        if user.status != UserStatus.ACTIVE:
            raise RecordNotFoundException("User", str(user_id))
        
        response = UserProfileResponse.from_orm(user)
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ 5 –º–∏–Ω—É—Ç
        await cache.set(cache_key, response.dict(), 'user', ttl=300)
        
        return response
        
    except RecordNotFoundException:
        raise
    except Exception as e:
        logger.error(f"Failed to get user by ID: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to retrieve user"
        )


@router.delete("/profile")
async def delete_user_account(
    password_confirmation: str,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user),
    cache: CacheService = Depends(get_cache_service)
):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
    """
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è/–ø–æ–¥–ø–∏—Å–∏
        
        # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ (–Ω–µ —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é)
        current_user.status = UserStatus.DELETED
        current_user.deleted_at = datetime.utcnow()
        
        await db.commit()
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        await cache.delete(str(current_user.id), 'user')
        await cache.delete(f"public_profile:{current_user.id}", 'user')
        
        logger.info(f"User account deleted: {current_user.id}")
        
        return SuccessResponse(
            message="Account deleted successfully",
            timestamp=datetime.utcnow()
        )
        
    except Exception as e:
        logger.error(f"Failed to delete account: {e}")
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to delete account"
        )


# === ADMIN ENDPOINTS ===

@router.get("/admin/users", response_model=List[UserProfileResponse])
async def get_all_users(
    pagination: PaginationRequest = Depends(),
    admin_user: User = Depends(verify_admin_role),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
    """
    try:
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = select(User).where(User.status != UserStatus.DELETED)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
        query = query.order_by(desc(User.created_at))
        offset = (pagination.page - 1) * pagination.limit
        query = query.offset(offset).limit(pagination.limit)
        
        result = await db.execute(query)
        users = result.scalars().all()
        
        return [UserProfileResponse.from_orm(user) for user in users]
        
    except Exception as e:
        logger.error(f"Failed to get users list: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to retrieve users"
        )


@router.put("/admin/users/{user_id}/status")
async def update_user_status(
    user_id: UUID,
    new_status: UserStatus,
    admin_user: User = Depends(verify_admin_role),
    db: AsyncSession = Depends(get_db),
    cache: CacheService = Depends(get_cache_service)
):
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
    """
    try:
        user = await _get_user_by_id(db, user_id)
        
        old_status = user.status
        user.status = new_status
        user.updated_at = datetime.utcnow()
        
        await db.commit()
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        await cache.delete(str(user_id), 'user')
        await cache.delete(f"public_profile:{user_id}", 'user')
        
        logger.info(f"Admin {admin_user.id} changed user {user_id} status: {old_status} -> {new_status}")
        
        return SuccessResponse(
            message=f"User status updated to {new_status.value}",
            timestamp=datetime.utcnow()
        )
        
    except RecordNotFoundException:
        raise
    except Exception as e:
        logger.error(f"Failed to update user status: {e}")
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to update user status"
        )