#!/usr/bin/env python3
"""
üõ°Ô∏è Security Middleware –¥–ª—è Anonymeme API
Production-ready –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∑–∞—â–∏—Ç–æ–π
"""

import time
import logging
import secrets
import hashlib
from typing import Dict, Set, Optional, Tuple
from datetime import datetime, timedelta
from ipaddress import ip_address, ip_network
import re

from fastapi import Request, Response, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import JSONResponse
import jwt

from ..core.config import settings
from ..core.exceptions import (
    RateLimitException, SecurityException, BotActivityException,
    SuspiciousActivityException, AuthenticationException
)

logger = logging.getLogger(__name__)


class SecurityMiddleware(BaseHTTPMiddleware):
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    –í–∫–ª—é—á–∞–µ—Ç rate limiting, bot detection, IP filtering, –∏ –¥—Ä—É–≥–∏–µ –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
    """
    
    def __init__(self, app):
        super().__init__(app)
        
        # Rate limiting storage (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
        self.rate_limit_storage: Dict[str, Dict] = {}
        
        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞
        self.suspicious_ips: Set[str] = set()
        
        # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP
        self.blocked_ips: Set[str] = set()
        
        # Whitelist IP —Å–µ—Ç–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        self.admin_networks = [
            ip_network("127.0.0.0/8"),    # localhost
            ip_network("10.0.0.0/8"),     # private
            ip_network("172.16.0.0/12"),  # private
            ip_network("192.168.0.0/16"), # private
        ]
        
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–æ—Ç–æ–≤
        self.bot_patterns = [
            re.compile(r'bot|crawler|spider|scraper', re.IGNORECASE),
            re.compile(r'curl|wget|python-requests|http', re.IGNORECASE),
            re.compile(r'headless|phantom|selenium|puppeteer', re.IGNORECASE),
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.attack_patterns = [
            re.compile(r'\.\./', re.IGNORECASE),  # Path traversal
            re.compile(r'<script|javascript:|data:', re.IGNORECASE),  # XSS
            re.compile(r'union.*select|drop.*table|insert.*into', re.IGNORECASE),  # SQL injection
            re.compile(r'exec\(|eval\(|system\(', re.IGNORECASE),  # Code injection
        ]
        
        # –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ endpoints (—Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        self.protected_paths = {
            '/api/v1/trading/',
            '/api/v1/tokens/create',
            '/api/v1/users/profile',
            '/api/v1/admin/',
        }
        
        # Public endpoints (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        self.public_paths = {
            '/api/v1/tokens',
            '/api/v1/analytics',
            '/health',
            '/metrics',
            '/docs',
            '/redoc',
        }
        
        logger.info("Security middleware initialized")
    
    async def dispatch(self, request: Request, call_next):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ middleware"""
        start_time = time.time()
        
        try:
            # 1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            await self._check_request_security(request)
            
            # 2. IP —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            client_ip = self._get_client_ip(request)
            await self._check_ip_security(client_ip, request)
            
            # 3. Rate limiting
            await self._check_rate_limits(request, client_ip)
            
            # 4. Bot detection
            await self._check_bot_activity(request)
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints
            await self._check_authentication(request)
            
            # 6. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ security headers
            response = await call_next(request)
            self._add_security_headers(response)
            
            # 7. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            await self._log_request(request, response, time.time() - start_time)
            
            return response
            
        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"Security middleware error: {e}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Security check failed"
            )
    
    def _get_client_ip(self, request: Request) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP –∫–ª–∏–µ–Ω—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π IP –∏–∑ —Å–ø–∏—Å–∫–∞
            return forwarded_for.split(",")[0].strip()
        
        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip.strip()
        
        # Fallback –Ω–∞ direct connection
        return request.client.host if request.client else "unknown"
    
    async def _check_request_security(self, request: Request):
        """–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
        content_length = request.headers.get("content-length")
        if content_length:
            length = int(content_length)
            if length > 10 * 1024 * 1024:  # 10MB –ª–∏–º–∏—Ç
                raise HTTPException(
                    status_code=status.HTTP_413_REQUEST_ENTITY_TOO_LARGE,
                    detail="Request too large"
                )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ç–∞–∫—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ URL
        url_str = str(request.url)
        for pattern in self.attack_patterns:
            if pattern.search(url_str):
                logger.warning(f"Attack pattern detected in URL: {url_str}")
                raise SecurityException(
                    "Suspicious request pattern detected",
                    error_code="ATTACK_PATTERN"
                )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ User-Agent
        user_agent = request.headers.get("user-agent", "")
        if not user_agent or len(user_agent) < 10:
            raise SecurityException(
                "Invalid or missing User-Agent",
                error_code="INVALID_USER_AGENT"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        suspicious_headers = {
            "x-forwarded-host", "x-forwarded-server", "x-forwarded-proto"
        }
        for header in suspicious_headers:
            if header in request.headers:
                value = request.headers[header]
                if any(pattern.search(value) for pattern in self.attack_patterns):
                    raise SecurityException(
                        f"Suspicious header: {header}",
                        error_code="SUSPICIOUS_HEADER"
                    )
    
    async def _check_ip_security(self, client_ip: str, request: Request):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ IP –∞–¥—Ä–µ—Å–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP
        if client_ip in self.blocked_ips:
            logger.warning(f"Blocked IP attempted access: {client_ip}")
            raise SecurityException(
                "Access denied from this IP address",
                error_code="IP_BLOCKED"
            )
        
        try:
            ip_obj = ip_address(client_ip)
        except ValueError:
            logger.warning(f"Invalid IP address: {client_ip}")
            raise SecurityException(
                "Invalid IP address",
                error_code="INVALID_IP"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ/–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        if settings.is_production and ip_obj.is_private:
            logger.warning(f"Private IP in production: {client_ip}")
            raise SecurityException(
                "Private IP not allowed in production",
                error_code="PRIVATE_IP"
            )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö IP
        if client_ip in self.suspicious_ips:
            # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö IP
            await self._apply_strict_rate_limits(request, client_ip)
    
    async def _check_rate_limits(self, request: Request, client_ip: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting"""
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç endpoint
        path = request.url.path
        
        if path.startswith("/api/v1/trading/"):
            # –°—Ç—Ä–æ–≥–∏–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            limit = 10  # 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
            window = 60
        elif path.startswith("/api/v1/tokens/create"):
            # –û—á–µ–Ω—å —Å—Ç—Ä–æ–≥–∏–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
            limit = 3   # 3 —Ç–æ–∫–µ–Ω–∞ –≤ —á–∞—Å
            window = 3600
        elif path.startswith("/api/v1/admin/"):
            # –õ–∏–º–∏—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω –æ–ø–µ—Ä–∞—Ü–∏–π
            limit = 100
            window = 3600
        else:
            # –û–±—ã—á–Ω—ã–µ API –∑–∞–ø—Ä–æ—Å—ã
            limit = settings.RATE_LIMIT_REQUESTS
            window = settings.RATE_LIMIT_WINDOW
        
        # –ö–ª—é—á –¥–ª—è rate limiting (IP + endpoint type)
        rate_key = f"{client_ip}:{path.split('/')[3] if len(path.split('/')) > 3 else 'general'}"
        
        current_time = int(time.time())
        window_start = current_time - (current_time % window)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è IP
        if rate_key not in self.rate_limit_storage:
            self.rate_limit_storage[rate_key] = {
                "requests": [],
                "window_start": window_start
            }
        
        rate_data = self.rate_limit_storage[rate_key]
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        rate_data["requests"] = [
            req_time for req_time in rate_data["requests"]
            if req_time >= window_start
        ]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        if len(rate_data["requests"]) >= limit:
            logger.warning(f"Rate limit exceeded for {client_ip} on {path}")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ IP –≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
            self.suspicious_ips.add(client_ip)
            
            raise RateLimitException(
                detail=f"Rate limit exceeded. Max {limit} requests per {window} seconds.",
                retry_after=window - (current_time % window)
            )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        rate_data["requests"].append(current_time)
        rate_data["window_start"] = window_start
    
    async def _apply_strict_rate_limits(self, request: Request, client_ip: str):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–∏—Ö –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö IP"""
        rate_key = f"strict:{client_ip}"
        limit = 5   # –¢–æ–ª—å–∫–æ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        window = 60
        
        current_time = int(time.time())
        
        if rate_key not in self.rate_limit_storage:
            self.rate_limit_storage[rate_key] = {"requests": []}
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.rate_limit_storage[rate_key]["requests"] = [
            req_time for req_time in self.rate_limit_storage[rate_key]["requests"]
            if req_time >= current_time - window
        ]
        
        if len(self.rate_limit_storage[rate_key]["requests"]) >= limit:
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –Ω–∞—Ä—É—à–µ–Ω–∏–∏
            self.blocked_ips.add(client_ip)
            logger.warning(f"IP {client_ip} blocked due to repeated violations")
            
            raise SecurityException(
                "IP blocked due to suspicious activity",
                error_code="IP_BLOCKED"
            )
        
        self.rate_limit_storage[rate_key]["requests"].append(current_time)
    
    async def _check_bot_activity(self, request: Request):
        """–î–µ—Ç–µ–∫—Ü–∏—è –±–æ—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        user_agent = request.headers.get("user-agent", "")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±–æ—Ç—ã
        for pattern in self.bot_patterns:
            if pattern.search(user_agent):
                logger.info(f"Bot detected: {user_agent}")
                
                # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–æ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∏—Å–∫–æ–≤—ã—Ö) —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
                if any(bot in user_agent.lower() for bot in ['googlebot', 'bingbot']):
                    return
                
                raise BotActivityException()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        browser_headers = ["accept", "accept-language", "accept-encoding"]
        missing_headers = [h for h in browser_headers if h not in request.headers]
        
        if len(missing_headers) >= 2:
            logger.warning(f"Possible bot - missing headers: {missing_headers}")
            raise BotActivityException()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        client_ip = self._get_client_ip(request)
        await self._check_request_timing(client_ip)
    
    async def _check_request_timing(self, client_ip: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        timing_key = f"timing:{client_ip}"
        current_time = time.time()
        
        if timing_key in self.rate_limit_storage:
            last_request = self.rate_limit_storage[timing_key].get("last_request", 0)
            
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç —á–∞—â–µ —á–µ–º –∫–∞–∂–¥—ã–µ 100ms - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            if current_time - last_request < 0.1:
                consecutive_fast = self.rate_limit_storage[timing_key].get("consecutive_fast", 0) + 1
                self.rate_limit_storage[timing_key]["consecutive_fast"] = consecutive_fast
                
                if consecutive_fast > 5:  # 5 –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
                    logger.warning(f"Suspicious fast requests from {client_ip}")
                    self.suspicious_ips.add(client_ip)
                    raise SuspiciousActivityException("fast_requests")
            else:
                self.rate_limit_storage[timing_key]["consecutive_fast"] = 0
        else:
            self.rate_limit_storage[timing_key] = {}
        
        self.rate_limit_storage[timing_key]["last_request"] = current_time
    
    async def _check_authentication(self, request: Request):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints"""
        
        path = request.url.path
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ endpoint –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        requires_auth = any(path.startswith(protected) for protected in self.protected_paths)
        
        if not requires_auth:
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_header = request.headers.get("authorization")
        if not auth_header or not auth_header.startswith("Bearer "):
            raise AuthenticationException("Missing or invalid authorization token")
        
        token = auth_header.split(" ")[1]
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
            payload = jwt.decode(
                token,
                settings.SECRET_KEY,
                algorithms=["HS256"]
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
            exp = payload.get("exp")
            if exp and datetime.utcfromtimestamp(exp) < datetime.utcnow():
                raise AuthenticationException("Token expired")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ request state
            request.state.user_id = payload.get("user_id")
            request.state.wallet_address = payload.get("wallet_address")
            request.state.role = payload.get("role", "user")
            
        except jwt.InvalidTokenError as e:
            logger.warning(f"Invalid JWT token: {e}")
            raise AuthenticationException("Invalid token")
    
    def _add_security_headers(self, response: Response):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ security headers –≤ –æ—Ç–≤–µ—Ç"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ security headers
        response.headers["X-Content-Type-Options"] = "nosniff"
        response.headers["X-Frame-Options"] = "DENY"
        response.headers["X-XSS-Protection"] = "1; mode=block"
        response.headers["Referrer-Policy"] = "strict-origin-when-cross-origin"
        response.headers["Permissions-Policy"] = "geolocation=(), microphone=(), camera=()"
        
        # HSTS –¥–ª—è HTTPS
        if settings.is_production:
            response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"
        
        # CSP header
        csp_directives = [
            "default-src 'self'",
            "script-src 'self' 'unsafe-inline' 'unsafe-eval'",
            "style-src 'self' 'unsafe-inline'",
            "img-src 'self' data: https:",
            "connect-src 'self' wss: https:",
            "frame-ancestors 'none'",
            "base-uri 'self'",
            "form-action 'self'"
        ]
        response.headers["Content-Security-Policy"] = "; ".join(csp_directives)
        
        # Rate limiting headers
        response.headers["X-RateLimit-Limit"] = str(settings.RATE_LIMIT_REQUESTS)
        response.headers["X-RateLimit-Window"] = str(settings.RATE_LIMIT_WINDOW)
        
        # API version
        response.headers["X-API-Version"] = settings.APP_VERSION
        
        # Request ID –¥–ª—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞
        response.headers["X-Request-ID"] = secrets.token_urlsafe(16)
    
    async def _log_request(self, request: Request, response: Response, duration: float):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞"""
        
        client_ip = self._get_client_ip(request)
        
        log_data = {
            "method": request.method,
            "path": request.url.path,
            "client_ip": client_ip,
            "status_code": response.status_code,
            "duration_ms": round(duration * 1000, 2),
            "user_agent": request.headers.get("user-agent", ""),
            "user_id": getattr(request.state, "user_id", None),
        }
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if response.status_code >= 500:
            logger.error("Request failed", extra=log_data)
        elif response.status_code >= 400:
            logger.warning("Request error", extra=log_data)
        else:
            logger.info("Request completed", extra=log_data)
    
    def add_suspicious_ip(self, ip: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ IP –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö"""
        self.suspicious_ips.add(ip)
        logger.warning(f"IP {ip} marked as suspicious")
    
    def block_ip(self, ip: str):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –∞–¥—Ä–µ—Å–∞"""
        self.blocked_ips.add(ip)
        logger.warning(f"IP {ip} blocked")
    
    def unblock_ip(self, ip: str):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –∞–¥—Ä–µ—Å–∞"""
        self.blocked_ips.discard(ip)
        self.suspicious_ips.discard(ip)
        logger.info(f"IP {ip} unblocked")
    
    def get_security_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return {
            "blocked_ips_count": len(self.blocked_ips),
            "suspicious_ips_count": len(self.suspicious_ips),
            "rate_limit_entries": len(self.rate_limit_storage),
            "blocked_ips": list(self.blocked_ips),
            "suspicious_ips": list(self.suspicious_ips),
        }