# üß™ Docker Compose –¥–ª—è Staging –æ–∫—Ä—É–∂–µ–Ω–∏—è
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: crypto_pump_anon_staging
      POSTGRES_USER: staging_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
      - ./scripts/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    secrets:
      - db_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U staging_user -d crypto_pump_anon_staging"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    networks:
      - anonymeme-staging

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass $(cat /run/secrets/redis_password) --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_staging:/data
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$(cat /run/secrets/redis_password)", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    networks:
      - anonymeme-staging

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: staging
    ports:
      - "8000:8000"
    env_file:
      - .env.staging
    environment:
      - DATABASE_URL=postgresql://staging_user:$(cat /run/secrets/db_password)@postgres:5432/crypto_pump_anon_staging
      - REDIS_URL=redis://:$(cat /run/secrets/redis_password)@redis:6379
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    secrets:
      - db_password
      - redis_password
      - jwt_secret
      - encryption_key
      - solana_private_key
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./contracts/pump-core/target/idl:/app/idl:ro
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --workers 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - anonymeme-staging

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: staging
    ports:
      - "3000:3000"
    env_file:
      - .env.staging
    environment:
      - NEXT_PUBLIC_API_URL=https://staging-api.anonymeme.io
      - NEXT_PUBLIC_WS_URL=wss://staging-ws.anonymeme.io
      - NEXT_PUBLIC_ENVIRONMENT=staging
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    networks:
      - anonymeme-staging

  # WebSocket Service
  websocket:
    build:
      context: ./backend
      dockerfile: Dockerfile.websocket
      target: staging
    ports:
      - "8001:8001"
    env_file:
      - .env.staging
    environment:
      - REDIS_URL=redis://:$(cat /run/secrets/redis_password)@redis:6379
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    secrets:
      - redis_password
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    networks:
      - anonymeme-staging

  # Celery Worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: staging
    env_file:
      - .env.staging
    environment:
      - DATABASE_URL=postgresql://staging_user:$(cat /run/secrets/db_password)@postgres:5432/crypto_pump_anon_staging
      - REDIS_URL=redis://:$(cat /run/secrets/redis_password)@redis:6379
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    secrets:
      - db_password
      - redis_password
      - solana_private_key
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A worker.celery_app worker --loglevel=info --concurrency=4
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    networks:
      - anonymeme-staging

  # Celery Beat (Scheduler)
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: staging
    env_file:
      - .env.staging
    environment:
      - DATABASE_URL=postgresql://staging_user:$(cat /run/secrets/db_password)@postgres:5432/crypto_pump_anon_staging
      - REDIS_URL=redis://:$(cat /run/secrets/redis_password)@redis:6379
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    secrets:
      - db_password
      - redis_password
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A worker.celery_app beat --loglevel=info
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    networks:
      - anonymeme-staging

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_staging:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://staging-prometheus.anonymeme.io'
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    networks:
      - anonymeme-staging

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://staging-grafana.anonymeme.io
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
    volumes:
      - grafana_data_staging:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/staging:/etc/grafana/provisioning:ro
    secrets:
      - grafana_password
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    networks:
      - anonymeme-staging

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/ssl/staging:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
      - websocket
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    networks:
      - anonymeme-staging

  # Log aggregator
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    volumes:
      - ./infrastructure/logging/fluentd.staging.conf:/fluentd/etc/fluent.conf:ro
      - /var/log:/var/log:ro
    environment:
      - FLUENTD_CONF=fluent.conf
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    networks:
      - anonymeme-staging

secrets:
  db_password:
    external: true
    name: staging_db_password
  redis_password:
    external: true
    name: staging_redis_password
  jwt_secret:
    external: true
    name: staging_jwt_secret
  encryption_key:
    external: true
    name: staging_encryption_key
  solana_private_key:
    external: true
    name: staging_solana_private_key
  grafana_password:
    external: true
    name: staging_grafana_password

volumes:
  postgres_data_staging:
    driver: local
  redis_data_staging:
    driver: local
  prometheus_data_staging:
    driver: local
  grafana_data_staging:
    driver: local

networks:
  anonymeme-staging:
    driver: bridge
    name: anonymeme-staging-network