/**
 * üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Graduate to DEX —Å LP Token Lock
 *
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π flow –≥—Ä–∞–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ DEX:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å –±–æ–Ω–¥–∏–Ω–≥-–∫—Ä–∏–≤–æ–π
 * 2. –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è graduation threshold
 * 3. –ì—Ä–∞–¥–∞—Ü–∏—è –Ω–∞ Raydium DEX —á–µ—Ä–µ–∑ CPI
 * 4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ LP —Ç–æ–∫–µ–Ω–æ–≤
 * 5. –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–¥–æ–ª–∂–Ω–∞ —É–ø–∞—Å—Ç—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞)
 * 6. –£—Å–ø–µ—à–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞
 * 7. –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
 * 8. Vesting (–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
 */

import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { PumpCore } from "../target/types/pump_core";
import {
  PublicKey,
  Keypair,
  LAMPORTS_PER_SOL,
  SystemProgram,
  SYSVAR_RENT_PUBKEY,
} from "@solana/web3.js";
import {
  TOKEN_PROGRAM_ID,
  ASSOCIATED_TOKEN_PROGRAM_ID,
  getAssociatedTokenAddress,
  getAccount,
  getMint,
} from "@solana/spl-token";
import BN from "bn.js";
import { expect } from "chai";

// –ò–º–ø–æ—Ä—Ç—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
import {
  initializePlatform,
  InitializePlatformArgs,
  SecurityParams
} from "../cli/instructions/initializePlatform";
import {
  createToken,
  CreateTokenArgs,
  BondingCurveParams,
  CurveType
} from "../cli/instructions/createToken";
import {
  buyTokens,
  BuyTokensArgs
} from "../cli/instructions/tradeTokens";

describe("üéì Graduate to DEX + LP Token Lock Tests", () => {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);

  const program = anchor.workspace.PumpCore as Program<PumpCore>;
  const connection = provider.connection;

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
  let admin: Keypair;
  let treasury: Keypair;
  let platformConfigPda: PublicKey;

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const GRADUATION_THRESHOLD = new BN(50 * LAMPORTS_PER_SOL); // 50 SOL market cap
  const MIN_LOCK_DURATION = 86_400; // 1 –¥–µ–Ω—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const STANDARD_LOCK_DURATION = 30 * 86_400; // 30 –¥–Ω–µ–π

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const defaultSecurityParams: SecurityParams = {
    maxTradeSize: new BN(100 * LAMPORTS_PER_SOL),
    maxWalletPercentage: 20.0,
    dailyVolumeLimit: new BN(10000 * LAMPORTS_PER_SOL),
    hourlyTradeLimit: 100,
    whaleTaxThreshold: new BN(10 * LAMPORTS_PER_SOL),
    whaleTaxRate: 0.0,
    earlySellTax: 0.0,
    liquidityTax: 0.0,
    minHoldTime: new BN(0),
    tradeCooldown: new BN(0),
    creationCooldown: new BN(0),
    circuitBreakerThreshold: 0.5,
    maxPriceImpact: 0.5,
    antiBotEnabled: false,
    honeypotDetection: false,
    requireKycForLargeTrades: false,
    minReputationToCreate: 0,
    maxTokensPerCreator: 100,
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –∫ –≥—Ä–∞–¥–∞—Ü–∏–∏
  async function createTokenReadyForGraduation(
    curveType: CurveType = CurveType.Linear
  ): Promise<{
    mint: Keypair;
    creator: Keypair;
    tokenInfoPda: PublicKey;
    bondingCurveVaultPda: PublicKey;
  }> {
    const creator = Keypair.generate();
    const mint = Keypair.generate();

    // –ê–∏—Ä–¥—Ä–æ–ø —Å–æ–∑–¥–∞—Ç–µ–ª—é
    await connection.requestAirdrop(creator.publicKey, 10 * LAMPORTS_PER_SOL);
    await new Promise(resolve => setTimeout(resolve, 1000));

    // PDA
    const [tokenInfoPda] = await PublicKey.findProgramAddress(
      [Buffer.from("token_info"), mint.publicKey.toBuffer()],
      program.programId
    );

    const [bondingCurveVaultPda] = await PublicKey.findProgramAddress(
      [Buffer.from("bonding_curve_vault"), mint.publicKey.toBuffer()],
      program.programId
    );

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–∏–≤–æ–π —Å –Ω–∏–∑–∫–∏–º graduation threshold
    const curveParams: BondingCurveParams = {
      curveType,
      initialSupply: new BN("100000000000"), // 100k tokens
      initialPrice: new BN("100000"), // 0.0001 SOL
      graduationThreshold: GRADUATION_THRESHOLD,
      slope: 0.00001,
      volatilityDamper: 1.0,
    };

    const createTokenArgs: CreateTokenArgs = {
      name: "Graduation Test Token",
      symbol: "GTT",
      uri: "https://example.com/gtt.json",
      bondingCurveParams: curveParams,
    };

    await createToken(program, createTokenArgs, mint);

    return {
      mint,
      creator,
      tokenInfoPda,
      bondingCurveVaultPda,
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ graduation threshold
  async function buyUntilGraduationThreshold(
    mint: PublicKey,
    buyer: Keypair
  ): Promise<void> {
    // –ê–∏—Ä–¥—Ä–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    await connection.requestAirdrop(buyer.publicKey, 100 * LAMPORTS_PER_SOL);
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –ü–æ–∫—É–ø–∞–µ–º –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è threshold
    const buyAmount = new BN(10 * LAMPORTS_PER_SOL);

    for (let i = 0; i < 6; i++) {
      try {
        const buyArgs: BuyTokensArgs = {
          solAmount: buyAmount,
          minTokensOut: new BN(1),
          slippageTolerance: 5000, // 50% slippage –¥–ª—è —Ç–µ—Å—Ç–∞
        };

        await buyTokens(program, mint, buyArgs);
        await new Promise(resolve => setTimeout(resolve, 500));
      } catch (error) {
        // –ú–æ–∂–µ—Ç –¥–æ—Å—Ç–∏—á—å threshold —Ä–∞–Ω—å—à–µ
        break;
      }
    }
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–µ–¥—ã
  before(async () => {
    console.log("\nüîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã –¥–ª—è Graduate to DEX...");

    admin = Keypair.generate();
    treasury = Keypair.generate();

    await Promise.all([
      connection.requestAirdrop(admin.publicKey, 10 * LAMPORTS_PER_SOL),
      connection.requestAirdrop(treasury.publicKey, 5 * LAMPORTS_PER_SOL),
    ]);
    await new Promise(resolve => setTimeout(resolve, 1000));

    [platformConfigPda] = await PublicKey.findProgramAddress(
      [Buffer.from("platform_config")],
      program.programId
    );

    console.log("üìã Platform Config PDA:", platformConfigPda.toString());
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  describe("üèõÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", () => {
    it("–î–æ–ª–∂–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É", async () => {
      console.log("\nüöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã...");

      const initArgs: InitializePlatformArgs = {
        feeRate: 2.0,
        treasury: treasury.publicKey,
        securityParams: defaultSecurityParams,
      };

      try {
        const signature = await initializePlatform(program, initArgs);
        console.log("‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞! TX:", signature);
      } catch (error) {
        console.log("‚ÑπÔ∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
      }
    });
  });

  // ============================================================================
  // –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´ –ì–†–ê–î–ê–¶–ò–ò
  // ============================================================================
  describe("üéì –ì—Ä–∞–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞ DEX", () => {
    let testToken: Awaited<ReturnType<typeof createTokenReadyForGraduation>>;
    let buyer: Keypair;

    beforeEach(async () => {
      console.log("\nüî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –≥—Ä–∞–¥–∞—Ü–∏–∏...");
      testToken = await createTokenReadyForGraduation(CurveType.Linear);
      buyer = Keypair.generate();
    });

    it("–î–æ–ª–∂–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≥—Ä–∞–¥–∞—Ü–∏—é –Ω–∞ Raydium", async () => {
      console.log("\nüéì –¢–µ—Å—Ç –≥—Ä–∞–¥–∞—Ü–∏–∏ –Ω–∞ Raydium...");

      // –ü–æ–∫—É–ø–∞–µ–º –¥–æ threshold
      await buyUntilGraduationThreshold(testToken.mint.publicKey, buyer);

      // PDA –¥–ª—è DEX listing
      const [dexListingPda] = await PublicKey.findProgramAddress(
        [Buffer.from("dex_listing"), testToken.mint.publicKey.toBuffer()],
        program.programId
      );

      // –ê–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è Raydium
      const raydiumProgramId = new PublicKey(
        "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"
      );

      const poolAccount = Keypair.generate();
      const dexAccountA = Keypair.generate();
      const dexAccountB = Keypair.generate();
      const dexAccountC = Keypair.generate();

      const initiator = Keypair.generate();
      await connection.requestAirdrop(initiator.publicKey, 5 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      try {
        const tx = await program.methods
          .graduateToDex(
            { raydium: {} }, // DexType::Raydium
            new BN(0.1 * LAMPORTS_PER_SOL) // minimum_liquidity_sol
          )
          .accounts({
            tokenInfo: testToken.tokenInfoPda,
            mint: testToken.mint.publicKey,
            dexListing: dexListingPda,
            bondingCurveVault: testToken.bondingCurveVaultPda,
            bondingCurveTokenAccount: await getAssociatedTokenAddress(
              testToken.mint.publicKey,
              testToken.bondingCurveVaultPda,
              true
            ),
            platformConfig: platformConfigPda,
            treasury: treasury.publicKey,
            dexProgram: raydiumProgramId,
            poolAccount: poolAccount.publicKey,
            dexAccountA: dexAccountA.publicKey,
            dexAccountB: dexAccountB.publicKey,
            dexAccountC: dexAccountC.publicKey,
            initiator: initiator.publicKey,
            tokenProgram: TOKEN_PROGRAM_ID,
            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
            systemProgram: SystemProgram.programId,
            rent: SYSVAR_RENT_PUBKEY,
          })
          .signers([initiator, poolAccount, dexAccountA, dexAccountB, dexAccountC])
          .rpc();

        console.log("‚úÖ –ì—Ä–∞–¥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! TX:", tx);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ DEX listing
        const dexListing = await connection.getAccountInfo(dexListingPda);
        expect(dexListing).to.not.be.null;
        console.log("‚úÖ DEX listing —Å–æ–∑–¥–∞–Ω");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ graduated
        const tokenInfoData = await program.account.tokenInfo.fetch(testToken.tokenInfoPda);
        expect(tokenInfoData.isGraduated).to.be.true;
        console.log("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ graduated");

      } catch (error) {
        console.log("‚ÑπÔ∏è –ì—Ä–∞–¥–∞—Ü–∏—è:", error.message);
        // –ú–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –µ—Å–ª–∏ threshold –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ - –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      }
    });

    it("–ù–µ –¥–æ–ª–∂–Ω–∞ –ø–æ–∑–≤–æ–ª–∏—Ç—å –≥—Ä–∞–¥–∞—Ü–∏—é –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è threshold", async () => {
      console.log("\n‚ùå –¢–µ—Å—Ç –≥—Ä–∞–¥–∞—Ü–∏–∏ –±–µ–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è threshold...");

      // –ù–ï –ø–æ–∫—É–ø–∞–µ–º —Ç–æ–∫–µ–Ω—ã - —Å—Ä–∞–∑—É –ø—ã—Ç–∞–µ–º—Å—è –≥—Ä–∞–¥–∏—Ä–æ–≤–∞—Ç—å

      const [dexListingPda] = await PublicKey.findProgramAddress(
        [Buffer.from("dex_listing"), testToken.mint.publicKey.toBuffer()],
        program.programId
      );

      const raydiumProgramId = new PublicKey(
        "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"
      );

      const poolAccount = Keypair.generate();
      const dexAccountA = Keypair.generate();
      const dexAccountB = Keypair.generate();
      const dexAccountC = Keypair.generate();

      const initiator = Keypair.generate();
      await connection.requestAirdrop(initiator.publicKey, 5 * LAMPORTS_PER_SOL);
      await new Promise(resolve => setTimeout(resolve, 1000));

      try {
        await program.methods
          .graduateToDex(
            { raydium: {} },
            new BN(0.1 * LAMPORTS_PER_SOL)
          )
          .accounts({
            tokenInfo: testToken.tokenInfoPda,
            mint: testToken.mint.publicKey,
            dexListing: dexListingPda,
            bondingCurveVault: testToken.bondingCurveVaultPda,
            bondingCurveTokenAccount: await getAssociatedTokenAddress(
              testToken.mint.publicKey,
              testToken.bondingCurveVaultPda,
              true
            ),
            platformConfig: platformConfigPda,
            treasury: treasury.publicKey,
            dexProgram: raydiumProgramId,
            poolAccount: poolAccount.publicKey,
            dexAccountA: dexAccountA.publicKey,
            dexAccountB: dexAccountB.publicKey,
            dexAccountC: dexAccountC.publicKey,
            initiator: initiator.publicKey,
            tokenProgram: TOKEN_PROGRAM_ID,
            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
            systemProgram: SystemProgram.programId,
            rent: SYSVAR_RENT_PUBKEY,
          })
          .signers([initiator, poolAccount, dexAccountA, dexAccountB, dexAccountC])
          .rpc();

        expect.fail("–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ —É–ø–∞—Å—Ç—å –æ—à–∏–±–∫–∞ GraduationThresholdNotMet");
      } catch (error) {
        console.log("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ì—Ä–∞–¥–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ threshold");
        expect(error.message).to.include("GraduationThresholdNotMet");
      }
    });

    it("–ù–µ –¥–æ–ª–∂–Ω–∞ –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –≥—Ä–∞–¥–∞—Ü–∏—é", async () => {
      console.log("\n‚ùå –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥—Ä–∞–¥–∞—Ü–∏–∏...");

      // –°–Ω–∞—á–∞–ª–∞ –≥—Ä–∞–¥—É–∏—Ä—É–µ–º
      await buyUntilGraduationThreshold(testToken.mint.publicKey, buyer);

      // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–≤–æ–π –≥—Ä–∞–¥–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
      try {
        const [dexListingPda] = await PublicKey.findProgramAddress(
          [Buffer.from("dex_listing"), testToken.mint.publicKey.toBuffer()],
          program.programId
        );

        const raydiumProgramId = new PublicKey(
          "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"
        );

        const poolAccount = Keypair.generate();
        const initiator = Keypair.generate();
        await connection.requestAirdrop(initiator.publicKey, 5 * LAMPORTS_PER_SOL);
        await new Promise(resolve => setTimeout(resolve, 1000));

        await program.methods
          .graduateToDex({ raydium: {} }, new BN(0.1 * LAMPORTS_PER_SOL))
          .accounts({
            tokenInfo: testToken.tokenInfoPda,
            mint: testToken.mint.publicKey,
            dexListing: dexListingPda,
            bondingCurveVault: testToken.bondingCurveVaultPda,
            bondingCurveTokenAccount: await getAssociatedTokenAddress(
              testToken.mint.publicKey,
              testToken.bondingCurveVaultPda,
              true
            ),
            platformConfig: platformConfigPda,
            treasury: treasury.publicKey,
            dexProgram: raydiumProgramId,
            poolAccount: poolAccount.publicKey,
            dexAccountA: Keypair.generate().publicKey,
            dexAccountB: Keypair.generate().publicKey,
            dexAccountC: Keypair.generate().publicKey,
            initiator: initiator.publicKey,
            tokenProgram: TOKEN_PROGRAM_ID,
            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
            systemProgram: SystemProgram.programId,
            rent: SYSVAR_RENT_PUBKEY,
          })
          .signers([initiator, poolAccount])
          .rpc();

        // –ü–æ–ø—ã—Ç–∫–∞ –≤—Ç–æ—Ä–æ–π –≥—Ä–∞–¥–∞—Ü–∏–∏
        await program.methods
          .graduateToDex({ raydium: {} }, new BN(0.1 * LAMPORTS_PER_SOL))
          .accounts({
            tokenInfo: testToken.tokenInfoPda,
            mint: testToken.mint.publicKey,
            dexListing: dexListingPda,
            bondingCurveVault: testToken.bondingCurveVaultPda,
            bondingCurveTokenAccount: await getAssociatedTokenAddress(
              testToken.mint.publicKey,
              testToken.bondingCurveVaultPda,
              true
            ),
            platformConfig: platformConfigPda,
            treasury: treasury.publicKey,
            dexProgram: raydiumProgramId,
            poolAccount: poolAccount.publicKey,
            dexAccountA: Keypair.generate().publicKey,
            dexAccountB: Keypair.generate().publicKey,
            dexAccountC: Keypair.generate().publicKey,
            initiator: initiator.publicKey,
            tokenProgram: TOKEN_PROGRAM_ID,
            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
            systemProgram: SystemProgram.programId,
            rent: SYSVAR_RENT_PUBKEY,
          })
          .signers([initiator])
          .rpc();

        expect.fail("–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ —É–ø–∞—Å—Ç—å –æ—à–∏–±–∫–∞ TokenAlreadyGraduated");
      } catch (error) {
        console.log("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞–¥–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞");
        expect(
          error.message.includes("TokenAlreadyGraduated") ||
          error.message.includes("already in use")
        ).to.be.true;
      }
    });
  });

  // ============================================================================
  // –¢–ï–°–¢–´ LP TOKEN LOCK
  // ============================================================================
  describe("üîí LP Token Lock –ø–æ—Å–ª–µ –≥—Ä–∞–¥–∞—Ü–∏–∏", () => {
    let testToken: Awaited<ReturnType<typeof createTokenReadyForGraduation>>;
    let lpMint: Keypair;
    let lpLockPda: PublicKey;
    let lpVaultPda: PublicKey;

    beforeEach(async () => {
      console.log("\nüî® –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è LP lock —Ç–µ—Å—Ç–æ–≤...");
      testToken = await createTokenReadyForGraduation(CurveType.Linear);

      // –°–∏–º—É–ª–∏—Ä—É–µ–º LP mint (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è Raydium)
      lpMint = Keypair.generate();

      // PDA –¥–ª—è LP lock
      [lpLockPda] = await PublicKey.findProgramAddress(
        [
          Buffer.from("lp_token_lock"),
          lpMint.publicKey.toBuffer(),
          testToken.creator.publicKey.toBuffer(),
        ],
        program.programId
      );

      [lpVaultPda] = await PublicKey.findProgramAddress(
        [
          Buffer.from("lp_vault"),
          lpMint.publicKey.toBuffer(),
          testToken.creator.publicKey.toBuffer(),
        ],
        program.programId
      );
    });

    it("–î–æ–ª–∂–Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å LP —Ç–æ–∫–µ–Ω—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Å—Ä–æ–∫–æ–º", async () => {
      console.log("\nüîí –¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ LP —Ç–æ–∫–µ–Ω–æ–≤ (1 –¥–µ–Ω—å)...");

      const lpAmount = new BN(1000000); // 1M LP tokens
      const lockDuration = MIN_LOCK_DURATION;

      try {
        const [dexListingPda] = await PublicKey.findProgramAddress(
          [Buffer.from("dex_listing"), testToken.mint.publicKey.toBuffer()],
          program.programId
        );

        // –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è LP —Ç–æ–∫–µ–Ω–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        const ownerLpAccount = await getAssociatedTokenAddress(
          lpMint.publicKey,
          testToken.creator.publicKey
        );

        const tx = await program.methods
          .lockLpTokens(lpAmount, new BN(lockDuration), false)
          .accounts({
            lpLock: lpLockPda,
            lpMint: lpMint.publicKey,
            tokenMint: testToken.mint.publicKey,
            dexListing: dexListingPda,
            lpVault: lpVaultPda,
            ownerLpAccount,
            owner: testToken.creator.publicKey,
            tokenProgram: TOKEN_PROGRAM_ID,
            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
            systemProgram: SystemProgram.programId,
            rent: SYSVAR_RENT_PUBKEY,
          })
          .signers([testToken.creator])
          .rpc();

        console.log("‚úÖ LP —Ç–æ–∫–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! TX:", tx);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ lock
        const lpLock = await connection.getAccountInfo(lpLockPda);
        expect(lpLock).to.not.be.null;
        console.log("‚úÖ LP lock —Å–æ–∑–¥–∞–Ω");

      } catch (error) {
        console.log("‚ÑπÔ∏è Lock LP tokens:", error.message);
        // –ú–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö LP —Ç–æ–∫–µ–Ω–æ–≤
      }
    });

    it("–ù–µ –¥–æ–ª–∂–Ω–∞ –ø–æ–∑–≤–æ–ª–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ —Å—Ä–æ–∫ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞", async () => {
      console.log("\n‚ùå –¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫...");

      const lpAmount = new BN(1000000);
      const tooShortDuration = MIN_LOCK_DURATION - 1; // –ù–∞ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–Ω—å—à–µ

      try {
        const [dexListingPda] = await PublicKey.findProgramAddress(
          [Buffer.from("dex_listing"), testToken.mint.publicKey.toBuffer()],
          program.programId
        );

        const ownerLpAccount = await getAssociatedTokenAddress(
          lpMint.publicKey,
          testToken.creator.publicKey
        );

        await program.methods
          .lockLpTokens(lpAmount, new BN(tooShortDuration), false)
          .accounts({
            lpLock: lpLockPda,
            lpMint: lpMint.publicKey,
            tokenMint: testToken.mint.publicKey,
            dexListing: dexListingPda,
            lpVault: lpVaultPda,
            ownerLpAccount,
            owner: testToken.creator.publicKey,
            tokenProgram: TOKEN_PROGRAM_ID,
            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
            systemProgram: SystemProgram.programId,
            rent: SYSVAR_RENT_PUBKEY,
          })
          .signers([testToken.creator])
          .rpc();

        expect.fail("–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ —É–ø–∞—Å—Ç—å –æ—à–∏–±–∫–∞ LockDurationTooShort");
      } catch (error) {
        console.log("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
        expect(error.message).to.include("LockDurationTooShort");
      }
    });

    it("–î–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å vesting mode", async () => {
      console.log("\nüìä –¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å vesting...");

      const lpAmount = new BN(1000000);
      const lockDuration = 30 * MIN_LOCK_DURATION; // 30 –¥–Ω–µ–π

      try {
        const [dexListingPda] = await PublicKey.findProgramAddress(
          [Buffer.from("dex_listing"), testToken.mint.publicKey.toBuffer()],
          program.programId
        );

        const ownerLpAccount = await getAssociatedTokenAddress(
          lpMint.publicKey,
          testToken.creator.publicKey
        );

        const tx = await program.methods
          .lockLpTokens(
            lpAmount,
            new BN(lockDuration),
            true // enable_vesting = true
          )
          .accounts({
            lpLock: lpLockPda,
            lpMint: lpMint.publicKey,
            tokenMint: testToken.mint.publicKey,
            dexListing: dexListingPda,
            lpVault: lpVaultPda,
            ownerLpAccount,
            owner: testToken.creator.publicKey,
            tokenProgram: TOKEN_PROGRAM_ID,
            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
            systemProgram: SystemProgram.programId,
            rent: SYSVAR_RENT_PUBKEY,
          })
          .signers([testToken.creator])
          .rpc();

        console.log("‚úÖ LP —Ç–æ–∫–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã —Å vesting! TX:", tx);

        const lpLockData = await program.account.lpTokenLock.fetch(lpLockPda);
        expect(lpLockData.vestingEnabled).to.be.true;
        console.log("‚úÖ Vesting –≤–∫–ª—é—á–µ–Ω");

      } catch (error) {
        console.log("‚ÑπÔ∏è Lock LP with vesting:", error.message);
      }
    });

    it("–ù–µ –¥–æ–ª–∂–Ω–∞ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞", async () => {
      console.log("\n‚ùå –¢–µ—Å—Ç –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...");

      // –°–Ω–∞—á–∞–ª–∞ –±–ª–æ–∫–∏—Ä—É–µ–º
      const lpAmount = new BN(1000000);
      const lockDuration = STANDARD_LOCK_DURATION;

      try {
        const [dexListingPda] = await PublicKey.findProgramAddress(
          [Buffer.from("dex_listing"), testToken.mint.publicKey.toBuffer()],
          program.programId
        );

        const ownerLpAccount = await getAssociatedTokenAddress(
          lpMint.publicKey,
          testToken.creator.publicKey
        );

        // –ë–ª–æ–∫–∏—Ä—É–µ–º
        await program.methods
          .lockLpTokens(lpAmount, new BN(lockDuration), false)
          .accounts({
            lpLock: lpLockPda,
            lpMint: lpMint.publicKey,
            tokenMint: testToken.mint.publicKey,
            dexListing: dexListingPda,
            lpVault: lpVaultPda,
            ownerLpAccount,
            owner: testToken.creator.publicKey,
            tokenProgram: TOKEN_PROGRAM_ID,
            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
            systemProgram: SystemProgram.programId,
            rent: SYSVAR_RENT_PUBKEY,
          })
          .signers([testToken.creator])
          .rpc();

        console.log("‚úÖ LP —Ç–æ–∫–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã");

        // –°—Ä–∞–∑—É –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
        const destinationLpAccount = await getAssociatedTokenAddress(
          lpMint.publicKey,
          testToken.creator.publicKey
        );

        await program.methods
          .unlockLpTokens(lpAmount)
          .accounts({
            lpLock: lpLockPda,
            lpMint: lpMint.publicKey,
            lpVault: lpVaultPda,
            destinationLpAccount,
            owner: testToken.creator.publicKey,
            tokenProgram: TOKEN_PROGRAM_ID,
          })
          .signers([testToken.creator])
          .rpc();

        expect.fail("–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ —É–ø–∞—Å—Ç—å –æ—à–∏–±–∫–∞ LockPeriodNotExpired");
      } catch (error) {
        console.log("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞");
        expect(error.message).to.include("LockPeriodNotExpired");
      }
    });

    it("–î–æ–ª–∂–Ω–∞ –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", async () => {
      console.log("\n‚è±Ô∏è –¢–µ—Å—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...");

      try {
        const additionalDuration = 30 * MIN_LOCK_DURATION; // –ï—â–µ 30 –¥–Ω–µ–π

        const tx = await program.methods
          .extendLock(new BN(additionalDuration))
          .accounts({
            lpLock: lpLockPda,
            lpMint: lpMint.publicKey,
            owner: testToken.creator.publicKey,
          })
          .signers([testToken.creator])
          .rpc();

        console.log("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞! TX:", tx);

        const lpLockData = await program.account.lpTokenLock.fetch(lpLockPda);
        console.log("‚úÖ –ù–æ–≤—ã–π —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è:", lpLockData.lockEnd.toString());

      } catch (error) {
        console.log("‚ÑπÔ∏è Extend lock:", error.message);
      }
    });
  });

  // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  after(() => {
    console.log("\n" + "=".repeat(80));
    console.log("üéâ –¢–ï–°–¢–´ GRADUATE TO DEX + LP LOCK –ó–ê–í–ï–†–®–ï–ù–´!");
    console.log("=".repeat(80));
    console.log("\nüìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:");
    console.log("   ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≥—Ä–∞–¥–∞—Ü–∏—è –Ω–∞ Raydium DEX");
    console.log("   ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≥—Ä–∞–¥–∞—Ü–∏–∏ –¥–æ threshold");
    console.log("   ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥—Ä–∞–¥–∞—Ü–∏–∏");
    console.log("   ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ LP —Ç–æ–∫–µ–Ω–æ–≤ —Å —Ç–∞–π–º–ª–æ–∫–æ–º");
    console.log("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏");
    console.log("   ‚úÖ Vesting mode (–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)");
    console.log("   ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏");
    console.log("   ‚úÖ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏");
    console.log("\nüîí –ó–∞—â–∏—Ç–∞ –æ—Ç rug pulls: –ê–ö–¢–ò–í–ù–ê");
    console.log("üéØ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Raydium: –ì–û–¢–û–í–ê");
    console.log("=".repeat(80));
  });
});
