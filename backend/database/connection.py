#!/usr/bin/env python3
"""
üîó Database Connection Management –¥–ª—è Anonymeme
Production-ready –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
"""

import logging
from typing import Optional, AsyncGenerator, Any
from contextlib import asynccontextmanager

try:
    import asyncpg
except ImportError:
    asyncpg = None

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.pool import NullPool

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –≤ sys.path
backend_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if backend_path not in sys.path:
    sys.path.insert(0, backend_path)

from api.core.config import settings

logger = logging.getLogger(__name__)


class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.engine = None
        self.session_factory = None
        self._pool = None  # asyncpg.Pool –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ SQLAlchemy engine –¥–ª—è ORM
            if settings.DEBUG:
                # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –ø—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
                self.engine = create_async_engine(
                    settings.ASYNC_DATABASE_URL,
                    echo=True,
                    poolclass=NullPool,
                )
            else:
                # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –ø–æ–ª–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                self.engine = create_async_engine(
                    settings.ASYNC_DATABASE_URL,
                    echo=False,
                    pool_size=settings.DB_POOL_SIZE,
                    max_overflow=settings.DB_MAX_OVERFLOW,
                    pool_timeout=30,
                    pool_recycle=3600,  # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫–∞–∂–¥—ã–π —á–∞—Å
                    pool_pre_ping=True,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π
            self.session_factory = async_sessionmaker(
                bind=self.engine,
                class_=AsyncSession,
                expire_on_commit=False,
                autoflush=True,
                autocommit=False
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ asyncpg –ø—É–ª–∞ –¥–ª—è –ø—Ä—è–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if asyncpg is not None:
                self._pool = await asyncpg.create_pool(
                    settings.DATABASE_URL,
                    min_size=5,
                    max_size=settings.DB_POOL_SIZE,
                    command_timeout=60,
                    server_settings={
                        'jit': 'off',  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ JIT –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                        'application_name': 'anonymeme_backend'
                    }
                )
            else:
                logger.warning("asyncpg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—É–ª –ø—Ä—è–º—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î"""
        try:
            if self.engine:
                await self.engine.dispose()
                logger.info("SQLAlchemy engine –∑–∞–∫—Ä—ã—Ç")
            
            if self._pool:
                await self._pool.close()
                logger.info("AsyncPG pool –∑–∞–∫—Ä—ã—Ç")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")
    
    @asynccontextmanager
    async def get_session(self) -> AsyncGenerator[AsyncSession, None]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ SQLAlchemy"""
        if not self.session_factory:
            raise RuntimeError("Database not initialized")
        
        async with self.session_factory() as session:
            try:
                yield session
            except Exception:
                await session.rollback()
                raise
            finally:
                await session.close()
    
    @asynccontextmanager
    async def get_connection(self) -> AsyncGenerator[Any, None]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è asyncpg"""
        if not self._pool:
            raise RuntimeError("Database pool not initialized or asyncpg not available")
        
        if asyncpg is None:
            raise RuntimeError("asyncpg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        async with self._pool.acquire() as connection:
            yield connection
    
    async def health_check(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ SQLAlchemy
            async with self.get_session() as session:
                result = await session.execute("SELECT 1")
                sqlalchemy_ok = bool(result.scalar())
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ asyncpg
            async with self.get_connection() as conn:
                result = await conn.fetchval("SELECT 1")
                asyncpg_ok = result == 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞
            pool_stats = {
                "size": self._pool.get_size(),
                "min_size": self._pool.get_min_size(), 
                "max_size": self._pool.get_max_size(),
                "idle_connections": self._pool.get_idle_size()
            } if self._pool else {}
            
            return {
                "status": "healthy" if (sqlalchemy_ok and asyncpg_ok) else "unhealthy",
                "sqlalchemy": sqlalchemy_ok,
                "asyncpg": asyncpg_ok,
                "pool_stats": pool_stats
            }
            
        except Exception as e:
            return {
                "status": "unhealthy",
                "error": str(e),
                "sqlalchemy": False,
                "asyncpg": False,
                "pool_stats": {}
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
db_manager = DatabaseManager()


# Dependency —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è FastAPI
async def get_db_session() -> AsyncGenerator[AsyncSession, None]:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î –≤ FastAPI"""
    async with db_manager.get_session() as session:
        yield session


async def get_db_connection() -> AsyncGenerator[Any, None]:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ FastAPI"""
    async with db_manager.get_connection() as connection:
        yield connection


# –°–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def startup_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await db_manager.initialize()


async def shutdown_database():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ë–î –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await db_manager.close()


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
@asynccontextmanager
async def transaction() -> AsyncGenerator[AsyncSession, None]:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    async with db_manager.get_session() as session:
        async with session.begin():
            yield session


class TransactionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self):
        self.session: Optional[AsyncSession] = None
        self.in_transaction = False
    
    async def __aenter__(self) -> AsyncSession:
        self.session = db_manager.session_factory()
        await self.session.begin()
        self.in_transaction = True
        return self.session
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        # –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        _ = exc_val, exc_tb
        
        if self.session:
            try:
                if exc_type is None and self.in_transaction:
                    await self.session.commit()
                else:
                    await self.session.rollback()
            finally:
                await self.session.close()
                self.session = None
                self.in_transaction = False
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥–∞–≤–ª—è—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        return False


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def with_transaction(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è async —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    import functools
    import asyncio
    
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        if not asyncio.iscoroutinefunction(func):
            raise TypeError("with_transaction can only be used with async functions")
        
        async with TransactionManager() as session:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if 'db' not in kwargs and 'session' not in kwargs:
                kwargs['db'] = session
            return await func(*args, **kwargs)
    return wrapper


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π
async def run_migration_query(query: str) -> None:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π"""
    async with db_manager.get_connection() as conn:
        await conn.execute(query)


async def check_table_exists(table_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
    query = """
    SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = $1
    )
    """
    async with db_manager.get_connection() as conn:
        return await conn.fetchval(query, table_name)


async def get_table_schema(table_name: str) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã"""
    query = """
    SELECT column_name, data_type, is_nullable, column_default
    FROM information_schema.columns
    WHERE table_schema = 'public' AND table_name = $1
    ORDER BY ordinal_position
    """
    async with db_manager.get_connection() as conn:
        return await conn.fetch(query, table_name)


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async def get_db_stats() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    queries = {
        "active_connections": "SELECT count(*) FROM pg_stat_activity WHERE state = 'active'",
        "idle_connections": "SELECT count(*) FROM pg_stat_activity WHERE state = 'idle'",
        "database_size": "SELECT pg_size_pretty(pg_database_size(current_database()))",
        "total_queries": "SELECT sum(calls) FROM pg_stat_statements",
        "cache_hit_ratio": """
            SELECT round(
                100.0 * sum(blks_hit) / (sum(blks_hit) + sum(blks_read)), 2
            ) FROM pg_stat_database WHERE datname = current_database()
        """
    }
    
    stats = {}
    async with db_manager.get_connection() as conn:
        for stat_name, query in queries.items():
            try:
                stats[stat_name] = await conn.fetchval(query)
            except Exception as e:
                stats[stat_name] = f"Error: {e}"
    
    return stats


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
class IndexManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    @staticmethod
    async def get_unused_indexes() -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤"""
        query = """
        SELECT
            schemaname,
            tablename,
            indexname,
            idx_scan,
            idx_tup_read,
            idx_tup_fetch,
            pg_size_pretty(pg_relation_size(indexname::regclass)) as size
        FROM pg_stat_user_indexes
        WHERE idx_scan = 0
        ORDER BY pg_relation_size(indexname::regclass) DESC
        """
        
        async with db_manager.get_connection() as conn:
            return await conn.fetch(query)
    
    @staticmethod
    async def get_slow_queries() -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = """
        SELECT
            query,
            calls,
            total_time,
            mean_time,
            rows
        FROM pg_stat_statements
        WHERE calls > 100
        ORDER BY mean_time DESC
        LIMIT 10
        """
        
        async with db_manager.get_connection() as conn:
            return await conn.fetch(query)


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = [
    'db_manager',
    'get_db_session',
    'get_db_connection', 
    'startup_database',
    'shutdown_database',
    'transaction',
    'TransactionManager',
    'with_transaction',
    'run_migration_query',
    'check_table_exists',
    'get_table_schema',
    'get_db_stats',
    'IndexManager'
]