#!/usr/bin/env python3
"""
üîå WebSocket —Å–µ—Ä–≤–∏—Å –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
Production-ready WebSocket server —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏ –∏ —Å–æ–±—ã—Ç–∏—è–º–∏
"""

import json
import logging
import asyncio
from typing import Dict, Set, Optional, Any, List
from dataclasses import dataclass, asdict
from datetime import datetime, timezone
from enum import Enum

try:
    import websockets
    from websockets.server import WebSocketServerProtocol
    from websockets.exceptions import ConnectionClosedError, ConnectionClosedOK
    WEBSOCKETS_AVAILABLE = True
except ImportError:
    WEBSOCKETS_AVAILABLE = False
    WebSocketServerProtocol = None

import redis.asyncio as redis
from ..core.config import settings
from ..models.database import Token, Trade, User

logger = logging.getLogger(__name__)


class EventType(str, Enum):
    """–¢–∏–ø—ã WebSocket —Å–æ–±—ã—Ç–∏–π"""
    PRICE_UPDATE = "price_update"
    NEW_TRADE = "new_trade"
    TOKEN_CREATED = "token_created"
    TOKEN_GRADUATED = "token_graduated"
    USER_CONNECTED = "user_connected"
    USER_DISCONNECTED = "user_disconnected"
    PORTFOLIO_UPDATE = "portfolio_update"
    MARKET_STATS = "market_stats"
    ERROR = "error"
    HEARTBEAT = "heartbeat"


@dataclass
class WebSocketMessage:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è"""
    type: EventType
    data: Dict[str, Any]
    timestamp: str
    room: Optional[str] = None
    user_id: Optional[str] = None

    def to_json(self) -> str:
        return json.dumps(asdict(self))

    @classmethod
    def from_json(cls, json_str: str) -> 'WebSocketMessage':
        data = json.loads(json_str)
        return cls(**data)


@dataclass
class ConnectionInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏"""
    websocket: WebSocketServerProtocol
    user_id: Optional[str] = None
    rooms: Set[str] = None
    connected_at: datetime = None
    last_ping: datetime = None
    
    def __post_init__(self):
        if self.rooms is None:
            self.rooms = set()
        if self.connected_at is None:
            self.connected_at = datetime.now(timezone.utc)
        if self.last_ping is None:
            self.last_ping = datetime.now(timezone.utc)


class WebSocketManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏, –∫–æ–º–Ω–∞—Ç–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    
    def __init__(self, redis_client: Optional[redis.Redis] = None):
        self.connections: Dict[str, ConnectionInfo] = {}
        self.rooms: Dict[str, Set[str]] = {}
        self.redis_client = redis_client
        self.server = None
        self.is_running = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_connections": 0,
            "active_connections": 0,
            "messages_sent": 0,
            "errors": 0
        }
        
        logger.info("WebSocket Manager initialized")
    
    async def start_server(self, host: str = "localhost", port: int = 8765):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
        if not WEBSOCKETS_AVAILABLE:
            logger.error("‚ùå websockets library not available")
            return False
        
        try:
            self.server = await websockets.serve(
                self.handle_connection,
                host,
                port,
                ping_interval=30,
                ping_timeout=10,
                close_timeout=10
            )
            
            self.is_running = True
            logger.info(f"‚úÖ WebSocket server started on ws://{host}:{port}")
            
            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            asyncio.create_task(self.heartbeat_task())
            asyncio.create_task(self.cleanup_task())
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to start WebSocket server: {e}")
            return False
    
    async def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.server:
            self.server.close()
            await self.server.wait_closed()
            self.is_running = False
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            for connection_id in list(self.connections.keys()):
                await self.disconnect_client(connection_id)
            
            logger.info("WebSocket server stopped")
    
    async def handle_connection(self, websocket: WebSocketServerProtocol, path: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        connection_id = self.generate_connection_id()
        
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            connection = ConnectionInfo(websocket=websocket)
            self.connections[connection_id] = connection
            self.stats["total_connections"] += 1
            self.stats["active_connections"] += 1
            
            logger.info(f"üîå New WebSocket connection: {connection_id}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.send_to_connection(connection_id, WebSocketMessage(
                type=EventType.USER_CONNECTED,
                data={"connection_id": connection_id, "timestamp": datetime.now(timezone.utc).isoformat()},
                timestamp=datetime.now(timezone.utc).isoformat()
            ))
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in websocket:
                try:
                    await self.handle_message(connection_id, message)
                except Exception as e:
                    logger.error(f"Error handling message from {connection_id}: {e}")
                    await self.send_error(connection_id, str(e))
                    
        except (ConnectionClosedError, ConnectionClosedOK):
            logger.info(f"üîå Connection {connection_id} closed normally")
        except Exception as e:
            logger.error(f"‚ùå Connection {connection_id} error: {e}")
            self.stats["errors"] += 1
        finally:
            await self.disconnect_client(connection_id)
    
    async def handle_message(self, connection_id: str, message_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            message = WebSocketMessage.from_json(message_data)
            connection = self.connections.get(connection_id)
            
            if not connection:
                return
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏–Ω–≥–∞
            connection.last_ping = datetime.now(timezone.utc)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            if message.type == EventType.HEARTBEAT:
                await self.handle_heartbeat(connection_id)
            elif message.type == "join_room":
                await self.join_room(connection_id, message.data.get("room"))
            elif message.type == "leave_room":
                await self.leave_room(connection_id, message.data.get("room"))
            elif message.type == "authenticate":
                await self.authenticate_connection(connection_id, message.data.get("user_id"))
            else:
                logger.warning(f"Unknown message type: {message.type}")
                
        except json.JSONDecodeError:
            await self.send_error(connection_id, "Invalid JSON format")
        except Exception as e:
            logger.error(f"Error handling message: {e}")
            await self.send_error(connection_id, str(e))
    
    async def handle_heartbeat(self, connection_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ heartbeat –ø–∏–Ω–≥–∞"""
        connection = self.connections.get(connection_id)
        if connection:
            connection.last_ping = datetime.now(timezone.utc)
            await self.send_to_connection(connection_id, WebSocketMessage(
                type=EventType.HEARTBEAT,
                data={"pong": True},
                timestamp=datetime.now(timezone.utc).isoformat()
            ))
    
    async def join_room(self, connection_id: str, room: str):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ"""
        if not room:
            await self.send_error(connection_id, "Room name is required")
            return
        
        connection = self.connections.get(connection_id)
        if not connection:
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É
        if room not in self.rooms:
            self.rooms[room] = set()
        
        self.rooms[room].add(connection_id)
        connection.rooms.add(room)
        
        logger.info(f"Connection {connection_id} joined room {room}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await self.send_to_connection(connection_id, WebSocketMessage(
            type="room_joined",
            data={"room": room},
            timestamp=datetime.now(timezone.utc).isoformat()
        ))
    
    async def leave_room(self, connection_id: str, room: str):
        """–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã"""
        connection = self.connections.get(connection_id)
        if not connection:
            return
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        if room in self.rooms:
            self.rooms[room].discard(connection_id)
            if not self.rooms[room]:
                del self.rooms[room]
        
        connection.rooms.discard(room)
        
        logger.info(f"Connection {connection_id} left room {room}")
    
    async def authenticate_connection(self, connection_id: str, user_id: str):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        connection = self.connections.get(connection_id)
        if not connection:
            return
        
        connection.user_id = user_id
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–Ω–∞—Ç–µ
        await self.join_room(connection_id, f"user_{user_id}")
        
        logger.info(f"Connection {connection_id} authenticated as user {user_id}")
    
    async def disconnect_client(self, connection_id: str):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        connection = self.connections.get(connection_id)
        if not connection:
            return
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
        for room in list(connection.rooms):
            await self.leave_room(connection_id, room)
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket
        try:
            if not connection.websocket.closed:
                await connection.websocket.close()
        except Exception as e:
            logger.error(f"Error closing websocket: {e}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        del self.connections[connection_id]
        self.stats["active_connections"] -= 1
        
        logger.info(f"üîå Connection {connection_id} disconnected")
    
    async def send_to_connection(self, connection_id: str, message: WebSocketMessage):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é"""
        connection = self.connections.get(connection_id)
        if not connection or connection.websocket.closed:
            return False
        
        try:
            await connection.websocket.send(message.to_json())
            self.stats["messages_sent"] += 1
            return True
        except (ConnectionClosedError, ConnectionClosedOK):
            await self.disconnect_client(connection_id)
            return False
        except Exception as e:
            logger.error(f"Error sending message to {connection_id}: {e}")
            return False
    
    async def send_to_room(self, room: str, message: WebSocketMessage):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ"""
        if room not in self.rooms:
            return 0
        
        message.room = room
        sent_count = 0
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
        for connection_id in list(self.rooms[room]):
            if await self.send_to_connection(connection_id, message):
                sent_count += 1
        
        return sent_count
    
    async def send_to_user(self, user_id: str, message: WebSocketMessage):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        message.user_id = user_id
        return await self.send_to_room(f"user_{user_id}", message)
    
    async def broadcast(self, message: WebSocketMessage):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º"""
        sent_count = 0
        
        for connection_id in list(self.connections.keys()):
            if await self.send_to_connection(connection_id, message):
                sent_count += 1
        
        return sent_count
    
    async def send_error(self, connection_id: str, error_message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        message = WebSocketMessage(
            type=EventType.ERROR,
            data={"error": error_message},
            timestamp=datetime.now(timezone.utc).isoformat()
        )
        await self.send_to_connection(connection_id, message)
    
    # === BUSINESS LOGIC EVENTS ===
    
    async def notify_price_update(self, token_mint: str, price_data: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞"""
        message = WebSocketMessage(
            type=EventType.PRICE_UPDATE,
            data={
                "token_mint": token_mint,
                **price_data
            },
            timestamp=datetime.now(timezone.utc).isoformat()
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É —Ç–æ–∫–µ–Ω–∞ –∏ –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
        await self.send_to_room(f"token_{token_mint}", message)
        await self.send_to_room("global", message)
    
    async def notify_new_trade(self, trade_data: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        message = WebSocketMessage(
            type=EventType.NEW_TRADE,
            data=trade_data,
            timestamp=datetime.now(timezone.utc).isoformat()
        )
        
        token_mint = trade_data.get("token_mint")
        user_id = trade_data.get("user_id")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        if token_mint:
            await self.send_to_room(f"token_{token_mint}", message)
        if user_id:
            await self.send_to_user(user_id, message)
        await self.send_to_room("global", message)
    
    async def notify_token_created(self, token_data: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        message = WebSocketMessage(
            type=EventType.TOKEN_CREATED,
            data=token_data,
            timestamp=datetime.now(timezone.utc).isoformat()
        )
        
        await self.broadcast(message)
    
    async def notify_portfolio_update(self, user_id: str, portfolio_data: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        message = WebSocketMessage(
            type=EventType.PORTFOLIO_UPDATE,
            data=portfolio_data,
            timestamp=datetime.now(timezone.utc).isoformat()
        )
        
        await self.send_to_user(user_id, message)
    
    async def notify_market_stats(self, stats_data: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        message = WebSocketMessage(
            type=EventType.MARKET_STATS,
            data=stats_data,
            timestamp=datetime.now(timezone.utc).isoformat()
        )
        
        await self.send_to_room("global", message)
    
    # === BACKGROUND TASKS ===
    
    async def heartbeat_task(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        while self.is_running:
            try:
                current_time = datetime.now(timezone.utc)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
                for connection_id, connection in list(self.connections.items()):
                    time_since_ping = (current_time - connection.last_ping).total_seconds()
                    
                    if time_since_ping > 120:  # 2 –º–∏–Ω—É—Ç—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        logger.info(f"Disconnecting inactive connection: {connection_id}")
                        await self.disconnect_client(connection_id)
                
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"Error in heartbeat task: {e}")
                await asyncio.sleep(30)
    
    async def cleanup_task(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        while self.is_running:
            try:
                # –û—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç
                empty_rooms = [room for room, connections in self.rooms.items() if not connections]
                for room in empty_rooms:
                    del self.rooms[room]
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if self.stats["active_connections"] > 0:
                    logger.info(f"WebSocket Stats: {self.stats}")
                
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
            except Exception as e:
                logger.error(f"Error in cleanup task: {e}")
                await asyncio.sleep(300)
    
    # === UTILITY METHODS ===
    
    def generate_connection_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        import uuid
        return str(uuid.uuid4())
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
        return {
            **self.stats,
            "rooms": {room: len(connections) for room, connections in self.rooms.items()},
            "connections_by_user": {
                conn.user_id: connection_id 
                for connection_id, conn in self.connections.items() 
                if conn.user_id
            }
        }
    
    def get_room_info(self, room: str) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ"""
        if room not in self.rooms:
            return {"exists": False}
        
        connections = self.rooms[room]
        users = [
            self.connections[conn_id].user_id 
            for conn_id in connections 
            if self.connections[conn_id].user_id
        ]
        
        return {
            "exists": True,
            "connection_count": len(connections),
            "user_count": len([u for u in users if u]),
            "users": list(set(users))
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
websocket_manager = WebSocketManager()


# –°–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è FastAPI
async def startup_websocket_service():
    """–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–∏—Å–∞"""
    if WEBSOCKETS_AVAILABLE:
        await websocket_manager.start_server(
            host=settings.WEBSOCKET_HOST,
            port=settings.WEBSOCKET_PORT
        )
    else:
        logger.warning("‚ö†Ô∏è WebSockets not available, real-time features disabled")


async def shutdown_websocket_service():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–µ—Ä–≤–∏—Å–∞"""
    await websocket_manager.stop_server()


# Dependency —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è FastAPI
def get_websocket_manager() -> WebSocketManager:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    return websocket_manager


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = [
    'WebSocketManager',
    'WebSocketMessage',
    'EventType',
    'websocket_manager',
    'get_websocket_manager',
    'startup_websocket_service',
    'shutdown_websocket_service',
    'WEBSOCKETS_AVAILABLE'
]