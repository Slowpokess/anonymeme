#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π Anonymeme
Production-ready —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
"""

import pytest
import asyncio
import tempfile
from pathlib import Path
from unittest.mock import AsyncMock, patch

from .migrate import MigrationRunner


class TestMigrationRunner:
    """–¢–µ—Å—Ç—ã –¥–ª—è MigrationRunner"""
    
    @pytest.fixture
    def temp_migrations_dir(self):
        """–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        with tempfile.TemporaryDirectory() as tmpdir:
            migrations_dir = Path(tmpdir) / "migrations"
            migrations_dir.mkdir()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
            (migrations_dir / "001_test_migration.sql").write_text("""
                CREATE TABLE test_table (id SERIAL PRIMARY KEY);
            """)
            
            (migrations_dir / "002_another_migration.sql").write_text("""
                ALTER TABLE test_table ADD COLUMN name VARCHAR(100);
            """)
            
            yield migrations_dir
    
    @pytest.fixture
    def runner(self):
        """–≠–∫–∑–µ–º–ø–ª—è—Ä MigrationRunner —Å –º–æ–∫–∞–º–∏"""
        runner = MigrationRunner("postgresql://test")
        runner.connection = AsyncMock()
        return runner
    
    def test_get_migration_files(self, runner, temp_migrations_dir):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π"""
        runner.migrations_dir = temp_migrations_dir
        
        migrations = runner.get_migration_files()

        if len(migrations) != 2:
            raise AssertionError(f"–û–∂–∏–¥–∞–ª–æ—Å—å 2 –º–∏–≥—Ä–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–æ: {len(migrations)}")
        if migrations[0]['version'] != '001':
            raise AssertionError(f"–û–∂–∏–¥–∞–ª–∞—Å—å –≤–µ—Ä—Å–∏—è '001', –ø–æ–ª—É—á–µ–Ω–∞: {migrations[0]['version']}")
        if migrations[1]['version'] != '002':
            raise AssertionError(f"–û–∂–∏–¥–∞–ª–∞—Å—å –≤–µ—Ä—Å–∏—è '002', –ø–æ–ª—É—á–µ–Ω–∞: {migrations[1]['version']}")
        if 'CREATE TABLE' not in migrations[0]['content']:
            raise AssertionError("–û–∂–∏–¥–∞–ª–æ—Å—å 'CREATE TABLE' –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –º–∏–≥—Ä–∞—Ü–∏–∏")
    
    def test_calculate_checksum(self, runner):
        """–¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã"""
        content = "CREATE TABLE test;"
        checksum1 = runner.calculate_checksum(content)
        checksum2 = runner.calculate_checksum(content)

        if checksum1 != checksum2:
            raise AssertionError(f"–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {checksum1} != {checksum2}")
        if len(checksum1) != 64:
            raise AssertionError(f"–î–ª–∏–Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 64 (SHA256), –ø–æ–ª—É—á–µ–Ω–æ: {len(checksum1)}")
    
    @pytest.mark.asyncio
    async def test_apply_migration_success(self, runner):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
        migration = {
            'version': '001',
            'name': 'test_migration',
            'content': 'CREATE TABLE test_table (id SERIAL);'
        }
        
        # –ú–æ–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        runner.connection.transaction.return_value.__aenter__ = AsyncMock()
        runner.connection.transaction.return_value.__aexit__ = AsyncMock()
        runner.connection.execute = AsyncMock()
        
        result = await runner.apply_migration(migration)

        if result is not True:
            raise AssertionError(f"–û–∂–∏–¥–∞–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç True, –ø–æ–ª—É—á–µ–Ω–æ: {result}")
        if runner.connection.execute.call_count != 2:
            raise AssertionError(f"–û–∂–∏–¥–∞–ª–æ—Å—å 2 –≤—ã–∑–æ–≤–∞ execute, –ø–æ–ª—É—á–µ–Ω–æ: {runner.connection.execute.call_count}")
    
    @pytest.mark.asyncio
    async def test_apply_migration_failure(self, runner):
        """–¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
        migration = {
            'version': '001',
            'name': 'test_migration',
            'content': 'INVALID SQL;'
        }
        
        # –ú–æ–∫ –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        runner.connection.transaction.return_value.__aenter__ = AsyncMock()
        runner.connection.transaction.return_value.__aexit__ = AsyncMock()
        runner.connection.execute = AsyncMock(side_effect=Exception("SQL Error"))
        
        result = await runner.apply_migration(migration)

        if result is not False:
            raise AssertionError(f"–û–∂–∏–¥–∞–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç False –ø—Ä–∏ –æ—à–∏–±–∫–µ, –ø–æ–ª—É—á–µ–Ω–æ: {result}")
    
    @pytest.mark.asyncio
    async def test_get_applied_migrations(self, runner):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        # –ú–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        mock_rows = [
            {'version': '001'},
            {'version': '002'}
        ]
        runner.connection.fetch = AsyncMock(return_value=mock_rows)
        
        applied = await runner.get_applied_migrations()

        if applied != ['001', '002']:
            raise AssertionError(f"–û–∂–∏–¥–∞–ª–æ—Å—å ['001', '002'], –ø–æ–ª—É—á–µ–Ω–æ: {applied}")
    
    def test_validate_migrations_success(self, runner, temp_migrations_dir):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π"""
        runner.migrations_dir = temp_migrations_dir
        
        result = asyncio.run(runner.validate_migrations())

        if result is not True:
            raise AssertionError(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π, –ø–æ–ª—É—á–µ–Ω–æ: {result}")
    
    def test_validate_migrations_empty(self, runner):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–π –ø–∞–ø–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π"""
        runner.migrations_dir = Path("/nonexistent")
        
        result = asyncio.run(runner.validate_migrations())

        if result is not False:
            raise AssertionError(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–π –ø–∞–ø–∫–∏ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False, –ø–æ–ª—É—á–µ–Ω–æ: {result}")


class TestMigrationIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–π"""
    
    @pytest.mark.asyncio
    async def test_full_migration_cycle(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–π"""
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π –ë–î –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # –í CI/CD —Å—Ä–µ–¥–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é PostgreSQL
        pass
    
    def test_migration_files_syntax(self):
        """–¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π"""
        migrations_dir = Path(__file__).parent / "migrations"
        
        if not migrations_dir.exists():
            pytest.skip("Migrations directory not found")
        
        for migration_file in migrations_dir.glob("*.sql"):
            content = migration_file.read_text()
            
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            if not content.strip():
                raise AssertionError(f"Empty migration: {migration_file.name}")
            if not ("DO $$" in content or "CREATE" in content or "ALTER" in content):
                raise AssertionError(f"No SQL commands found in: {migration_file.name}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
            dangerous_commands = ["DROP DATABASE", "DROP SCHEMA"]
            content_upper = content.upper()
            for cmd in dangerous_commands:
                if cmd in content_upper:
                    raise AssertionError(f"Dangerous command '{cmd}' found in: {migration_file.name}")


class TestDatabaseConnection:
    """–¢–µ—Å—Ç—ã –¥–ª—è DatabaseManager"""
    
    @pytest.fixture
    def db_manager(self):
        """–≠–∫–∑–µ–º–ø–ª—è—Ä DatabaseManager —Å –º–æ–∫–∞–º–∏"""
        from .connection import DatabaseManager
        return DatabaseManager()
    
    @pytest.mark.asyncio
    async def test_health_check_healthy(self, db_manager):
        """–¢–µ—Å—Ç health check –ø—Ä–∏ –∑–¥–æ—Ä–æ–≤–æ–π –ë–î"""
        # –ú–æ–∫ –∑–¥–æ—Ä–æ–≤–æ–π –ë–î
        with patch.object(db_manager, 'get_session') as mock_session, \
             patch.object(db_manager, 'get_connection') as mock_conn:
            
            # –ú–æ–∫ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            mock_session.return_value.__aenter__ = AsyncMock()
            mock_session.return_value.__aexit__ = AsyncMock()
            mock_session.return_value.execute = AsyncMock()
            mock_session.return_value.execute.return_value.scalar.return_value = 1
            
            mock_conn.return_value.__aenter__ = AsyncMock()
            mock_conn.return_value.__aexit__ = AsyncMock()
            mock_conn.return_value.fetchval = AsyncMock(return_value=1)
            
            # –ú–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–ª–∞
            db_manager._pool = AsyncMock()
            db_manager._pool.get_size.return_value = 10
            db_manager._pool.get_min_size.return_value = 5
            db_manager._pool.get_max_size.return_value = 20
            db_manager._pool.get_idle_size.return_value = 3
            
            health = await db_manager.health_check()

            if health["status"] != "healthy":
                raise AssertionError(f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 'healthy', –ø–æ–ª—É—á–µ–Ω–æ: {health['status']}")
            if health["sqlalchemy"] is not True:
                raise AssertionError(f"SQLAlchemy –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å healthy: {health.get('sqlalchemy')}")
            if health["asyncpg"] is not True:
                raise AssertionError(f"asyncpg –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å healthy: {health.get('asyncpg')}")
            if "pool_stats" not in health:
                raise AssertionError("–û–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–ª–µ 'pool_stats' –≤ health")
    
    @pytest.mark.asyncio
    async def test_health_check_unhealthy(self, db_manager):
        """–¢–µ—Å—Ç health check –ø—Ä–∏ –Ω–µ–∑–¥–æ—Ä–æ–≤–æ–π –ë–î"""
        # –ú–æ–∫ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        with patch.object(db_manager, 'get_session') as mock_session:
            mock_session.side_effect = Exception("Connection failed")
            
            health = await db_manager.health_check()

            if health["status"] != "unhealthy":
                raise AssertionError(f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 'unhealthy', –ø–æ–ª—É—á–µ–Ω–æ: {health['status']}")
            if "error" not in health:
                raise AssertionError("–û–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–ª–µ 'error' –≤ health")


class TestPerformanceOptimizations:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def test_index_coverage(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        migrations_dir = Path(__file__).parent / "migrations"
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        all_indexes = []
        for migration_file in migrations_dir.glob("*.sql"):
            content = migration_file.read_text().upper()
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –∏–Ω–¥–µ–∫—Å–æ–≤
            lines = content.split('\n')
            for line in lines:
                if 'CREATE INDEX' in line or 'CREATE UNIQUE INDEX' in line:
                    all_indexes.append(line.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã
        critical_patterns = [
            'USERS(WALLET_ADDRESS)',
            'TOKENS(MINT_ADDRESS)', 
            'TRADES(USER_ID',
            'TRADES(TOKEN_ID',
            'TOKENS(STATUS'
        ]
        
        for pattern in critical_patterns:
            found = any(pattern in idx for idx in all_indexes)
            if not found:
                raise AssertionError(f"Missing critical index for: {pattern}")
    
    def test_foreign_key_indexes(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–∞—Ö"""
        # –í—Å–µ FK –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        # –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è PostgreSQL
        migrations_dir = Path(__file__).parent / "migrations"
        
        foreign_keys = []
        indexes = []
        
        for migration_file in migrations_dir.glob("*.sql"):
            content = migration_file.read_text().upper()
            
            # –ò—â–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
            for line in content.split('\n'):
                if 'REFERENCES' in line and 'FOREIGN KEY' not in line:
                    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ FK
                    if '(' in line and ')' in line:
                        foreign_keys.append(line.strip())
                
                if 'CREATE INDEX' in line:
                    indexes.append(line.strip())
        
        # –í –∏–¥–µ–∞–ª–µ –∫–∞–∂–¥—ã–π FK –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∏–Ω–¥–µ–∫—Å
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if len(indexes) < len(foreign_keys) // 2:
            raise AssertionError("Not enough indexes for foreign keys")


if __name__ == "__main__":
    pytest.main([__file__])