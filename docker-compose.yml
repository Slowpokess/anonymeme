# 🐳 Docker Compose для Anonymeme Platform
# Complete containerization solution для всех компонентов системы

version: '3.8'

# ===== SHARED NETWORKS =====
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring:
    external: true
    name: anonymeme_monitoring
  blockchain:
    driver: bridge

# ===== PERSISTENT VOLUMES =====
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  nginx-config:
    driver: local
  node-modules-cache:
    driver: local
  rust-cache:
    driver: local

# ===== SERVICES =====
services:
  # ===== DATABASE =====
  postgres:
    image: postgres:15-alpine
    container_name: anonymeme-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-anonymeme}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/backups:/backups
    networks:
      - app-network
    command: >
      postgres 
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c random_page_cost=1.1
      -c temp_file_limit=2GB
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-anonymeme}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    labels:
      - "traefik.enable=false"

  # ===== REDIS CACHE =====
  redis:
    image: redis:7-alpine
    container_name: anonymeme-redis
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-redis_password}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=false"

  # ===== BACKEND API =====
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=${ENVIRONMENT:-development}
        - BUILD_VERSION=${BUILD_VERSION:-latest}
    image: anonymeme/backend:${BUILD_VERSION:-latest}
    container_name: anonymeme-backend
    restart: unless-stopped
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-anonymeme}
      - DB_POOL_SIZE=${DB_POOL_SIZE:-20}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW:-30}
      
      # Redis Configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      - REDIS_MAX_CONNECTIONS=${REDIS_MAX_CONNECTIONS:-20}
      
      # Application Configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-60}
      
      # Solana Configuration
      - SOLANA_RPC_URL=${SOLANA_RPC_URL:-https://api.mainnet-beta.solana.com}
      - SOLANA_WS_URL=${SOLANA_WS_URL:-wss://api.mainnet-beta.solana.com}
      - CONTRACT_ADDRESS=${CONTRACT_ADDRESS}
      - KEYPAIR_PATH=${KEYPAIR_PATH:-/app/keypairs/deployer.json}
      
      # Security Configuration
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,https://anonymeme.io}
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE:-60}
      - MAX_REQUEST_SIZE=${MAX_REQUEST_SIZE:-10485760}
      
      # Monitoring
      - PROMETHEUS_METRICS=${PROMETHEUS_METRICS:-true}
      - JAEGER_ENABLED=${JAEGER_ENABLED:-true}
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      
      # Email Configuration (if needed)
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./backend/keypairs:/app/keypairs:ro
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    networks:
      - app-network
      - blockchain
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8000"
      - "prometheus.io/path=/metrics"

  # ===== FRONTEND =====
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
        - NEXT_PUBLIC_ENVIRONMENT=${ENVIRONMENT:-development}
        - NEXT_PUBLIC_SOLANA_NETWORK=${SOLANA_NETWORK:-mainnet-beta}
        - BUILD_VERSION=${BUILD_VERSION:-latest}
    image: anonymeme/frontend:${BUILD_VERSION:-latest}
    container_name: anonymeme-frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_ENVIRONMENT=${ENVIRONMENT:-development}
      - NEXT_PUBLIC_SOLANA_NETWORK=${SOLANA_NETWORK:-mainnet-beta}
      - NEXT_PUBLIC_CONTRACT_ADDRESS=${CONTRACT_ADDRESS}
      - NEXT_PUBLIC_ANALYTICS_ID=${ANALYTICS_ID}
      - NODE_ENV=${NODE_ENV:-production}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - node-modules-cache:/app/.next/cache
      - ./frontend/public:/app/public:ro
    networks:
      - app-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"